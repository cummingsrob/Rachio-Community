/**
 *  Rachio Community
 *
 *  Copyright\u00A9 2018 Anthony Santilli
 *  Copyright\u00A9 2020 Justin Leonard
 *
 *  V1.1.1 written by Anthony Santilli (@tonesto7)
 *  Ported to Hubitat and Enhanced to V2.0+ by Justin Leonard (@JustinL)
 *
 * Many thanks to Tom Walling (@tomw) for high-level consultation on architecture and functionality for enhancing the native Rachio app/drivers.
 * Thanks also to Josh Lyon (@josh) for proof of concept for generating an SVG for output at an Oath endpoint
 * Thanks to Rob (@Equis) in the Hubitat Community for icon design
 *
 * Attribution: Filled icons: Rain drop icon, icicle icon, and rain sensor icon made by Freepik from www.flaticon.com, Weather icons originally designed by Ashley Jager and modified by Justin Leonard
 * 
 * Outline icones licensed under [SIL OFL 1.1](http://scripts.sil.org/OFL) from https://github.com/erikflowers/weather-icons
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 * V1.1.1:  Modified by Rachio/Anthony Santilli (07-11-2018)
 * V2.0:    Ported to Hubitat; Added dashboard and exposed additional information in controller/zone, including next run, last run, rain sensor state, next upcoming event, weather intelligence information, and monthly watering summary (05-31-2020)    
 * V2.0.1:  Added external target for account setup link
 * V2.0.2:  Fixed issue with removal of webhook subscriptions upon app uninstall
 * V2.0.3:  Fixed issue with dashboard sizing; Added dashboard attribute to controller
 * V2.0.4:  Increased font size on dashboard for precipitation info
 * V2.0.5:  Fixed issue with web browser caching dashboard image in dashboard attribute of controller
 * V2.0.6:    Fixed issue with default zone run time
 * V2.0.7:    Fixed issue with logging and with getCurrentRainDelay method
 * V2.0.8: Added icon pack; Fixed Internal Server Error from Webhooks
 */

import groovy.json.*
import java.text.SimpleDateFormat
import groovy.json.JsonBuilder
import groovy.transform.Field

definition(
    name: "Rachio Community",
    namespace: "lnjustin",
    author: "Anthony Santilli, Justin Leonard",
    description: "Community version of Rachio Integration.",
    category: "Green Living",
    iconUrl: "https://s3-us-west-2.amazonaws.com/rachio-media/smartthings/Rachio-logo-100px.png",
    iconX2Url: "https://s3-us-west-2.amazonaws.com/rachio-media/smartthings/Rachio-logo-200px.png",
    iconX3Url: "https://s3-us-west-2.amazonaws.com/rachio-media/smartthings/Rachio-logo-300px.png",
    singleInstance: true,
    oauth: [displayName: "Rachio"],
    usesThirdPartyAuthentication: true)

preferences {
    page(name: "startPage")
    page(name: "dashboardSettingsPage")
    page(name: "apiKeyPage")
    page(name: "authPage")
    page(name: "noOauthPage")
    page(name: "devMigrationPage")
    page(name: "devicePage")
    page(name: "supportPage")
}

mappings {
    path("/rachioReceiver") { action: [ POST: "rachioReceiveHandler" ] }
    path("/rachioDashboard/:controllerID") { action: [ GET: "buildDashboard"] }
}

String appVer() { return "2.0.7" }

@Field Integer zoneRunTimeDefault = 10

def getZoneRunTimeDefaultSetting() {
    return (defaultZoneTime) ? defaultZoneTime : zoneRunTimeDefault
}

def appInfoSect()	{
    section() {
        def str = ""
        str += "${app?.name}"
        str += "\nCopyright\u00A9 Anthony Santilli, Justin Leonard"
        str += "\nVersion: ${appVer()}"
        paragraph str
    }
}

def startPage() {
    getAccessToken()
    if(!state?.accessToken) {
        noOauthPage()
    } else if(atomicState?.authToken) {
        devicePage()
    } else { authPage() }
}

def noOauthPage() {
    return dynamicPage(name: "noOauthPage", title: "Oauth Not Enabled", uninstall: true) {
        appInfoSect()
        section() {
            paragraph "Oauth is Not Enabled for this SmartApp.  Please Enable OAuth under App Settings", required: true, state: null
        }
        removeSect()
    }
}

def authPage()  {
    //log.debug "authPage()"
    def description = null
    def uninstallAllowed = false
    def oauthTokenProvided = false

    if(settings?.authKey && settings?.authKey.toString()?.length() > 10 && settings?.authKey != atomicState?.authToken) {
        atomicState?.authToken = settings?.authKey
        oauthTokenProvided = true
    }
    if(atomicState?.authToken) {
        getRachioDeviceData(true)
        def usrName = atomicState?.userName ?: ""
        description = usrName ? "You are signed in as $usrName" : "You are connected."
        uninstallAllowed = true
        oauthTokenProvided = true
    } else {
        description = "Login to Rachio Web App to get your API Key"
    }
    
    if (!oauthTokenProvided) { log.info "No Rachio AuthToken Found... Please Login to Web App > Account Settings > Get API Key..." }
    def authPara = !oauthTokenProvided ? "Please Login to Web App\n• Tap on More Tab\n• Click on Account Settings\n• Click Get API Key\n• Tap the Copy Icon\n• Press the back button\n• Paste the key in the input below" : "Tap Next to setup your sprinklers."
    return dynamicPage(name: "authPage", title: "Auth Page", nextPage: (oauthTokenProvided ? "devicePage" : null), uninstall: uninstallAllowed) {
        appInfoSect()
        section() {
            paragraph authPara
            href url: "https://app.rach.io", style: "external", required: (!oauthTokenProvided), state: (oauthTokenProvided ? "complete" : ""), title: "Rachio", description: description
            href "apiKeyPage", title: "Enter your API Key", description: (authKey ? "API Key Entered" : "Tap to Enter API Key"), state: (authKey ? "complete" : null), required: true
        }
        if(uninstallAllowed) { removeSect() }
    }
}

def apiKeyPage() {
    return dynamicPage(name: "apiKeyPage", title: "API Key", install: false, uninstall: false) {
        section() {
            input "authKey", "text", title: "API Key", required: true, description: "Paste the API Key Here...", submitOnChange: true
        }
    }
}

def removeSect() {
   // paragraph "Remove this App and Devices!", "WARNING!!!", "Last Chance to Stop!\nThis action is not reversible\n\nThis App and All Devices will be removed", required: true, state: null
}


// This method is called after "auth" page is done with Oauth2 authorization, then page "deviceList" with content of devicePage()
def devicePage() {
    //log.trace "devicePage()..."
    if(!atomicState?.authToken) {
        if (debugLogging) { log.debug "No accesstoken" }
        return
    }
    // Step 1: get (list) of available devices associated with the login account.
    def devData = getRachioDeviceData()
    def devices = getDeviceInputEnum(devData)
    if (debugLogging) { log.debug "rachioDeviceList(): ${devices}" }

    //step2: render the page for user to select which device
    return dynamicPage(name: "devicePage", title: "${(atomicState?.authToken && atomicState?.selectedDevices) ? "Select" : "Manage"} Your Devices", install: true, uninstall: true) {
        appInfoSect()
        section("Controller Configuration:"){
            input "controllers", "enum", title: "Select your controllers", description: "Tap to Select", required: true, multiple: true, options: devices, submitOnChange: true, image: (atomicState?.modelInfo ? atomicState?.modelInfo.img : "")
            atomicState?.controllerIds = settings?.controllers
        }
        if(settings?.controllers) {
            updateHwInfoMap(devData?.devices)
            devices?.sort { it?.value }?.each { cont->
                if(cont?.key in settings?.controllers) {
                    section("${cont?.value} Zones:"){
                        if(settings?."${cont?.key}_zones") {
                            def dData = devData?.devices?.find { it?.id == cont?.key }
                            if(dData) { devDesc(dData) }
                        }
                        def zoneData = zoneSelections(devData, cont?.key)
                        input "${cont?.key}_zones", "enum", title: "Select your zones", description: "Tap to Select", required: true, multiple: true, options: zoneData, submitOnChange: true
                    }
                }
            }
            section("Preferences:") {
                input(name: "pauseInStandby", title: "Disable Actions while in Standby?", type: "bool", defaultValue: true, multiple: false, submitOnChange: true,
                        description: "Allow your device to be disabled in Hubitat when you place your controller in Standby Mode...")
                paragraph "Select the Duration time to be used for manual Zone Runs (This can be changed under each zones device page)"
                input(name: "defaultZoneTime", title: "Default Zone Runtime (Minutes)", type: "number", description: "Tap to Modify", required: false, defaultValue: 10, submitOnChange: true)
            }

        }
        section() {
            href "supportPage", title: "Rachio Support", description: ""
            href "authPage", title: "Manage Login", description: ""
            href "dashboardSettingsPage", title: "Dashboard Setup", description: ""
        }
        section() {
            input "debugLogging", "bool", title: "Activate Debug Logging?", defaultValue: false, submitOnChange: true
        }
        if(settings?.controllers) {
            settings?.controllers?.each { contID ->
                if(contID) { 
                    section("") {
                    def localUri = getFullLocalApiServerUrl() + "/rachioDashboard/${contID}?access_token=${state.accessToken}"
                    def cloudUri = getFullApiServerUrl() + "/rachioDashboard/${contID}?access_token=${state.accessToken}"
                        paragraph("<a href='${cloudUri}'>Link for Dashboard of Controller ${contID}</a>")
                        d = getChildDevice(contID)
                        if (d) {
                            paragraph("<a href='${cloudUri}'>" + d.currentValue('dashboard') + "</a>")
                        }
                    }
                }
            }
        }
        removeSect()
    }
}

numPastDaysDashboardDefault = 2
numFutureDaysDashboardDefault = 2
showPrecipPercentDefault = true
showPrecipAmountDefault = true
showTempDefault = true
colorSchemeSelectionDefault = "Black with Color"
fontWeightDefault = "normal"
globalScaleDefault = 100
extraVerticalSpaceDefault = 0
extraHorizontalSpaceDefault = 0


def dashboardSettingsPage(){
    if(!state.accessToken){	
        //enable OAuth in the app settings or this call will fail
        createAccessToken()	
    }

    return dynamicPage(name: "dashboardSettings", title: "Dashboard Setup", nextPage: "devicePage"){
        section(getSectionTitle("Dashboard Day Settings")){
                input "numPastDaysDashboard", "number", title: "Number of Days in Past to Display on Dashboard", required: false, defaultValue: 2, submitOnChange: false
                input "numFutureDaysDashboard", "number", title: "Number of Days in Future to Display on Dashboard", required: false, defaultValue: 2, submitOnChange: false
        }
        section(getSectionTitle("Configure Information on Dashboard")) {
            input "showPrecipPercent", "bool", title: "Show Precipitation %?", defaultValue: true, submitOnChange: false
            input "showPrecipAmount", "bool", title: "Show Precipitation Amount?", defaultValue: true, submitOnChange: false
            input "showTemp", "bool", title: "Show High/Low Temperature?", defaultValue: true, submitOnChange: false
        }
        section(getSectionTitle("Configure Display Formatting")) {
            input(name: "iconSchemeSelection", type: "enum", title: "Select Icon Scheme:", required: true, multiple: false, options: ["Filled","Outline"], submitOnChange: false, defaultValue: 'Filled', width: 5)
            input(name: "colorSchemeSelection", type: "enum", title: "Select Color Scheme:", required: true, multiple: false, options: ["White with Color","Black with Color", "White without Color", "Black without Color", "Custom"], submitOnChange: false, defaultValue: 'Black with Color', width: 5)
            if(colorSchemeSelection == "Custom") {
                input "cloudColorCustom", "string", title: "Cloud Color (format: #FFFFFF)", submitOnChange: false
                input "lightColorCustom", "string", title: "Sun and Lightning Color (format: #FFFFFF)", submitOnChange: false
                input "precipColorCustom", "string", title: "Normal Precipitation Color (format: #FFFFFF)", submitOnChange: false
                input "frozenPrecipColorCustom", "string", title: "Frozen Precipitation Color (format: #FFFFFF)", submitOnChange: false           
                input "precipColorCustom", "string", title: "Normal Precipitation Color (format: #FFFFFF)", submitOnChange: false
                
                input "rainDropWateringColorCustom", "string", title: "Color of Rain Drop to indicate Watering (format: #FFFFFF)", submitOnChange: false
                input "rainDropAccentColorCustom", "string", title: "Color of Accent Mark on Rain Drop (format: #FFFFFF)", submitOnChange: false
                input "rainDropOutlineColorCustom", "string", title: "Color of Rain Drop Outline (format: #FFFFFF)", submitOnChange: false
                input "rainDropSkipColorCustom", "string", title: "Color of Rain Drop to indicate Watering Skip (format: #FFFFFF)", submitOnChange: false
                input "windSkipColorCustom", "string", title: "Color of Wind to indicate Wind Skip (format: #FFFFFF)", submitOnChange: false
                input "rainSensorSkipColorCustom", "string", title: "Color of Rain Sensor to indicate Rain Sensor Skip (format: #FFFFFF)", submitOnChange: false
                input "freezeSkip0ColorCustom", "string", title: "Back Color of Icicle to indicate Freeze Skip (format: #FFFFFF)", submitOnChange: false
                input "freezeSkip1ColorCustom", "string", title: "Front Color of Icicle to indicate Freeze Skip (format: #FFFFFF)", submitOnChange: false
                input "saturatedSoilColorCustom", "string", title: "Color of Soil to indicate Soil Saturation Skip (format: #FFFFFF)", submitOnChange: false
                input "rainDropsPredictedColorCustom", "string", title: "Color of Small Rain Drops to indicate Predicted Rain Skip (format: #FFFFFF)", submitOnChange: false
                input "strokeColorCustom", "string", title: "Icon Outline Color (format: #FFFFFF)", submitOnChange: false
               
                input "dayTextColorCustom", "string", title: "Day Text Color (format: #FFFFFF)", submitOnChange: false
                input "precipTextColorCustom", "string", title: "Precipitation Text Color (format: #FFFFFF)", submitOnChange: false
                input "highTempTextColorCustom", "string", title: "High Temp Text Color (format: #FFFFFF)", submitOnChange: false
                input "lowTempTextColorCustom", "string", title: "Low Temp Text Color (format: #FFFFFF)", submitOnChange: false
                
            }
            input "fontWeight", "enum", title: "Text Weight", defaultValue: "normal", options:["normal", "bold"], multiple: false, width: 2, submitOnChange: false
          //  input "globalScale", "number", title: "Global Scale (in percent)",defaultValue: 100, submitOnChange: false
          //  input "extraVerticalSpace", "number", title: "Extra Vertical Spacing (in pts)", defaultValue: 0, submitOnChange: false
          //  input "extraHorizontalSpace", "number", title: "Extra Horizontal Spacing (in pts)", defaultValue: 0, submitOnChange: false

        }


        section(getSectionTitle("Attribution")) {
            paragraph("Rain drop icon, icicle icon, and rain sensor icon made by Freepik from www.flaticon.com")  
        }

    }
}

def getSectionTitle(txt) {
     return '<strong>' + txt + '</strong>'   
}

void settingUpdate(name, value, type=null) {
	//log.trace "settingUpdate($name, $value, $type)..."
	if(name && type) {
		app?.updateSetting("$name", [type: "$type", value: value])
	}
	else if (name && type == null){ app?.updateSetting(name.toString(), value) }
}

void settingRemove(name) {
	//log.trace "settingRemove($name)..."
    
     // if(name) { app?.deleteSetting("$name") }
	if(name) { app?.removeSetting("$name") }  // ported line
}

void appCleanup() {
  //  log.trace "appCleanup()"
    def stateItems = ["deviceId", "selectedDevice", "selectedZones", "inStandbyMode", "isWateringMap", "inStandbyModeMap"]
    def setItems = ["sprinklers", "selectedZones"]
    stateItems?.each { if(state?.containsKey(it as String)) {state.remove(it)} }
    setItems?.each { if(settings?.containsKey(it as String)) {settingRemove(it)} }
}

def devDesc(dev) {
    if(dev) {
        def str = ""
        def zoneCnt = dev?.zones?.findAll { it?.id in settings?."${dev?.id}_zones" }?.size() ?: 0
        str += "${atomicState?.installed ? "Installed" : "Installing"} Device:\n${atomicState?.modelInfo[dev?.id]?.desc}"
        str += "\n($zoneCnt) Zone(s) ${atomicState?.installed ? "are selected" :  "will be installed"}"
        paragraph "${str}", state: "complete", image: (atomicState?.modelInfo[dev?.id]?.img ?: "")
    }
}

def supportPage() {
    return dynamicPage(name: "supportPage", title: "Rachio Support", install: false, uninstall: false) {
        section() {
            href url: getSupportUrl(), style:"embedded", title:"Rachio Support (Web)", description:"", state: "complete", image: "http://rachio-media.s3.amazonaws.com/images/icons/icon-support.png"
            href url: getCommunityUrl(), style:"embedded", title:"Rachio Community (Web)", description:"", state: "complete", image: "http://d33v4339jhl8k0.cloudfront.net/docs/assets/5355b85be4b0d020874de960/images/58333550903360645bfa6cf8/file-Er3y7doeam.png"
        }
    }
}

def zoneSelections(devData, devId=null) {
    //log.debug "zoneSelections: $devData"
    def res = [:]
    if(!devData) { return res }
    devData?.devices.sort {it?.name}.each { dev ->
        if(dev?.id == devId) {
            dev?.zones?.sort {it?.zoneNumber }.each { zone ->
                def str = (zone?.enabled == true) ? "" : " (Disabled)"
                //log.debug "zoneId: $zone.id"
                def adni = [zone?.id].join('.')
                res[adni] = "${zone?.name}$str"
            }
        }
    }
    return res
}

// This was added to handle missing oauth on the app and notifying the user of why it failed.
def getAccessToken() {
    try {
        if(!atomicState?.accessToken) {
            atomicState?.accessToken = createAccessToken()
        }
        else { return true }
    }
    catch (ex) {
        def msg = "Error: OAuth is not Enabled for the Rachio Community application!!!.  Please click remove and Enable Oauth under the App Settings..."
        // sendPush(msg)
        log.warn "getAccessToken Exception | ${msg}"
        return false
    }
}

def getRachioDeviceData(noData=false) {
    //log.trace "getRachioDevicesData($noData)..."

    //Step1: GET account info "userId"
    atomicState.userId = getUserId();
    if (!atomicState?.userId) {
        log.error "No user Id found exiting"
        return
    }
    def userInfo = getUserInfo(atomicState?.userId)
    if (debugLogging) { log.debug "userInfo: ${userInfo}" }
    atomicState?.userName = userInfo?.username

    if(!noData) { return userInfo }
}

def getDeviceInputEnum(data) {
    //Step3: Obtain device information for a location
    def devices = [:]
    if(!data) { return devices }
    data?.devices.sort { it?.name }.each { sid ->
       //log.info "systemId: ${sid.id}"
       def dni = sid?.id
       devices[dni] = sid?.name
       //log.info "Found sprinkler with dni(locationId.gatewayId.systemId.zoneId): $dni and displayname: ${devices[dni]}"
    }
    // log.info "getRachioDevicesData() >> sprinklers: $devices"
    return devices
}

def getUserInfo(userId) {
    //log.trace "getUserInfo ${userId}"
    return _httpGet("person/${userId}");
}

def getUserId() {
    //log.trace "getUserId()"
    def res = _httpGet("person/info");
    if (res) {
        return res?.id;
    }
    return null
}

void updateHwInfoMap(devdata) {
    def result = [:]
    if(devdata && settings?.controllers) {
        def results = null
        results = devdata?.findAll { it?.id in settings?.controllers }
        results?.each { dev ->
            result[dev?.id] = getHardwareInfo(dev?.model)
        }
    }
    atomicState?.modelInfo = result
}

def getDevGeneration(devId) {
    if(devId && atomicState?.modelInfo[devId] && atomicState?.modelInfo[devId]?.gen) {
        return atomicState?.modelInfo[devId]?.gen
    } 
    return null
}

def getDevJsonTag(devId) {
    if(devId && atomicState?.modelInfo[devId] && atomicState?.modelInfo[devId]?.jsonTag) {
        return atomicState?.modelInfo[devId]?.jsonTag
    } 
    return null
}

def getHardwareInfo(val) {
    switch(val) {
        case "GENERATION1_8ZONE":
            return [model: "8ZoneV1", desc: "8-Zone (Gen 1)", img: getAppImg("rachio_gen1.png"), gen: "Gen1", jsonTag: "gen1IrrigationController"]
        case "GENERATION1_16ZONE":
            return [model: "16ZoneV1", desc: "16-Zone (Gen 1)", img: getAppImg("rachio_gen1.png"), gen: "Gen1", jsonTag: "gen1IrrigationController"]
        case "GENERATION2_8ZONE":
            return [model: "8ZoneV2", desc: "8-Zone (Gen 2)", img: getAppImg("rachio_gen2.png"), gen: "Gen2", jsonTag: "gen2IrrigationController"]
        case "GENERATION2_16ZONE":
            return [model: "16ZoneV2", desc: "16-Zone (Gen 2)", img: getAppImg("rachio_gen2.png"), gen: "Gen2", jsonTag: "gen2IrrigationController"]
        case "GENERATION3_8ZONE":
            return [model: "8ZoneV3", desc: "8-Zone (Gen 3)", img: getAppImg("rachio_gen3.png"), gen: "Gen3", jsonTag: "gen3IrrigationController"]
        case "GENERATION3_16ZONE":
            return [model: "16ZoneV3", desc: "16-Zone (Gen 3)", img: getAppImg("rachio_gen3.png"), gen: "Gen3", jsonTag: "gen3IrrigationController"]
        case "GENERATION3_8ZONE_LITE":
            return [model: "8ZoneV3Lite", desc: "8-Zone (Gen 3 Lite)", img: getAppImg("rachio_gen3_lite.PNG"), gen: "Gen3", jsonTag: "gen3IrrigationController"]
        
    }
    return [desc: null, model: null, img: "", gen: null]
}

def getAppImg(imgName)	{ return "https://raw.githubusercontent.com/lnjustin/Rachio-Community/master/Images/$imgName" }

def _httpGet(subUri, endpoint="open") {
    if (debugLogging) { log.debug "_httpGet($subUri)" }
    try {
        def baseURI = (endpoint == "open") ? "${apiEndpoint}/1/public" : getClosedApiEndpoint()
        def params = [
            uri: "${baseURI}/${subUri}",
            headers: ["Authorization": "Bearer ${atomicState.authToken}"]
        ]
        httpGet(params) { resp ->
            if(resp.status == 200) {
                return resp?.data
            } else {
                //refresh the auth token
                if (resp?.status == 500 && resp?.data?.status?.code == 14) {
                    if (debugLogging) { log.debug "Storing the failed action to try later" }
                    data.action = "getRachioDeviceData"
                    if (debugLogging) { log.debug "Refreshing your authToken!" }
                    // refreshAuthToken()
                } else {
                    log.error "Authentication error, invalid authentication method, lack of credentials, etc."
                }
              return null
            }
        }
    } catch (ex) {
        if(ex instanceof groovyx.net.http.HttpResponseException) {
            if(ex?.response) {
                log.error("httpGet() Response Exception | Status: ${ex?.response?.status} | Data: ${ex?.response?.data}")
            }
        } else {
            log.error "_httpGet exception: ${ex.message}"
        }
    }
}

def getDisplayName(iroName, zname) {
    if(zname) {
        return "${iroName}:${zname}"
    } else {
        return "Rachio"
    }
}

//Section3: installed, updated, initialize methods
def installed() {
    log.trace "Installed with settings: ${settings}"
    initialize()
    atomicState?.installed = true
}

def updated() {
    if (debugLogging) { log.debug "Updated with settings: ${settings}" }
    unsubscribe()
    initialize()
}

def initialize() {
    log.trace "initialized..."
    unschedule()
    scheduler()
    subscribe(app, onAppTouch)
    updateDevZoneStates() //Creates the selectedDevices maps in state
    runIn(2, "initStep2", [overwrite: true])
    sendActivityFeeds("is connected to Hubitat")
    atomicState.timeSendPush = null
}

void initStep2() {
    addRemoveDevices()
    appCleanup()
    runIn(3, "initStep3", [overwrite: true])
}

void initStep3() {
    initWebhooks()
    poll()
}

def uninstalled() {
    if (debugLogging) { log.debug "uninstalled() called... removing app and devices" }
    unschedule()
    //Remove any existing webhooks before uninstall...
    removeAllWebhooks()
    if(addRemoveDevices(true)) {
        //Revokes endpoint token...
              //  revokeAccessToken()
        state.accessToken = null   // ported line
        
        //Revokes Rachio Auth Token
        if(atomicState?.authToken) {
          atomicState?.authToken = null
        }
    }
}

def onAppTouch(event) {
    updated()
}

def scheduler() {
    // runEvery1Minute("heartbeat")
    runEvery15Minutes("heartbeat")
    //runEvery30Minutes("heartbeat")
}

def heartbeat() {
   // log.trace "heartbeat 15 minute keep alive poll()..."
    poll()
}

void initWebhooks() {
    settings?.controllers?.each { c->
        if(c) { 
            initWebhook(c)
            if (debugLogging) { log.debug "webhooks($c): ${getWebhookIdsForDev(c)}" }
        }
    }
}

//Subscribes to the selected controllers API events that will be used to trigger a poll
def initWebhook(controlId) {
    //log.trace "initWebhook..."
    def result = false
    def webhookIds = getWebhookIdsForDev(controlId)
    def cmdType = webhookIds == null ? "put" : "put"
    def apiWebhookUrl = "${rootApiUrl()}/notification/webhook"
    def endpointUrl = "${getApiServerUrl()}/${hubUID}/apps/${app.id}/rachioReceiver?access_token=${atomicState?.accessToken}"
    def bodyData
    if(!webhookIds) { 
        bodyData = new JsonOutput().toJson([device:[id: controlId], externalId: app.name, url: endpointUrl, eventTypes: webhookEvtTypes()])
    } else { 
        bodyData = new JsonOutput().toJson([id: webhookIds[0], externalId: app.name, url: endpointUrl, eventTypes: webhookEvtTypes()])
    }
    try {
        if(webhookHttp(apiWebhookUrl, bodyData, cmdType, controlId)) {
            log.info "Successfully ${cmdType == "post" ? "Created" : "Updated"} API Webhook Subscription for Controller (${controlId})!!!"
            result = true
        }
    } catch(ex) {
        log.error "initWebhook Exception: ${ex.message} | Data sent: ${bodyData}"
    }
    return result
}

def getWebhookIdsForDev(devId) {
    if(!devId) { return null }
    def data = _httpGet("notification/${devId}/webhook")
    def res = null
    if(data) { res = data?.findAll { it?.externalId == app?.name }?.collect { it?.id } }
    if (debugLogging) { log.debug "Get webhookIdsForDevice received data: ${data}. Webhook IDs for Device ${devId} include: ${res}" }
    return res
}

void removeWebhookByDevId(devId) {
    def webhookIds = getWebhookIdsForDev(devId)
    for (webhookId in webhookIds) {
        if(webhookHttp("${rootApiUrl()}/notification/webhook/${webhookId}", "", "delete", devId)) {
            log.warn "Removed API Webhook Subscription for (${webhookId})"
        }
        else {
            log.error "Failed to remove API Webhook Subscription for (${webhookId})"
        }
    }
}

//Removes the webhook subscription for the device.
void removeAllWebhooks() {
    if (debugLogging) { log.debug "removeAllWebhooks called." }
    if(settings?.controllers) {
        settings?.controllers?.each { c->
            if(c) {
                removeWebhookByDevId(c)
            }
        }
    }
}

//Returns the available event types to subscribe to.
def webhookEvtTypes() {
    if (debugLogging) { log.debug "Updating webhook event types" }
    def typeIds = []
    def okTypes = ["DEVICE_STATUS_EVENT", "ZONE_STATUS_EVENT", "SCHEDULE_STATUS_EVENT"] 
    def data = _httpGet("notification/webhook_event_type")
    if(data) {
        typeIds = data?.findAll { it?.name in okTypes }.collect { ["id":it?.id?.toString()] }
    }
    return typeIds
}

//Handles the http requests for the webhook methods
def webhookHttp(url, jsonBody, type=null, ctrlId) {
    if (debugLogging) { log.debug "webhookHttp($url, $jsonBody, $type, $ctrlId)" }
    def returnStatus = false
    def response = null
    def cmdParams = [
        uri: url,
        requestContentType: "application/x-www-form-urlencoded; charset=utf-8",
        headers: ["Authorization": "Bearer ${atomicState?.authToken}", "Content-Type": "application/json"],
        body: jsonBody
    ]
    
    try {
        if(type == "post") {
            httpPost(cmdParams) { resp ->
                response = resp
            }
        }
        else if(type == "put") {
            httpPut(cmdParams) { resp ->
                response = resp
            }
        }
        else if(type == "delete") {
            httpDelete(cmdParams) { resp ->
                response = resp
            }
        }
        if(response) {
            if (debugLogging) { log.debug "webhook http response status: ${response?.status} | data: ${response?.data}" }
            if(response?.status in [200, 201, 204]) {
                returnStatus = true
            } else {
                //refresh the auth token
                if (response?.status == 401) {
                    if (debugLogging) { log.debug "Refreshing your authToken!" }
                    // refreshAuthToken()
                } else {
                    log.error "Authentication error, invalid authentication method, lack of credentials, etc."
                }
            }
        } else { 
            log.error "Return Status in webhook Http: ${returnStatus}"
            return returnStatus 
        }
    } catch(Exception e) {
        log.error "webhookHttp Exception Error: ${e.message}"
    }
    return returnStatus
}

def getDeviceIds() {
    return settings?.controllers ?: null
}

def getZoneIds(devId) {
    return settings?."${devId}_zones" ?: null
}

def getZoneData(userId, zoneId) {
    return _httpGet("person/${userId}/${zoneId}")
}

void updateDevZoneStates() {
    def devMap = [:]
    def userInfo = getUserInfo(atomicState?.userId)
    userInfo?.devices?.each { dev ->
        if(dev?.id in settings?.controllers) {
            devMap[dev?.id] = [:]
            devMap[dev?.id]["name"] = dev?.name
            def zoneMap = [:]
            dev?.zones?.each { zone ->
               if(zone?.id in settings?."${dev?.id}_zones") {
                    zoneMap[zone?.id] = [:]
                    zoneMap[zone?.id] = zone?.name
                }
            }
            devMap[dev?.id]["zones"] = zoneMap
        }
    }
    atomicState?.selectedDevices = devMap
}

def getDeviceInfo(devId) {
    //log.trace "getDeviceInfo..."
    return _httpGet("device/${devId}")
}

def getCurSchedule(devId) {
    //log.trace "getCurSchedule..."
    return _httpGet("device/${devId}/current_schedule")
}

def getDeviceData(devId) {
    //log.trace "getDeviceData($devId)..."
    def result = _httpGet("device_with_current_schedule/${devId}")
   // log.trace "getDeviceData: ${result}"
    return result
}

def getDeviceState(devId) {
    //log.trace "getDeviceState($devId)..."
    def result = _httpGet("device/getDeviceState/${devId}", "closed")
  //  log.trace "getDeviceState: ${result}"
    return result
}

// Gets location id for device
def getDeviceDetails(devId) {
    //log.trace "getDeviceDetails($devId)..."
    def result = _httpGet("device/getDeviceDetails/${devId}", "closed")
  //  log.trace "getDeviceDetails: ${result}"
    return result
}

def getZoneDetails(devId) {
    //log.trace "getZoneDetails($devId)..."
    def result = _httpGet("device/listZones/${devId}", "closed")
  //  log.trace "getZoneDetails: ${result}"
    return result
}

def getDevicePastEvents(devId, start_time, end_time) {
    // start_time and end_time are Date objects
    //log.trace "getDeviceEvents($devId)..."
    def result = _httpGet("device/${devId}/event?startTime=${start_time.getTime()}&endTime=${end_time.getTime()}", "open")
  //  log.trace "getDeviceEvents: ${result}"
    return result
}

def getDeviceFutureEvents(devId, end_time) {
    // end_time is a Date object
   // log.trace "getDeviceUpcomingEvents(${devId})..."
    def jsonData = new JsonBuilder("device_id":devId, "hours_ahead":GetHoursUntilDate(end_time))
    def result = sendJsonGetResponse("events/upcoming", jsonData?.toString(), "closed", "post")
   // log.trace "Upcoming Events: ${result})"
    return result
}


def getDeviceNextEvent(devId) {
    //log.trace "getDeviceNextEvent(${devId})..."
    def jsonData = new JsonBuilder("device_id":devId)
    def result = sendJsonGetResponse("events/next", jsonData?.toString(), "closed", "post")
    log.trace "Next Event: ${result})"
    return result
}

def getDeviceAlerts(devId) {
    //log.trace "getDeviceAlerts(${devId})..."
    def jsonData = new JsonBuilder("device_id":devId)
    def result = sendJsonGetResponse("device/getActiveAlerts", jsonData?.toString(), "closed", "post")
    //log.trace "Active Alerts: ${result})"
    return result
}

def getDeviceWateringSummary(devId, start_date, end_date) {
    // start_date and end_date are Date objects
    log.trace "getDeviceWateringSummary(${devId})..."
    def jsonData = new JsonBuilder("device_id":devId, "start_date":getDateMap(start_date), "end_date":getDateMap(end_date))
    def result = sendJsonGetResponse("events/getWateringSummaryByInterval", jsonData?.toString(), "closed", "put")
    log.trace "Watering Summary: ${result})"
    return result
}

def getCalendar(locId, start_time, end_time) {
    // start_date and end_date are Date objects
    //log.trace "getCalendar(${locId})..."
    def jsonData = new JsonBuilder("location_id":locId, "start_time":formatDateToUtc(start_time), "end_time":formatDateToUtc(end_time))
    def result = sendJsonGetResponse("location/getCalendarForTimeRange", jsonData?.toString(), "closed", "post")
    //log.trace "Calendar: ${result})"
    return result
}

def getWeather(locId, start_date, end_date) {
    // start_date and end_date are Date objects
    //log.trace "getWeather(${locId})..."
    def jsonData = new JsonBuilder("location_id":locId, "start_date":getDateMap(start_date), "end_date":getDateMap(end_date))
    def result = sendJsonGetResponse("location/getWeatherByLocation", jsonData?.toString(), "closed", "post")
    //log.trace "Weather: ${result})"
    return result
}

def getLocationId(devId, detailsData) {
    def controllerDetails = detailsData.get(getDevJsonTag(devId))
    if (controllerDetails) return controllerDetails.locationId   
    return null
}

def cleanupObjects(id){
    if(settings?."${id}_zones") { settingRemove("${id}_zones") }
    removeWebhookByDevId(id)
}

def isWatering() {
    def i = atomicState?.isWateringMap?.findAll { it?.value == true }
    return (i?.size() > 0)
}

def removeWateringItem(id) {
    def i = atomicState?.isWateringMap ?: [:]
    if(id && i[id] != null) { i?.remove(id) }
    atomicState?.isWateringMap = i
}

def removeStandbyItem(id) {
    def i = atomicState?.inStandbyModeMap ?: [:]
    if(id && i[id] != null) { i?.remove(id) }
    atomicState?.inStandbyModeMap = i
}

def updateWateringItem(id, val) {
    def i = atomicState?.isWateringMap ?: [:]
    if(id && i != null) { i[id] = val }
    atomicState?.isWateringMap = i
}

def updateStandbyItem(String id, Boolean val) {
    def i = atomicState?.inStandbyModeMap ?: [:]
    if(id && i != null) { i[id] = val }
    atomicState?.inStandbyModeMap = i
}

def setDashboard(deviceId) {
    if (!state.refreshNum) state.refreshNum = 0
    state.refreshNum++
    def cloudUri = getFullApiServerUrl() + "/rachioDashboard/${deviceId}?access_token=${state.accessToken}&refreshNum=${refreshNum}"  // refreshNum forces the browser to retrieve the image instead of caching it
        
    String dashboard = '<style type=\'text/css\'>'
	dashboard += '.centerImage'
	dashboard += '{text-align:center;display:inline;height:50%;}'
	dashboard += '</style>'
	dashboard += '<table align="center" style="width:100%">'
	dashboard += '<tr>'
    dashboard += '<td><img src="' + cloudUri + '"/></td>'
    dashboard += '</tr>'
    dashboard += '</table>'

    d = getChildDevice(deviceId)
    d.sendEvent(name: 'dashboard', value: dashboard, displayed: true)   
}

def addRemoveDevices(uninst=false) {
    //log.trace "addRemoveDevices($uninst)..."
    try {
        def delete = []
        if(uninst == false) {
            def devsInUse = []
            def selectedDevices = atomicState?.selectedDevices
            selectedDevices?.each { contDev ->
                //Check if the discovered sprinklers are already initiated with corresponding device types.
                def d = getChildDevice(contDev?.key)
                if(!d) {
                    d = addChildDevice("lnjustin", getChildContName(), contDev?.key, null, [label: getDeviceLabelStr(contDev?.value?.name), completedSetup: true])
                    def localUri = getFullLocalApiServerUrl() + "/rachioDashboard/${contDev?.key}?access_token=${state.accessToken}"
                    String dashboard = '<style type=\'text/css\'>'
		            dashboard += '.centerImage'
		            dashboard += '{text-align:center;display:inline;width:100%;}'
		            dashboard += '</style>'
		            dashboard += '<table align="center" style="width:100%">'
		            dashboard += '<tr>'
                    dashboard += '<td width="100%"><img width="100%" src="' + localUri + '"/></td>'
                    dashboard += '</tr>'
                    dashboard += '</table>'
                    d.sendEvent(name: 'dashboard', value: dashboard, displayed: true, isStateChange: true)
                 //   d.completedSetup = true
                    log.info "Controller Device Created: (${d?.displayName}) with id: [${contDev?.key}]"
                } else {
                    if (debugLogging) { log.debug "found ${d?.displayName} with dni: ${dni?.key} already exists" }
                }
                devsInUse += contDev.key
                contDev?.value?.zones?.each { zoneDni ->
                    //Check if the discovered sprinklers are already initiated with corresponding device types.
                    def d2 = getChildDevice(zoneDni?.key)
                    if(!d2) {
                        d2 = addChildDevice("lnjustin", getChildZoneName(), zoneDni?.key, null, [label: getDeviceLabelStr(zoneDni?.value), completedSetup: true])
                      //  d2.completedSetup = true
                        log.info "Zone Device Created: (${d2?.displayName}) with id: [${zoneDni?.key}]"
                    } else {
                        if (debugLogging) { log.debug "found ${d2?.displayName} with dni: ${zoneDni?.key} already exists" }
                    }
                    devsInUse += zoneDni?.key
                }
            }
            if (debugLogging) { log.debug "devicesInUse: ${devsInUse}" }
            delete = app.getChildDevices().findAll { !(it?.deviceNetworkId in devsInUse) }
        } else {
            atomicState?.selectedDevices = []
            delete = app.getChildDevices()
        }
        if(delete?.size() > 0) {
            log.warn "Device Delete: ${delete} | Removing (${delete?.size()}) Devices..."
            delete?.each {
                cleanupObjects(it?.deviceNetworkId)
                deleteChildDevice(it?.deviceNetworkId)
                log.warn "Deleted the Device: ${it?.displayName}"
            }
        }
        return true
    } catch (ex) {
        if(ex instanceof hubitat.exception.ConflictException) {
            def msg = "Error: Can't Delete App because Devices are still in use in other Apps, Routines, or Rules.  Please double check before trying again."
            log.warn "addRemoveDevices Exception | $msg"
        }
   /*     else if(ex instanceof hubitat.app.exception.UnknownDeviceTypeException) {
            def msg = "Error: Device Handlers are likely Missing or Not Published.  Please verify all device handlers are present before continuing."
            log.warn "addRemoveDevices Exception | $msg"
        }
   */     else { log.error "addRemoveDevices Exception: ${ex}" }
        return false
    }
}

def getDeviceLabelStr(name) {
    return "Rachio - ${name}"
}

def getTimeSinceInSeconds(time) {
    if(!time) { return 10000 }
    return (int) (now() - time)/1000
}

// This is the endpoint the webhook sends the events to...
def rachioReceiveHandler() {
    def reqData = request.JSON
    if(reqData?.size() || reqData == [:]) {
        // log.trace "eventDatas: ${reqData?.summary}"
       // log.trace "Rachio Device Event | Summary: (${reqData?.summary}) | Requesting Latest Data from API | DeviceID: ${reqData?.deviceId}"
        if(reqData?.deviceId) {
            def dev = getChildDevice(reqData?.deviceId)
            poll(dev, "api")
        } else { poll() }
    }
}


//Section4: polling device info methods
void poll(child=null, type=null) {
    def lastPollSec = getTimeSinceInSeconds(atomicState?.lastPollDt)
    if(child && !type) { type = "device" }
    log.info "${app.label} -- Polling API for Latest Data -- Last Update was ($lastPollSec seconds ago)${type ? " | Reason: [$type]" : ""}"
    if(lastPollSec < 2) {
        runIn(3, "poll", [overwrite: true])
        //log.warn "Delaying poll... It's too soon to request new data"
        return
    }
    def selectedDevices = atomicState?.selectedDevices
    def ctrlCnt = 0
    def zoneCnt = 0
    selectedDevices?.each { cont->
        def devData = getDeviceData(cont?.key)
        if (debugLogging) { log.debug "devData for device ID ${cont?.key} is ${devData}" }
        def devDetails = getDeviceDetails(cont?.key)
        if (debugLogging) { log.debug "devDetails for device ID${cont?.key} is ${devDetails}" }
        def devState = getDeviceState(cont?.key)
        def devZoneDetails = getZoneDetails(cont?.key)
        def devNextEvent = getDeviceNextEvent(cont?.key)
        def devMonthlyWateringSummary = getDeviceWateringSummary(cont?.key, getMonthStart(), getMonthEnd()) 
        
        def cDev = getChildDevice(cont?.key)
        if(cDev) {
            ctrlCnt = ctrlCnt+1
            pollChild(cDev, devData, devDetails, devState, devZoneDetails, devMonthlyWateringSummary, devNextEvent)
            cont?.value?.zones?.each { zone->
                zoneCnt = zoneCnt+1
                def zDev = getChildDevice(zone?.key)
               // def zoneWateringJournal = getDashboardWateringJournalData(zone?.key)
                if(zDev) { pollChild(zDev, devData, devDetails, devState, devZoneDetails, devMonthlyWateringSummary, devNextEvent) }
            }
        }
    }
    log.info "Updating (${ctrlCnt}) Controllers and (${zoneCnt}) Zone devices..."
    atomicState?.lastPollDt = now()
}

def pollChild(child, devData, devDetails, devState, devZoneDetails, devMonthlyWateringSummary, devNextEvent) {
    if (pollChildren(child, devData, devDetails, devState, devZoneDetails, devMonthlyWateringSummary, devNextEvent)){
        //generate event for each (child) device type identified by different dni
    }
}

def pollChildren(childDev, devData, devDetails, devState, devZoneDetails, devMonthlyWateringSummary, devNextEvent) {
    if (debugLogging) { log.debug "updating child device ${childDev} with device data ${devData}" }
    try {
        if(childDev && devData) {
            String dni = childDev?.device?.deviceNetworkId
            String devLabel = childDev?.label
            def schedData = devData.currentSchedule
            def devStatus = devData
            
            def rainDelay = getCurrentRainDelay(devStatus)
            
            def status = devStatus?.status
            def onlStatus = status?.toString()?.toLowerCase() == "online" ? "online" : "offline"
            if(!childDev?.getDataValue("HealthEnrolled")) { childDev.updated() }
            Boolean pauseInStandby = settings?.pauseInStandby == false ? false : true
            Boolean inStandby = devData?.on.toString() != "true" ? true : false
            Boolean schedRunning = (schedData?.status == "PROCESSING") ? true : false
            def data = []
            Map selectedDevices = atomicState?.selectedDevices ?: [:]
            selectedDevices?.each { contDev ->
                if(dni == contDev?.key) {
                    updateStandbyItem(dni, inStandby)
                    // log.debug "schedRunning: ${schedRunning} | isWatering: ${isWatering()}"
                    
                    def controllerWebhookIDs = getWebhookIdsForDev(contDev?.key)
                    if (debugLogging) { log.debug "Webhook IDs for controller ${contDev?.key} include: ${controllerWebhookIDs}" }
                    if (isWatering() && !schedRunning) {
                        handleWateringSched(dni, false)
                    }
                    def newLabel = getDeviceLabelStr(devData?.name).toString()
                    if(devLabel != newLabel) {
                        childDev?.label = newLabel
                        log.info "Controller Label has changed from (${devLabel}) to [${newLabel}]"
                    }

                    data = [data: devData, schedData: schedData, rainDelay: rainDelay, status: status, standby: inStandby, pauseInStandby: pauseInStandby, stateData: devState, detailsData: devDetails, wateringSummaryData: devMonthlyWateringSummary, nextEvent: devNextEvent]
                } else {
                    contDev?.value?.zones?.each { zone ->
                        if (dni == zone?.key) {
                            def zoneData = findZoneData(zone?.key, devData)
                            def zoneState = findZoneState(zone?.key, devZoneDetails)
                            def newLabel = getDeviceLabelStr(zone?.value).toString()
                            if(devLabel != newLabel) {
                                childDev?.label = newLabel
                                log.info "Zone Label has changed from (${devLabel}) to [${newLabel}]"
                            }
                            data = [data: zoneData, schedData: schedData, devId: contDev?.key, status: status, standby: inStandby, pauseInStandby: pauseInStandby, stateData: zoneState]
                        }
                    }
                }
            }
            if (childDev && data != []) {
                childDev?.generateEvent(data)
                childDev?.sendEvent(name: "DeviceWatch-DeviceStatus", value: onlStatus, displayed: false)
            }
        } else { log.warn "pollChildren cannot update children because it is missing the required parameters..." }
        
    } catch (e) {
        log.error "exception polling children: ${e}"
    }
    return result
}

void setWateringDeviceState(devId, val) {
    // log.trace "setWateringDeviceState($devId, $val)"
    updateWateringItem(devId, val)
}

void handleWateringSched(devId, val=false) {
    // log.trace "handleWateringSched($devId, $val)"
    if(val == true) {
        log.trace "Watering is Active... Scheduling poll for every 1 minute"
        runEvery1Minute("poll")
    } else {
        log.trace "Watering has finished... 1 minute Poll has been unscheduled"
        unschedule("poll")
        runIn(60, "poll") // This is here just to make sure that the schedule actually stopped and that the data is really current.
    }
    updateWateringItem(devId, val)
}

def findZoneData(devId, devData) {
    if(!devId || !devData) { return null }
    if(devData?.zones) { return devData?.zones.find { it?.id == devId } }
    return null
}

def findZoneState(zoneId, zoneDetails) {
    if(!zoneId || !zoneDetails) { return null }
    if(zoneDetails?.zoneSummary) {
        def zone = zoneDetails?.zoneSummary.find { it?.zoneDetail.id == zoneId } 
        if (zone) {
            if (zone.zoneState != null) {
                zoneState = zone.zoneState
               // log.trace("Found Zone State: ${zoneState}")
                return zoneState
            }
        }
    }
    return null
}

def setValue(child, deviceId, newValue) {
    def jsonRequestBody = '{"value":'+ newValue+'}'
    def result = sendJson(child, jsonRequestBody, deviceId)
    return result
}

def sendJson(subUri, jsonBody, deviceId, standbyCmd=false, endpoint="open") {
    //log.trace "Sending: ${jsonBody}"
    def returnStatus = false
    
    def baseURI = (endpoint == "open") ? "${apiEndpoint}/1/public" : getClosedApiEndpoint()
    def cmdParams = [
        uri: "${baseURI}/${subUri}",
        requestContentType: "application/x-www-form-urlencoded; charset=utf-8",
        headers: ["Authorization": "Bearer ${atomicState?.authToken}", "Content-Type": "application/json"],
        body: jsonBody
    ]

    try{
        if(!standbyCmd && settings?.pauseInStandby == true && deviceId && atomicState?.inStandbyModeMap[deviceId] == true) {
            if (debugLogging) { log.debug "Skipping this command while controller is in 'Standby Mode'..." }
            return true
        }

        httpPut(cmdParams) { resp ->
            returnStatus = resp
            if(resp.status == 201 || resp.status == 204) {
                returnStatus = true
                //runIn(4, "poll", [overwrite: true])
            } else {
                //refresh the auth token
                if (resp.status == 401) {
                    if (debugLogging) { log.debug "Refreshing your authToken!" }
                    // refreshAuthToken()
                } else {
                    log.error "Authentication error, invalid authentication method, lack of credentials, etc."
                }
            }

        }
    } catch(Exception e) {
        log.error "sendJson Exception Error: ${e}"
    }
    return returnStatus
}

def sendJsonGetResponse(subUri, jsonBody, endpoint="open", type=null) {
   // log.trace "Send JSON With Response: ${jsonBody}"
    def returnStatus = false
    def returnData = null
    def response = null
    def baseURI = (endpoint == "open") ? "${apiEndpoint}/1/public" : getClosedApiEndpoint()
    def cmdParams = [
        uri: "${baseURI}/${subUri}",
        requestContentType: "application/x-www-form-urlencoded; charset=utf-8",
        headers: ["Authorization": "Bearer ${atomicState?.authToken}", "Content-Type": "application/json"],
        body: jsonBody
    ]

    try{

        if(type == "post") {
            httpPost(cmdParams) { resp ->
                response = resp
            }
        }
        else if(type == "put") {
            httpPut(cmdParams) { resp ->
                response = resp
            }
        }
        if(response) {
            returnData = response?.data
            if(response?.status in [200, 201, 204]) {
                returnStatus = true
                //runIn(4, "poll", [overwrite: true])
            } else {
                //refresh the auth token
                if (response?.status == 401) {
                    if (debugLogging) { log.debug "Refreshing your authToken!" }
                    // refreshAuthToken()
                } else {
                    log.error "Response status: ${response?.status} - Authentication error, invalid authentication method, lack of credentials, etc."
                }
            }

        } else { return returnStatus }
    } catch(Exception e) {
        log.error "sendJson Exception Error: ${e}"
    }
    return returnData
}

//Section6: helper methods ---------------------------------------------------------------------------------------------

def toJson(Map m) {
    return new groovy.json.JsonBuilder(m).toString()
}

def toQueryString(Map m) {
    return m.collect { k, v -> "${k}=${URLEncoder.encode(v.toString())}" }.sort().join("&")
}

def epochToDt(val) {
    return formatDt(new Date(val))
}

def formatDt(dt) {
    def tf = new SimpleDateFormat("MMM d, yyyy - h:mm:ss a")
    if(location?.timeZone) { tf?.setTimeZone(location?.timeZone) }
    else {
        log.warn "Hubitat TimeZone is not found or is not set... Please Try to open your Hubitat location and Press Save..."
        return null
    }
    return tf.format(dt)
}

def getDurationDesc(long secondsCnt) {
    int seconds = secondsCnt %60
    secondsCnt -= seconds
    long minutesCnt = secondsCnt / 60
    long minutes = minutesCnt % 60
    minutesCnt -= minutes
    long hoursCnt = minutesCnt / 60

    return "${minutes} min ${(seconds >= 0 && seconds < 10) ? "0${seconds}" : "${seconds}"} sec"
}

//Returns time differences is seconds
def GetTimeValDiff(timeVal) {
    try {
        def start = new Date(timeVal).getTime()
        def now = new Date().getTime()
        def diff = (int) (long) (now - start) / 1000
        //log.debug "diff: $diff"
        return diff
    } catch (ex) {
        log.error "GetTimeValDiff Exception: ${ex}"
        return 1000
    }
}

//Returns time differences is hours
def GetHoursUntilDate(futureDate) {
    // futureDate is a Date object
    try {
        def currentTime = new Date()
        def difference = futureDate.getTime() - currentTime.getTime()
        return Math.round(difference/3600000)
    } catch (ex) {
        log.error "GetTimeValDiffHours Exception: ${ex}"
        return 1000
    }
}

def formatDateToUtc(date) {
    def outFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'")
    outFormat.setTimeZone(TimeZone.getTimeZone("UTC"))
  //  if(location?.timeZone) { outFormat.setTimeZone(location?.timeZone) }
       
    def formattedDate = outFormat.format(date)
   // log.trace "formatted date = ${formattedDate}"
	return formattedDate
}

def getDateObjectFromUTCDt(utcDt) {
    return Date.parse("yyyy-MM-dd'T'HH:mm:ss'Z'", utcDt)
}

def getDateMap(date) {
    return [year: date[Calendar.YEAR], month: date[Calendar.MONTH]+1, day: date[Calendar.DATE]]
}

def getMonthStart() {
    def today = new Date()
    def monthStart = today.copyWith(date: 1, hourOfDay: 0, minute: 0, second: 0)
    return monthStart
}

def getMonthEnd() {
    def date = getMonthStart()
    Calendar calendar = GregorianCalendar.instance
    calendar.set(date[Calendar.YEAR], date[Calendar.MONTH], date[Calendar.DATE])
    def lastDayOfMonth = calendar.getActualMaximum(GregorianCalendar.DAY_OF_MONTH)
    def monthEnd = date.copyWith(date: lastDayOfMonth, hourOfDay: 23, minute: 59, second: 59)
    log.trace "last day of month: ${monthEnd}"
    return monthEnd
}

def getChildContName()	{ return "Rachio Controller" }
def getChildZoneName()	{ return "Rachio Zone" }
// def getServerUrl()		{ return "https://graph.api.smartthings.com" }    // commented out in port - doesn't seem to be needed?
def getShardUrl()		{ return getApiServerUrl() }
def getAppEndpoint()	{ return "https://app.rach.io" }
def getApiEndpoint()	{ return "https://api.rach.io" }
def getClosedApiEndpoint()	{ return "https://cloud-rest.rach.io" }
def getSupportUrl() 	{ return "http://support.rachio.com/" }
def getCommunityUrl() 	{ return "http://community.rachio.com/" }
def rootApiUrl() { return "https://api.rach.io/1/public" }

def debugEventFromParent(child, message) {
    child.sendEvent("name":"debugEventFromParent", "value":message, "description":message, displayed: true, isStateChange: true)
}

//send both push notification and mobile activity feeds
def sendPushAndFeeds(notificationMessage){
    if (atomicState.timeSendPush){
        if (now() - atomicState.timeSendPush > 86400000){
            sendPush("Rachio " + notificationMessage)
            sendActivityFeeds(notificationMessage)
            atomicState.timeSendPush = now()
        }
    } else {
        sendPush("Rachio " + notificationMessage)
        sendActivityFeeds(notificationMessage)
        atomicState.timeSendPush = now()
    }
    atomicState.authToken = null
}

def sendActivityFeeds(notificationMessage) {
   // def devices = app.getChildDevices(true)
    def devices = app.getChildDevices()
    devices.each { child ->
           //update(child)
        child.generateActivityFeedsEvent(notificationMessage)
    }
}

def standbyOn(child, deviceId) {
    if (debugLogging) { log.debug "standbyOn() command received from ${child?.device?.displayName}" }
    if(deviceId) {
        def jsonData = new JsonBuilder("id":deviceId)
        def res = sendJson("device/off", jsonData.toString(), deviceId, true)
        // poll()
        // child?.log("${child?.device.displayName} Standby OFF (Result: $res)")
        return res
    }
}

def standbyOff(child, deviceId) {
    if (debugLogging) { log.debug "standbyOff() command received from ${child?.device?.displayName}" }
    if(deviceId) {
        def jsonData = new JsonBuilder("id":deviceId)
        def res = sendJson("device/on", jsonData.toString(), deviceId, true)
        // // poll()
        // child?.log("${child?.device.displayName} Standby OFF (Result: $res)")
        return res
    }
}

def on(child, deviceId) {
    //log.trace "App on()..."
}

def off(child, deviceId) {
    //log.trace "Received off() command from (${child?.device?.displayName})..."
    // child?.log("Stop Watering - Received from (${child?.device.displayName})")
    if(deviceId) {
        def jsonData = new JsonBuilder("id":deviceId)
        def res = sendJson("device/stop_water", jsonData.toString(), deviceId)
        // poll()
        return res
    }
    return false
}

def setRainDelay(child, deviceId, delayVal) {
    if (delayVal) {
        def secondsPerDay = 24*60*60;
        def duration = delayVal * secondsPerDay;
        def jsonData = new JsonBuilder("id":child?.device?.deviceNetworkId, "duration":duration)
        def res = sendJson("device/rain_delay", jsonData?.toString(), deviceId)

        if (res) { child?.sendEvent(name: 'rainDelay', value: delayVal) }
        return res
    }
    return false
}

def isWatering(devId) {
    //log.debug "isWatering()..."
    def res = _httpGet("device/${devId}/current_schedule");
    def result = (res && res?.status) ? true : false
    return result
}

def getDeviceStatus(devId) {
    return _httpGet("device/${devId}")
}

def getControlLblById(id) {
    def dev = getChildDevice(id)
    return dev ? dev?.displayName : null
}

def getCurrentRainDelay(res) {
    if (debugLogging) { log.debug "getCurrentRainDelay with input ${res}" }
    // convert to configured rain delay to days.
    def ret =  (res?.rainDelayExpirationDate && res?.rainDelayStartDate) ? (res?.rainDelayExpirationDate - res?.rainDelayStartDate)/(26*60*60*1000) : 0
    def value = (long) Math.floor(ret + 0.5d)
    return value
}

def startZone(child, deviceId, zoneNum, mins) {
    def res = false
    def ctrlLbl = getControlLblById(deviceId)
    log.trace "Starting to Water on ${ctrlLbl ? "$ctrlLbl: " : ""}(ZoneName: ${child?.device.displayName} | ZoneNumber: ${zoneNum} | RunDuration: ${mins})"
    //child?.log("Starting to water on (ZoneName: ${child?.device.displayName} | ZoneNumber: ${zoneNum} | RunDuration: ${mins})...")
    def zoneId = child?.device?.deviceNetworkId
    if (zoneId && zoneNum && mins) {
        def duration = mins.toInteger() * 60
        def jsonData = new JsonBuilder("id":zoneId, "duration":duration)
        //log.debug "startZone jsonData: ${jsonData}"
        res = sendJson("zone/start", jsonData?.toString(), deviceId)
    } else { log.error "startZone Missing ZoneId or duration... ${zoneId} | ${mins}" }
    return res
}

def runAllZones(child, deviceId, mins) {
    def res = false
    //log.trace "runAllZones(ZoneName: ${child?.device?.displayName}, Duration: ${mins})..."
    //child?.log("runAllZones(ZoneName: ${child?.device?.displayName} | Duration: ${mins})")
    def selectedDevices = atomicState?.selectedDevices ?: [:]
    if (deviceId && selectedDevices[deviceId] && selectedDevices[deviceId]?.zones && mins) {
        def zoneData = []
        def sortNum = 1
        def duration = mins.toInteger() * 60
        selectedDevices[deviceId]?.zones?.each { z ->
            zoneData << ["id":z?.key, "duration":duration, "sortOrder": sortNum]
            sortNum = sortNum+1
        }
        def jsonData = new JsonBuilder("zones":zoneData)
        //child?.log("runAllZones  jsonData: ${jsonData}")
        res = sendJson("zone/start_multiple", jsonData?.toString(), deviceId)
    } else { log.error "runAllZones Missing ZoneIds or Duration... ${selectedDevices[deviceId]?.zones} | ${mins}" }
    return res
}

// TO DO: update this method with the latest API that includes pause zone
def pauseScheduleRun(child) {
    //log.trace "pauseScheduleRun..."
    def schedData = getCurSchedule(atomicState?.deviceId)
    def schedRuleData = getScheduleRuleInfo(schedData?.scheduleRuleId)
    child?.log "schedRuleData: $schedRuleData"
    child?.log "Schedule Started on: ${epochToDt(schedRuleData?.startDate)} | Total Duration: ${getDurationDesc(schedRuleData?.totalDuration.toLong())}"

    if(schedRuleData) {
        def zones = schedRuleData?.zones?.sort { a , b -> a.sortOrder <=> b.sortOrder }
        zones?.each { zn ->
            child?.log "Zone#: ${zn?.zoneNumber} | Zone Duration: ${getDurationDesc(zn?.duration.toLong())} | Order#: ${zn?.sortOrder}"
            if(zn?.zoneId == schedData?.zoneId) {
                def zoneRunTime = "Elapsed Runtime: ${getDurationDesc(GetTimeValDiff(schedData?.zoneStartDate.toLong()))}"
                child?.log "Zone Started: ${epochToDt(schedData?.zoneStartDate)} | ${zoneRunTime} | Cycle Count: ${schedData?.cycleCount} | Cycling: ${schedData?.cycling}"
            }
        }
    }
}

def pauseZoneRun(child, devId, duration) {
    def jsonData = new JsonBuilder("id":devId, "duration":duration)
    def result = sendJson("device/pause_zone_run", jsonData?.toString(), devId)
    return result
}

def resumeZoneRun(child, devId) {
    def jsonData = new JsonBuilder("id":devId)
    def result = sendJson("device/resume_zone_run", jsonData?.toString(), devId)
    return result
}

//Required by child devices
def getZones(device) {
   // log.trace "getZones(${device.label})..."
    def res = _httpGet("device/${device?.deviceNetworkId}")
    return !res ? null : res?.zones
}

def getScheduleRuleInfo(schedId) {
    def res = _httpGet("schedulerule/${schedId}")
    return res
}

// Dashboard

def getDashboardStartDate() {
    def today = new Date()
    today.set(hourOfDay: 0, minute: 0, second: 0)
    def numPastDaysDashboardSetting = (numPastDaysDashboard == null) ? numPastDaysDashboardDefault : numPastDaysDashboard
    def intDays = (int) numPastDaysDashboardSetting
    return today-intDays
}

def getDashboardEndDate() {
    def today = new Date()
    today.set(hourOfDay: 23, minute: 59, second: 59)
    def numFutureDaysDashboardSetting = (numFutureDaysDashboard == null) ? numFutureDaysDashboardDefault : numFutureDaysDashboard
    def intDays = (int) numFutureDaysDashboardSetting
    return today+intDays
}


def buildDashboard() {
    
    def numPastDaysDashboardSetting = (numPastDaysDashboard == null) ? numPastDaysDashboardDefault : numPastDaysDashboard
    def numFutureDaysDashboardSetting = (numFutureDaysDashboard == null) ? numFutureDaysDashboardDefault : numFutureDaysDashboard
    def showPrecipPercentSetting = (showPrecipPercent == null) ? showPrecipPercentDefault : showPrecipPercent
    def showPrecipAmountSetting = (showPrecipAmount == null) ? showPrecipAmountDefault : showPrecipAmount
    def showTempSetting = (showTemp == null) ? showTempDefault : showTemp
    def colorSchemeSelectionSetting = (colorSchemeSelection == null) ? colorSchemeSelectionDefault : colorSchemeSelection
    def fontWeightSetting = (fontWeight == null) ? fontWeightDefault : fontWeight
  //  def globalScaleSetting = (globalScale == null) ? globalScaleDefault : globalScale
 //   def extraVerticalSpaceSetting = (extraVerticalSpace == null) ? extraVerticalSpaceDefault : extraVerticalSpace
//    def extraHorizontalSpaceSetting = (extraHorizontalSpace == null) ? extraHorizontalSpaceDefault : extraHorizontalSpace
    def extraVerticalSpaceSetting = 0
    def extraHorizontalSpaceSetting = 0
   
    def devId = params.controllerID
    def startDate = getDashboardStartDate()
    def endDate = getDashboardEndDate()
    
    def detailsData = getDeviceDetails(devId)
    def locationId = getLocationId(devId, detailsData)
    
    def rainSensorState = getDeviceState(devId)?.state?.rainSensorTripped
    
    def jsonSlurper = new JsonSlurper()
    def weatherData = getWeather(locationId, startDate, endDate).weatherReadings
    def pastEventsData = getDevicePastEvents(devId, startDate, endDate)
    def futureEventsData = getDeviceFutureEvents(devId, endDate).entries
    
    colorScheme = getColorScheme(colorSchemeSelectionSetting)
    
    Integer columnWidth = 64 + extraHorizontalSpaceSetting
    Integer numDays = 1 + numPastDaysDashboardSetting + numFutureDaysDashboardSetting
    Integer svgWidth = columnWidth * numDays
    if (debugLogging) { log.debug("Column Width = ${columnWidth}. numDays = ${numDays}. svgWidth = ${svgWidth}") }
    svg = '<svg version="1.1" id="weather" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="100%" viewBox="0 0 ' + Integer.toString(svgWidth) + ' 140"  xml:space="preserve">'
    
    svg += '<style type="text/css"> .cloud{fill:' + colorScheme.cloudColor + ';} .light{fill:' + colorScheme.lightColor + ';} .precip{fill:' + colorScheme.precipColor + ';} .frozenPrecip{fill:' + colorScheme.frozenPrecipColor + ';} .rainDropWatering{fill:' + colorScheme.rainDropWateringColor + ';stroke:' + colorScheme.strokeColor + ';} .rainDropAccent{fill:' + colorScheme.rainDropAccentColor + ';} .rainDropSkip{fill:' + colorScheme.rainDropSkipColor + ';stroke:' + colorScheme.strokeColor + ';} .skipStrikethrough{fill:none;stroke:' + colorScheme.skipStrikethroughColor + ';stroke-width:3;stroke-miterlimit:10;} .saturatedSoil{fill:' + colorScheme.saturatedSoilColor + ';stroke:' + colorScheme.strokeColor + ';} .rainDropsPredicted{fill:' + colorScheme.rainDropsPredictedColor + ';stroke:' + colorScheme.strokeColor + ';} .freezeSkip0{fill:' + colorScheme.freezeSkip0Color + ';stroke:' + colorScheme.strokeColor + ';} .freezeSkip1{fill:' + colorScheme.freezeSkip1Color + ';stroke:' + colorScheme.strokeColor + ';} .windSkip{fill:' + colorScheme.windSkipColor + ';stroke:' + colorScheme.strokeColor + ';} .dayText{fill:' + colorScheme.dayTextColor + ';} .rainSensorSkip{fill:' + colorScheme.rainSensorSkipColor + ';stroke:' + colorScheme.strokeColor + ';} .precipText{fill:' + colorScheme.precipTextColor + '; word-spacing:110%;} .tempText{fill:url(#bicolored); word-spacing:100%;} .largeFontClass {font-family: "Oswald", sans-serif; text-transform: uppercase; font-size:12px;} .smallFontClass {font-family:"Oswald", sans-serif;font-size:10px;} .fontWeightClass {font-weight:' + fontWeightSetting + ';} </style> <defs> <linearGradient id="bicolored"> <stop offset="50%" stop-color="' + colorScheme.highTempTextColor + '"/> <stop offset="50%" stop-color="' + colorScheme.lowTempTextColor + '"/> </linearGradient> </defs>'
    
//    svg += '<g transform="scale(' + Double.toString((globalScaleSetting-40)/100) + ')">'
     svg += '<g>'
    
    def today = new Date()
    today.set(hourOfDay: 0, minute: 0, second: 0)
    def yesterday = today.copyWith(hourOfDay: 23, minute: 59, second: 59)
    yesterday -= 1
    def todayDateMap = getDateMap(today)
    def sevenDaysLater = today.copyWith(hourOfDay: 23, minute: 59, second: 59)
    sevenDaysLater += 6
    
    def iconPack = getIconPreference()
    def voffset = iconPack == "Outline" ? '3' : '0'
    
    def i = 0
    for (date in startDate..endDate) {
        
        def dateMap = getDateMap(date)
       
        def dayLabel = ""
        if (dateMap == todayDateMap) { dayLabel = "Today" }
        else if (date.after(today) && date.before(sevenDaysLater)) { dayLabel = date.format('EEE') }
        else { dayLabel = date.format('M/d') }

        def weather = weatherData?.find { it?.date == dateMap }
        if (debugLogging) { log.debug "Weather is: ${weather}" }
        def precipPercent = (weather.precipProbability > 0) ? ((int) (weather.precipProbability * 100)).toString() + "%" : ""
        def precipAmount = (weather.calculatedPrecip > 0) ? weather.calculatedPrecip + "\"" : ""
        def highTemp = weather.temperatureMax
        def lowTemp = weather.temperatureMin
        def weatherIconText = weather.weatherType
        def weatherIcon = null
        
        if (debugLogging) { log.debug "Weather icon text for ${dayLabel} is ${weatherIconText}" }
        
        weatherIcon = getWeatherIcon(weatherIconText)

        def pastEvents = pastEventsData?.findAll { getDateMap(new Date(it?.eventDate)) == dateMap }
        if (debugLogging) { log.debug "Past Events are: ${pastEvents}" }
        def futureEvents = futureEventsData?.findAll { getDateMap(getDateObjectFromUTCDt(it?.timestamp)) == dateMap }
        if (debugLogging) { log.debug "Future Events are: ${futureEvents}" }
        
        def irrigationIcon = getIrrigationIcon(pastEvents, futureEvents, rainSensorState)
        
        // Build SVG Body      
        Integer halfColumnWidth = columnWidth / 2
        columnCenter = Integer.toString(halfColumnWidth*(i+1))
        
        svg += '<g transform="translate(' + Integer.toString(columnWidth*i) + ', 10)">'
        svg += '<text x="' + Integer.toString(halfColumnWidth) + '" y="1.5" text-anchor="middle" class="dayText largeFontClass fontWeightClass">' + dayLabel + '</text>'
        
        svg += '<g transform="translate(' + Double.toString(extraHorizontalSpaceSetting/2) + ', ' + voffset + ')">'
        svg += weatherIcon
        svg += '</g>'
        
        if (showPrecipPercentSetting && date.after(yesterday)) {  // only show % for dates that are on or after today
            popBaseY = 71
            svg += '<text x="' + Integer.toString(halfColumnWidth) + '" y="' + Long.toString((popBaseY+extraVerticalSpaceSetting)) + '" text-anchor="middle" class="precipText smallFontClass fontWeightClass">' + precipPercent + '</text>'
        }
        if (showPrecipAmountSetting) {
            precipAmountBaseY = showPrecipPercentSetting ? 81 : 71
            precipAmountExtraVerticalSpacing = showPrecipPercentSetting ? extraVerticalSpaceSetting*2 : extraVerticalSpaceSetting
            svg += '<text x="' + Integer.toString(halfColumnWidth) + '" y="' + Long.toString((precipAmountBaseY + precipAmountExtraVerticalSpacing)) + '" text-anchor="middle" class="precipText smallFontClass fontWeightClass">' + precipAmount + '</text>'
        }
        
        if (showTempSetting) {
            tempBaseY = 74
            tempExtraVerticalSpacing = extraVerticalSpaceSetting
            if (showPrecipPercentSetting && showPrecipAmountSetting) {
                tempBaseY = 93 
                tempExtraVerticalSpacing = extraVerticalSpaceSetting*3
            }
            else if (showPrecipPercentSetting || showPrecipAmountSetting) {
                tempBaseY = 84 
                tempExtraVerticalSpacing = extraVerticalSpaceSetting*2
            }
            svg += '<text x="' + Integer.toString(halfColumnWidth) + '" y="' + Long.toString((tempBaseY+tempExtraVerticalSpacing)) + '" text-anchor="middle" class="tempText largeFontClass fontWeightClass">' + highTemp + ' | ' + lowTemp + '</text>'
        }
        
        irrigationBaseY = 65
        irrigationExtraVerticalSpacing = extraVerticalSpaceSetting
        if (showPrecipPercentSetting && showPrecipAmountSetting && showTempSetting) {
            irrigationBaseY = 100
            irrigationExtraVerticalSpacing = extraVerticalSpaceSetting*4
        }
        else if ((showPrecipPercentSetting && showPrecipAmountSetting)) {
            irrigationBaseY = 86
            irrigationExtraVerticalSpacing = extraVerticalSpaceSetting*3
        }
        else if ((showPrecipPercentSetting && showTempSetting) || (showPrecipAmountSetting && showTempSetting)) {
            irrigationBaseY = 91
            irrigationExtraVerticalSpacing = extraVerticalSpaceSetting*3
        }
        else if (showPrecipPercentSetting || showPrecipAmountSetting) {
            irrigationBaseY = 76
            irrigationExtraVerticalSpacing = extraVerticalSpaceSetting*2
        }
        else if (showTempSetting) {
            irrigationBaseY = 80
            irrigationExtraVerticalSpacing = extraVerticalSpaceSetting*2
        }

        svg += '<g transform="translate(' + Double.toString((40 + extraHorizontalSpaceSetting)/2) + ',' + Long.toString(irrigationBaseY + irrigationExtraVerticalSpacing) + ')">'
        svg += irrigationIcon
          
        svg += '</g>'
            
        svg += '</g>'
        i += 1
    }
    svg += '</g></svg>'
    render contentType: "image/svg+xml", data: svg, status: 200
}


def getIconPreference() {
    return (settings["iconSchemeSelection"] != null) ? settings["iconSchemeSelection"] : "Filled"
}

def getWeatherIcon(weatherIconText) {
    def weatherIcon = null
    def iconPack = getIconPreference()
    if (iconPack == "Filled") {
        if (weatherIconText == 'CHANCE_FLURRIES') { weatherIcon = chanceflurries }
        else if (weatherIconText == 'CHANCE_RAIN') { weatherIcon = chancerain }
        else if (weatherIconText == 'CHANCE_SLEET') { weatherIcon = chancesleet }
        else if (weatherIconText == 'CHANCE_SNOW') { weatherIcon = chancesnow }
        else if (weatherIconText == 'CHANCE_TSTORMS') { weatherIcon = chancetstorms }
        else if (weatherIconText == 'CLEAR') { weatherIcon = clear }
        else if (weatherIconText == 'CLOUDY') { weatherIcon = cloudy }
        else if (weatherIconText == 'FLURRIES') { weatherIcon = flurries }
        else if (weatherIconText == 'FOG') { weatherIcon = fog }
        else if (weatherIconText == 'HAZY') { weatherIcon = hazy }
        else if (weatherIconText == 'MOSTLY_CLOUDY') { weatherIcon = mostlycloudy }
        else if (weatherIconText == 'MOSTLY_SUNNY') { weatherIcon = mostlysunny }
        else if (weatherIconText == 'RAIN') { weatherIcon = rain }
        else if (weatherIconText == 'SLEET') { weatherIcon = sleet }
        else if (weatherIconText == 'SNOW') { weatherIcon = snow }
        else if (weatherIconText == 'SUNNY') { weatherIcon = sunny }
        else if (weatherIconText == 'TSTORMS') { weatherIcon = tstorms }
        else if (weatherIconText == 'PARTLY_CLOUDY') { weatherIcon = partlycloudy }
        else if (weatherIconText == 'PARTLY_SUNNY') { weatherIcon = partlysunny }    
    }
    else if (iconPack == "Outline") {
        if (weatherIconText == 'CHANCE_FLURRIES') { weatherIcon = chanceflurries2 }
        else if (weatherIconText == 'CHANCE_RAIN') { weatherIcon = chancerain2 }
        else if (weatherIconText == 'CHANCE_SLEET') { weatherIcon = chancesleet2 }
        else if (weatherIconText == 'CHANCE_SNOW') { weatherIcon = chancesnow2 }
        else if (weatherIconText == 'CHANCE_TSTORMS') { weatherIcon = chancetstorms2 }
        else if (weatherIconText == 'CLEAR') { weatherIcon = clear2 }
        else if (weatherIconText == 'CLOUDY') { weatherIcon = cloudy2 }
        else if (weatherIconText == 'FLURRIES') { weatherIcon = flurries2 }
        else if (weatherIconText == 'FOG') { weatherIcon = fog2 }
        else if (weatherIconText == 'HAZY') { weatherIcon = hazy2 }
        else if (weatherIconText == 'MOSTLY_CLOUDY') { weatherIcon = mostlycloudy2 }
        else if (weatherIconText == 'MOSTLY_SUNNY') { weatherIcon = mostlysunny2 }
        else if (weatherIconText == 'RAIN') { weatherIcon = rain2 }
        else if (weatherIconText == 'SLEET') { weatherIcon = sleet2 }
        else if (weatherIconText == 'SNOW') { weatherIcon = snow2 }
        else if (weatherIconText == 'SUNNY') { weatherIcon = sunny2 }
        else if (weatherIconText == 'TSTORMS') { weatherIcon = tstorms2 }
        else if (weatherIconText == 'PARTLY_CLOUDY') { weatherIcon = partlycloudy2 }
        else if (weatherIconText == 'PARTLY_SUNNY') { weatherIcon = partlysunny2 }            
    }
    return weatherIcon
}

def getIrrigationIcon(pastEvents, futureEvents, rainSensorState) {
    def irrigationIcon = null
    
    def iconPack = getIconPreference()
    def eventsList = []
        
        if (!pastEvents.isEmpty()) {
            for (event in pastEvents) {
                def foundEvent = [:]
                switch(event.subType) {
                    // show watering icon if ANY watering is done on this date; else show skip icon
                    case "SCHEDULE_STARTED":
                        foundEvent = [eventType : "WATER", eventSubType : null, eventDescription: event.summary]
                        irrigationIcon = iconPack == "Filled" ? sprinklerWatering : sprinklerWatering2
                        break
                    case "WEATHER_INTELLIGENCE_SKIP":
                        foundEvent = [eventType : "SKIP", eventSubType : "RAIN_PREDICTED", eventDescription: event.summary]
                        if (eventsList.isEmpty()) { irrigationIcon = iconPack == "Filled" ? rainSkip : rainSkip2 }
                        break
                    case "WEATHER_INTELLIGENCE_CLIMATE_SKIP":
                        foundEvent = [eventType : "SKIP", eventSubType : "SOIL_SATURATED", eventDescription: event.summary]
                        if (eventsList.isEmpty()) { irrigationIcon = iconPack == "Filled" ? saturationSkip : saturationSkip2 }
                        break
                }
                if(!foundEvent.isEmpty()) { eventsList.add(foundEvent) }
            }
        }
        else if (!futureEvents.isEmpty()) {
            for (event in futureEvents) {
                def foundEvent = [:]
                switch(event.type) {
                    // show watering icon if ANY watering is done on this date; else show skip icon
                    case "FUTURE_FEED_SCHEDULE_EVENT":
                        foundEvent = [eventType : "WATER", eventSubType : null, eventDescription: event.summary]
                        if (rainSensorState == false) { irrigationIcon = iconPack == "Filled" ? sprinklerWatering : sprinklerWatering2 }
                        else if (rainSensorState == true) { irrigationIcon = iconPack == "Filled" ? rainSensorSkip : rainSensorSkip2 }
                        break
                    case "RAIN_FUTURE_FEED_SKIP_EVENT":
                        foundEvent = [eventType : "SKIP", eventSubType : "RAIN_PREDICTED", eventDescription: event.summary]
                        if (eventsList.isEmpty()) { irrigationIcon = iconPack == "Filled" ? rainSkip : rainSkip2 }
                        break
                    case "WIND_FUTURE_FEED_SKIP_EVENT":
                        foundEvent = [eventType : "SKIP", eventSubType : "WIND_PREDICTED", eventDescription: event.summary]
                        if (eventsList.isEmpty()) { irrigationIcon = iconPack == "Filled" ? windSkip : windSkip2 }
                        break
                    case "FREEZE_FUTURE_FEED_SKIP_EVENT":
                        foundEvent = [eventType : "SKIP", eventSubType : "FREEZE_PREDICTED", eventDescription: event.summary]
                        if (eventsList.isEmpty()) { irrigationIcon = iconPack == "Filled" ? freezeSkip : freezeSkip2 }
                        break
                    case "CLIMATE_FUTURE_FEED_SKIP_EVENT":
                        foundEvent = [eventType : "SKIP", eventSubType : "SOIL_SATURATED", eventDescription: event.summary]
                        if (eventsList.isEmpty()) { irrigationIcon = iconPack == "Filled" ? saturationSkip : saturationSkip2 }
                        break
                }
                if(!foundEvent.isEmpty()) { eventsList.add(foundEvent) }
            }
        }   
    return irrigationIcon
}

def getColorScheme(schemeSelection) {
    
    // new color scheme:
    // white: #c0bfbc
    // yellow: #f6d32d
    // blue: #99c1f1
    
    // old color scheme
    white = "#FFFFFF"
    black = "#000000"
    red = "#cc3333"
  //  yellow = "#f4a71d"
    yellow = "#f6d32d"
  //  darkBlue = "#2885c7"
   // lightBlue = "#72b7d4"
    darkBlue = "#99c1f1"
    lightBlue = "#99c1f1"
    
    if (schemeSelection == "White with Color") {
        return [cloudColor: white, lightColor: yellow, precipColor: darkBlue, frozenPrecipColor: lightBlue, rainDropWateringColor: darkBlue, rainDropAccentColor: white, rainDropSkipColor:red, saturatedSoilColor: darkBlue, rainDropsPredictedColor: darkBlue, freezeSkip0Color: lightBlue, freezeSkip1Color: darkBlue, windSkipColor: lightBlue, rainSensorSkipColor: darkBlue, strokeColor: none, dayTextColor: white, precipTextColor: darkBlue, highTempTextColor: white, lowTempTextColor: white]  
    }
    else if (schemeSelection == "Black with Color") {
        return [cloudColor: black, lightColor: yellow, precipColor: darkBlue, frozenPrecipColor: lightBlue, rainDropWateringColor: darkBlue, rainDropAccentColor: black, rainDropSkipColor:red, saturatedSoilColor: darkBlue, rainDropsPredictedColor: darkBlue, freezeSkip0Color: lightBlue, freezeSkip1Color: darkBlue,  windSkipColor: lightBlue, rainSensorSkipColor: darkBlue, strokeColor: none, dayTextColor: black, precipTextColor: darkBlue, highTempTextColor: black, lowTempTextColor: black]  
    }
    else if (schemeSelection == "White without Color") {
        return [cloudColor: white, lightColor: white, precipColor: white,  frozenPrecipColor: white, rainDropWateringColor: white, rainDropAccentColor: black, rainDropSkipColor:black, saturatedSoilColor: black, rainDropsPredictedColor: white, freezeSkip0Color: white, freezeSkip1Color: white,  windSkipColor: white, rainSensorSkipColor: white, strokeColor: white, dayTextColor: white, precipTextColor: white, highTempTextColor: white, lowTempTextColor: white]  
    }
    else if (schemeSelection == "Black without Color") {
        return [cloudColor: black, lightColor: black, precipColor: black, frozenPrecipColor: black, rainDropWateringColor: black, rainDropAccentColor: white, rainDropSkipColor: white, saturatedSoilColor: white, rainDropsPredictedColor: black, freezeSkip0Color: black, freezeSkip1Color: black, windSkipColor: black, rainSensorSkipColor: black, strokeColor: black, dayTextColor: black, precipTextColor: black, highTempTextColor: black, lowTempTextColor: black]  
    }
    else if (schemeSelection == "Custom") {
        return [cloudColor: cloudColorCustom, lightColor: lightColorCustom, precipColor: precipColorCustom, rainDropWateringColor: rainDropWateringColorCustom, rainDropAccentColor: rainDropAccentColorCustom, rainDropSkipColor:rainDropSkipColorCustom, skipStrikethroughColor: skipStrikethroughColorCustom, saturatedSoilColor: saturatedSoilColorCustom, rainDropsPredictedColor: rainDropsPredictedColorCustom, freezeSkip0Color: freezeSkip0ColorCustom, freezeSkip1Color: freezeSkip1ColorCustom, windSkipColor: windSkipColorCustom, rainSensorSkipColor: rainSensorSkipColorCustom, strokeColor: strokeColorCustom, dayTextColor: dayTextColorCustom, precipTextColor: precipTextColorCustom, highTempTextColor: highTempTextColorCustom, lowTempTextColor: lowTempTextColorCustom]  
    }
    if (debugLogging) { log.debug("Error getting color scheme") }
    return
}


// Filled icons
chanceflurries = '<g id="chanceflurries"> <path class="cloud" d="M44.1,41h5.8c5.2,0,9.5-4.3,9.5-9.5c0-4.9-3.7-8.9-8.4-9.5c0.1-0.8,0.2-1.6,0.2-2.4c0-7.4-6-13.4-13.4-13.4 c-4.6,0-8.7,2.3-11.2,6c-1.2-0.5-2.4-0.8-3.7-0.8c-5.1,0-9.3,4.2-9.3,9.3V21c-4.1,1.4-7,5.3-7,9.7c0,5.6,4.6,10.2,10.2,10.2 L44.1,41"/> <path class="frozenPrecip" d="M40.9,49.3c0.7-0.9,0.5-2.2-0.4-2.9s-2.2-0.5-2.9,0.4C37,47.7,37.1,49,38,49.7S40.2,50.2,40.9,49.3z M28.2,49.3c0.7-0.9,0.5-2.2-0.4-2.9s-2.2-0.5-2.9,0.4c-0.7,0.9-0.5,2.2,0.4,2.9S27.5,50.2,28.2,49.3z"/> <ellipse class="frozenPrecip" cx="32.9" cy="56.8" rx="2.1" ry="2.1"/> <ellipse class="frozenPrecip" cx="32.9" cy="41.3" rx="2.1" ry="2.1"/> </g>'

chancerain = '<path class="cloud" d="M44.1,42.9h5.7c5.2,0,9.5-4.3,9.5-9.5c-0.1-4.7-3.8-8.7-8.4-9.3c0.1-0.8,0.2-1.6,0.2-2.4 c0-7.4-6-13.4-13.4-13.4c-4.5,0-8.7,2.3-11.2,6c-1.2-0.5-2.4-0.8-3.7-0.8c-5.1,0-9.3,4.1-9.3,9.3v0.3c-4.1,1.4-7,5.2-7,9.7 c0,5.6,4.6,10.2,10.2,10.2L44.1,42.9"/> <path class="precip" d="M24.9,46.5c-0.3,0-0.5-0.1-0.8-0.2c-0.6-0.4-0.7-1.3-0.3-1.8l2.4-3.5c0.4-0.6,1.2-0.7,1.8-0.3 c0.6,0.4,0.7,1.2,0.3,1.8L25.9,46C25.7,46.3,25.3,46.5,24.9,46.5z M30.7,46.5c-0.3,0-0.5-0.1-0.8-0.2c-0.6-0.4-0.7-1.3-0.3-1.8 L32,41c0.4-0.6,1.3-0.7,1.8-0.3c0.6,0.4,0.7,1.2,0.3,1.8L31.7,46C31.5,46.3,31.1,46.5,30.7,46.5z M36.5,46.5c-0.3,0-0.5-0.1-0.8-0.2 c-0.6-0.4-0.7-1.3-0.3-1.8l2.4-3.5c0.4-0.6,1.3-0.7,1.8-0.3c0.6,0.4,0.7,1.2,0.3,1.8L37.5,46C37.4,46.3,37,46.5,36.5,46.5z M18.6,56 c-0.3,0-0.5-0.1-0.8-0.2c-0.6-0.4-0.7-1.2-0.3-1.8l2.4-3.5c0.4-0.6,1.3-0.7,1.9-0.3s0.7,1.2,0.3,1.8l-2.4,3.5 C19.4,55.8,19,56,18.6,56z M24.5,56c-0.3,0-0.5-0.1-0.8-0.2c-0.6-0.4-0.7-1.2-0.3-1.8l2.4-3.5c0.4-0.6,1.2-0.7,1.8-0.3 c0.6,0.4,0.7,1.2,0.3,1.8l-2.4,3.5C25.3,55.8,24.9,56,24.5,56z M30.3,56c-0.3,0-0.5-0.1-0.8-0.2c-0.6-0.4-0.7-1.2-0.3-1.8l2.4-3.5 c0.4-0.6,1.2-0.7,1.8-0.3c0.6,0.4,0.7,1.2,0.3,1.8l-2.4,3.5C31.1,55.8,30.7,56,30.3,56z"/>'

chancesleet = '<g id="chancesleet"> <path class="cloud" d="M44.1,42.6h5.7c5.2,0,9.5-4.3,9.5-9.5c-0.1-4.7-3.8-8.7-8.4-9.3c0.1-0.8,0.2-1.6,0.2-2.4 C51.1,14,45.1,8,37.7,8c-4.5,0-8.7,2.3-11.2,6c-1.2-0.5-2.4-0.8-3.7-0.8c-5.1,0-9.3,4.2-9.3,9.3v0.3c-4.1,1.4-7,5.2-7,9.7 c0,5.6,4.6,10.2,10.2,10.2L44.1,42.6"/> <path class="frozenPrecip" d="M26.6,46c-0.2,0-0.3,0-0.5-0.1c-0.5-0.3-0.7-0.9-0.5-1.4l3.5-6.6c0.3-0.5,0.9-0.7,1.4-0.5 c0.5,0.3,0.7,0.9,0.5,1.4l-3.5,6.6C27.4,45.8,27,46,26.6,46z M31.2,53c-0.2,0-0.3,0-0.5-0.1c-0.5-0.3-0.7-0.9-0.5-1.4l6.9-13.7 c0.3-0.5,0.9-0.7,1.4-0.5c0.5,0.3,0.7,0.9,0.5,1.4l-6.9,13.7C32,52.8,31.6,53,31.2,53z M26.1,50.6l-2.8,1l-0.9-2.8l2.8-0.9 L26.1,50.6z M27.1,55.7l2.8-0.9l0.9,2.8L28,58.4L27.1,55.7z"/> </g>'

chancesnow = '<g id="chancesnow"> <path class="cloud" d="M44.1,43.5h5.7c5.2,0,9.5-4.3,9.5-9.5c-0.1-4.8-3.8-8.8-8.4-9.4c0.1-0.8,0.2-1.6,0.2-2.4 c0-7.4-6-13.4-13.4-13.4c-4.5,0-8.7,2.3-11.2,6c-1.2-0.5-2.4-0.8-3.7-0.8c-5.1,0-9.3,4.2-9.3,9.3v0.3c-4.1,1.3-7,5.2-7,9.7 c0,5.6,4.6,10.2,10.2,10.2H44.1"/> <path class="frozenPrecip" d="M42.2,46.4h-5.1c-0.1-0.4-0.3-0.8-0.5-1.2l2.3-2.3c0.4-0.4,0.4-1.1,0-1.5s-1.1-0.4-1.5,0l-2.3,2.3 c-0.4-0.2-0.8-0.4-1.2-0.5v-5.1c0-0.6-0.5-1.1-1.1-1.1s-1.1,0.5-1.1,1.1v5.1c-0.4,0.1-0.8,0.3-1.2,0.5l-2.2-2.2 c-0.4-0.4-1.1-0.4-1.5,0s-0.4,1.1,0,1.5l2.2,2.2c-0.2,0.4-0.4,0.8-0.5,1.2h-5.1c-0.6,0-1.1,0.5-1.1,1.1s0.5,1.1,1.1,1.1h5.1 c0.1,0.4,0.3,0.8,0.5,1.2l-2.3,2.3c-0.4,0.4-0.4,1.1,0,1.5c0.2,0.2,0.5,0.3,0.8,0.3s0.5-0.1,0.8-0.3l2.3-2.3 c0.4,0.2,0.8,0.4,1.2,0.5v5.1c0,0.6,0.5,1.1,1.1,1.1s1.1-0.5,1.1-1.1v-5.1c0.4-0.1,0.8-0.3,1.2-0.5l2.2,2.2 c0.2,0.2,0.5,0.3,0.8,0.3s0.6-0.1,0.8-0.3c0.4-0.4,0.4-1.1,0-1.5l-2.2-2.2c0.2-0.4,0.4-0.8,0.5-1.2h5.1c0.6,0,1.1-0.5,1.1-1.1 C43.3,46.9,42.8,46.4,42.2,46.4z M32.9,49.2c-0.9,0-1.7-0.8-1.7-1.7s0.8-1.7,1.7-1.7s1.7,0.8,1.7,1.7 C34.6,48.5,33.8,49.2,32.9,49.2z"/> </g>'

chancetstorms = '<g id="chancetstorms"> <path class="cloud" d="M44.2,41.2h5.7c5.2,0,9.5-4.3,9.5-9.5c-0.2-4.7-3.9-8.7-8.5-9.3c0.1-0.8,0.2-1.6,0.2-2.4 c0-7.4-6-13.4-13.4-13.4c-4.5,0-8.7,2.3-11.2,6c-1.2-0.5-2.4-0.8-3.6-0.8c-5.1,0-9.3,4.2-9.3,9.3v0.3c-4.1,1.4-7,5.2-7,9.7 c0,5.6,4.6,10.2,10.2,10.2L44.2,41.2"/> <path class="light" d="M28.3,59.2c-0.1,0-0.4-0.1-0.5-0.1c-0.4-0.3-0.6-0.9-0.3-1.3l5.7-9.5h-6l6.7-9.6c0.3-0.4,0.9-0.5,1.3-0.2 s0.5,0.9,0.2,1.4l-4.6,6.6h5.7l-7.4,12.3C29,59.1,28.7,59.2,28.3,59.2z"/> </g>'

clear = '<g id="clear"> <path class="light" d="M32.9,19.2c-0.7,0-1.3-0.6-1.3-1.3v-4.6c0-0.7,0.6-1.3,1.3-1.3s1.3,0.6,1.3,1.3v4.6 C34.2,18.6,33.6,19.2,32.9,19.2z M32.9,53.8c-0.7,0-1.3-0.6-1.3-1.3v-4.6c0-0.7,0.6-1.3,1.3-1.3s1.3,0.6,1.3,1.3v4.6 C34.2,53.2,33.6,53.8,32.9,53.8z M17.9,34.2h-4.6c-0.7,0-1.3-0.6-1.3-1.3s0.6-1.3,1.3-1.3h4.6c0.7,0,1.3,0.6,1.3,1.3 S18.6,34.2,17.9,34.2z M52.5,34.2h-4.6c-0.7,0-1.3-0.6-1.3-1.3s0.6-1.3,1.3-1.3h4.6c0.7,0,1.3,0.6,1.3,1.3S53.2,34.2,52.5,34.2z M44,23.5c-0.3,0-0.7-0.1-0.9-0.4c-0.5-0.5-0.5-1.4,0-1.9l3.2-3.2c0.5-0.5,1.4-0.5,1.9,0s0.5,1.4,0,1.9L45,23.1 C44.7,23.4,44.3,23.5,44,23.5z M19.1,48.4c-0.3,0-0.7-0.1-0.9-0.4c-0.5-0.5-0.5-1.4,0-1.9l3.2-3.2c0.5-0.5,1.4-0.5,1.9,0 s0.5,1.4,0,1.9L20,48C19.8,48.3,19.4,48.4,19.1,48.4z M47.2,48.2c-0.3,0-0.7-0.1-0.9-0.4l-3.2-3.2c-0.5-0.5-0.5-1.4,0-1.9 s1.4-0.5,1.9,0l3.2,3.2c0.5,0.5,0.5,1.4,0,1.9C47.9,48.1,47.6,48.2,47.2,48.2z M22.3,23.7c-0.3,0-0.7-0.1-0.9-0.4l-3.2-3.2 c-0.5-0.5-0.5-1.4,0-1.9s1.4-0.5,1.9,0l3.2,3.2c0.5,0.5,0.5,1.4,0,1.9C23,23.6,22.7,23.7,22.3,23.7z M32.9,24.5 M32.9,21.8 c-6.1,0-11.1,5-11.1,11.1S26.8,44,32.9,44S44,39,44,32.9S39,21.8,32.9,21.8z"/> </g>'

cloudy = '<path id="cloudy" class="cloud" d="M49.7,50.2H16.8c-5.6,0-10.2-4.6-10.2-10.2c0-4.4,2.9-8.3,7-9.7V30c0-5.1,4.2-9.3,9.3-9.3 c1.3,0,2.5,0.3,3.7,0.8c2.5-3.7,6.6-6,11.2-6c7.4,0,13.4,6,13.4,13.4c0,0.8-0.1,1.6-0.2,2.4c4.7,0.6,8.3,4.6,8.3,9.4 C59.2,45.9,54.9,50.2,49.7,50.2z"/>'

flurries = '<g id="flurries"> <path class="cloud" d="M44.1,41.2h5.7c5.2,0,9.5-4.3,9.5-9.5c-0.1-4.8-3.8-8.8-8.4-9.4c0.2-0.8,0.2-1.6,0.2-2.4 c0-7.4-6-13.4-13.4-13.4c-4.5,0-8.7,2.3-11.2,6c-1.2-0.5-2.4-0.8-3.6-0.8c-5.1,0-9.3,4.2-9.3,9.3v0.3c-4.1,1.4-7,5.3-7,9.7 c0,5.6,4.6,10.2,10.2,10.2L44.1,41.2"/> <path class="frozenPrecip" d="M23.4,49.6c0.7-0.9,0.5-2.2-0.4-2.9s-2.2-0.5-2.9,0.4c-0.7,0.9-0.5,2.2,0.4,2.9S22.7,50.5,23.4,49.6z M44.9,49.6c0.7-0.9,0.5-2.2-0.4-2.9s-2.2-0.5-2.9,0.4C41,48,41.1,49.3,42,50S44.2,50.5,44.9,49.6z"/> <path class="frozenPrecip" d="M39.2,41c0.7-0.9,0.5-2.2-0.4-2.9s-2.2-0.5-2.9,0.4s-0.5,2.2,0.4,2.9S38.5,41.9,39.2,41z"/> <ellipse class="frozenPrecip" cx="28.1" cy="39.8" rx="2.1" ry="2.1"/> <path class="frozenPrecip" d="M39.2,58.1c0.7-0.9,0.5-2.2-0.4-2.9s-2.2-0.5-2.9,0.4s-0.5,2.2,0.4,2.9S38.5,59.1,39.2,58.1z"/> <ellipse class="frozenPrecip" cx="28.1" cy="56.9" rx="2.1" ry="2.1"/> <ellipse class="frozenPrecip" cx="32.5" cy="48.3" rx="2.1" ry="2.1"/> </g>'

fog = '<g id="fog"><path class="cloud" d="M41.7 38.5c-3.2 0-6.1-.9-8.7-2.7-7.2-5.1-13.2-5.3-19.6-.9-.5.3-1.1.2-1.4-.3-.3-.5-.2-1.1.3-1.4 7.1-4.9 14.1-4.6 21.9.9 6.2 4.4 13.3 1.9 18.2-1 .5-.3 1.1-.1 1.4.4.3.5.1 1.1-.4 1.4-4 2.4-8 3.6-11.7 3.6z"/><path class="cloud" d="M41.7 46.3c-3.2 0-6.1-.9-8.7-2.7-7.2-5.1-13.2-5.3-19.6-.9-.5.3-1.1.2-1.4-.3-.3-.5-.2-1.1.3-1.4 7.1-4.9 14.1-4.6 21.9.9 6.2 4.3 13.3 1.9 18.2-1 .5-.3 1.1-.1 1.4.4.3.5.1 1.1-.4 1.4-4 2.4-8 3.6-11.7 3.6zM41.7 30.8c-3.2 0-6.1-.9-8.7-2.7-7.2-5.1-13.2-5.3-19.6-.9-.5.3-1.1.2-1.4-.3-.3-.5-.2-1.1.3-1.4 7.1-4.9 14.1-4.6 21.9.9 6.2 4.4 13.3 1.9 18.2-1 .5-.3 1.1-.1 1.4.4.3.5.1 1.1-.4 1.4-4 2.4-8 3.6-11.7 3.6z"/></g>'

hazy = '<g id="hazy"><path class="cloud" d="M41.7 38.5c-3.2 0-6.1-.9-8.7-2.7-7.2-5.1-13.2-5.3-19.6-.9-.5.3-1.1.2-1.4-.3-.3-.5-.2-1.1.3-1.4 7.1-4.9 14.1-4.6 21.9.9 6.2 4.4 13.3 1.9 18.2-1 .5-.3 1.1-.1 1.4.4.3.5.1 1.1-.4 1.4-4 2.4-8 3.6-11.7 3.6z"/><path class="cloud" d="M41.7 46.3c-3.2 0-6.1-.9-8.7-2.7-7.2-5.1-13.2-5.3-19.6-.9-.5.3-1.1.2-1.4-.3-.3-.5-.2-1.1.3-1.4 7.1-4.9 14.1-4.6 21.9.9 6.2 4.3 13.3 1.9 18.2-1 .5-.3 1.1-.1 1.4.4.3.5.1 1.1-.4 1.4-4 2.4-8 3.6-11.7 3.6zM41.7 30.8c-3.2 0-6.1-.9-8.7-2.7-7.2-5.1-13.2-5.3-19.6-.9-.5.3-1.1.2-1.4-.3-.3-.5-.2-1.1.3-1.4 7.1-4.9 14.1-4.6 21.9.9 6.2 4.4 13.3 1.9 18.2-1 .5-.3 1.1-.1 1.4.4.3.5.1 1.1-.4 1.4-4 2.4-8 3.6-11.7 3.6z"/></g>'

mostlycloudy = '<g id="mostlycloudy"> <circle class="light" cx="43.3" cy="23.6" r="7.7"/> <path class="light" d="M43.1,13.9c-0.7,0-1.2-0.6-1.2-1.2V9.2c0-0.7,0.6-1.2,1.2-1.2c0.7,0,1.2,0.6,1.2,1.2v3.4 C44.3,13.3,43.8,13.9,43.1,13.9z M57.6,25h-3.4c-0.7,0-1.2-0.5-1.2-1.2s0.5-1.2,1.2-1.2h3.4c0.7,0,1.2,0.5,1.2,1.2 C58.9,24.5,58.3,25,57.6,25z M51.3,17.1c-0.3,0-0.6-0.1-0.9-0.4c-0.5-0.5-0.5-1.3,0-1.7l2.4-2.4c0.5-0.5,1.3-0.5,1.7,0 c0.5,0.5,0.5,1.3,0,1.7l-2.4,2.4C52,17,51.6,17.1,51.3,17.1z M53.7,35.4c-0.3,0-0.6-0.1-0.9-0.4l-2.4-2.4c-0.5-0.5-0.5-1.3,0-1.7 c0.5-0.5,1.3-0.5,1.7,0l2.4,2.4c0.5,0.5,0.5,1.3,0,1.7C54.4,35.3,54,35.4,53.7,35.4z M35.3,17.2c-0.3,0-0.6-0.1-0.9-0.4L32,14.5 c-0.5-0.5-0.5-1.3,0-1.7c0.5-0.5,1.3-0.5,1.7,0l2.4,2.4c0.5,0.5,0.5,1.3,0,1.7C35.9,17.1,35.6,17.2,35.3,17.2z"/> <path class="cloud" d="M45.6,57.8H16c-5.1,0-9.3-4.2-9.3-9.3c0-4,2.6-7.6,6.3-8.8v-0.2c0-4.7,3.8-8.5,8.5-8.5c1.1,0,2.2,0.2,3.2,0.7 c2.2-3.4,6-5.4,10.1-5.4c6.7,0,12.2,5.5,12.2,12.2c0,0.7-0.1,1.4-0.2,2.1c4.2,0.6,7.5,4.2,7.5,8.6C54.2,53.9,50.4,57.8,45.6,57.8z"/> </g>'

mostlysunny = '<g id="mostlysunny"> <path class="light" d="M35.5,15.3c-0.7,0-1.3-0.6-1.3-1.3V9c0-0.7,0.6-1.3,1.3-1.3s1.3,0.6,1.3,1.3v5C36.8,14.7,36.2,15.3,35.5,15.3z M19.2,31.6h-5c-0.7,0-1.3-0.6-1.3-1.3c0-0.7,0.6-1.3,1.3-1.3h5c0.7,0,1.3,0.6,1.3,1.3C20.5,31,19.9,31.6,19.2,31.6z M56.7,31.6h-5 c-0.7,0-1.3-0.6-1.3-1.3c0-0.7,0.6-1.3,1.3-1.3h5c0.7,0,1.3,0.6,1.3,1.3C58,31,57.4,31.6,56.7,31.6z M47.5,20 c-0.3,0-0.7-0.1-0.9-0.4c-0.5-0.5-0.5-1.4,0-1.9l3.5-3.5c0.5-0.5,1.4-0.5,1.9,0s0.5,1.4,0,1.9l-3.5,3.5C48.2,19.8,47.8,20,47.5,20z M51,46.8c-0.3,0-0.7-0.1-0.9-0.4l-3.5-3.5c-0.5-0.5-0.5-1.4,0-1.9s1.3-0.5,1.9,0l3.5,3.5c0.5,0.5,0.5,1.4,0,1.9 C51.7,46.6,51.3,46.8,51,46.8z M24,20.2c-0.3,0-0.7-0.1-0.9-0.4l-3.5-3.5c-0.5-0.5-0.5-1.4,0-1.9s1.3-0.5,1.9,0l3.5,3.5 c0.5,0.5,0.5,1.4,0,1.9C24.7,20.1,24.3,20.2,24,20.2z"/> <circle class="light" cx="35.5" cy="30.3" r="12"/> <path class="cloud" d="M33.4,58.2h-20c-3.7,0-6.7-3-6.7-6.7c0-2.8,1.7-5.3,4.3-6.3c0.1-3.3,2.8-6,6.2-6c0.7,0,1.4,0.1,2,0.4 c1.6-2.2,4.2-3.6,7-3.6c4.8,0,8.7,3.9,8.7,8.7c0,0.4,0,0.7-0.1,1.1c2.8,0.6,5,3.1,5,6.2C39.7,55.4,36.9,58.2,33.4,58.2z"/> </g>'

rain = '<g id="rain"> <path class="cloud" d="M44.1,41.2h5.7c5.2,0,9.5-4.3,9.5-9.5c-0.1-4.7-3.7-8.7-8.4-9.3c0.1-0.8,0.2-1.6,0.2-2.4 c0-7.4-6-13.4-13.4-13.4c-4.5,0-8.7,2.3-11.2,6c-1.2-0.5-2.4-0.8-3.7-0.8c-5.1,0-9.3,4.2-9.3,9.3v0.3c-4.1,1.4-7,5.2-7,9.7 c0,5.6,4.6,10.2,10.2,10.2L44.1,41.2"/> <path class="precip" d="M25.5,59.3c-0.2,0-0.3,0-0.5-0.1c-0.7-0.3-1-1.1-0.7-1.7l9.3-21.9c0.3-0.7,1.1-1,1.7-0.7 c0.7,0.3,1,1.1,0.7,1.7l-9.3,21.9C26.5,59,26,59.3,25.5,59.3z M34,53.5c-0.2,0-0.3,0-0.5-0.1c-0.7-0.3-1-1.1-0.7-1.7l6.6-16 c0.3-0.7,1.1-1,1.7-0.7c0.7,0.3,1,1.1,0.7,1.7l-6.6,16C35,53.2,34.5,53.5,34,53.5z M21.9,53.5c-0.2,0-0.3,0-0.5-0.1 c-0.7-0.3-1-1.1-0.7-1.7l6.6-16c0.3-0.7,1.1-1,1.7-0.7c0.7,0.3,1,1.1,0.7,1.7l-6.6,16C22.9,53.2,22.5,53.5,21.9,53.5z"/> </g>'

sleet = '<g id="sleet"> <path class="cloud" d="M44.1,43.1h5.7c5.2,0,9.5-4.3,9.5-9.5c-0.1-4.8-3.8-8.8-8.4-9.4c0.1-0.8,0.2-1.6,0.2-2.4 c0-7.4-6-13.4-13.4-13.4c-4.5,0-8.7,2.3-11.2,6c-1.2-0.5-2.4-0.8-3.6-0.8c-5.1,0-9.3,4.2-9.3,9.3v0.3c-4.1,1.4-7,5.2-7,9.7 c0,5.6,4.6,10.2,10.2,10.2H44.1"/> <path class="frozenPrecip" d="M22.3,57.4l-2.8,0.9l-0.9-2.7l2.8-0.9L22.3,57.4z M22.6,52.7c-0.1,0-0.3,0-0.4-0.1c-0.6-0.2-0.9-0.9-0.7-1.6 l5-12.3c0.2-0.6,0.9-0.9,1.6-0.7c0.6,0.3,0.9,0.9,0.6,1.6l-5,12.3C23.5,52.4,23,52.7,22.6,52.7z M24.6,55.8l2.8-0.9l0.9,2.8 l-2.8,0.9L24.6,55.8z M28.6,53c-0.2,0-0.3,0-0.5-0.1c-0.6-0.2-0.9-0.9-0.6-1.6l5-12.3c0.2-0.6,0.9-0.9,1.6-0.6 c0.6,0.2,0.9,0.9,0.7,1.6l-5,12.3C29.5,52.7,29.1,53,28.6,53z M30.7,55.8l2.8-0.9l0.9,2.8l-2.8,0.9L30.7,55.8z M34.6,53 c-0.1,0-0.3,0-0.5-0.1c-0.6-0.2-0.9-0.9-0.6-1.6l5-12.3c0.2-0.6,0.9-0.9,1.6-0.6c0.6,0.2,0.9,0.9,0.6,1.6l-5,12.3 C35.5,52.7,35.1,53,34.6,53z"/> </g>'

snow = '<path class="frozenPrecip" d="M51.6 32h-5.2l2.2-2.2c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L43.6 32h-8.3l5.9-5.9h5.1c.5 0 1-.4 1-1 0-.5-.4-1-1-1h-3.1l3.7-3.7c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0l-3.7 3.7v-3.1c0-.5-.4-1-1-1-.5 0-1 .4-1 1v5.1l-5.9 5.9v-8.3l3.6-3.6c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0l-2.2 2.2v-5.2c0-.5-.4-1-1-1-.5 0-1 .4-1 1v5.2l-2.2-2.2c-.4-.4-1-.4-1.4 0-.4.4-.4 1 0 1.4l3.6 3.6v8.3L26 24.7v-5.1c0-.5-.4-1-1-1-.5 0-1 .4-1 1v3.1L20.3 19c-.4-.4-1-.4-1.4 0-.4.4-.4 1 0 1.4l3.7 3.7h-3.1c-.5 0-1 .4-1 1 0 .5.4 1 1 1h5.1l5.9 5.9h-8.3l-3.6-3.6c-.4-.4-1-.4-1.4 0-.4.4-.4 1 0 1.4l2.2 2.2h-5.2c-.5 0-1 .4-1 1 0 .5.4 1 1 1h5.2l-2.2 2.2c-.4.4-.4 1 0 1.4.2.2.4.3.7.3.2 0 .5-.1.7-.3l3.6-3.6h8.3l-5.9 5.9h-5.1c-.5 0-1 .4-1 1 0 .5.4 1 1 1h3.1L19 45.4c-.4.4-.4 1 0 1.4.2.2.4.3.7.3.2 0 .5-.1.7-.3l3.7-3.7v3.1c0 .5.4 1 1 1 .5 0 1-.4 1-1v-5.1l5.9-5.9v8.3l-3.6 3.6c-.4.4-.4 1 0 1.4.2.2.4.3.7.3.3 0 .5-.1.7-.3l2.2-2.2v5.2c0 .5.4 1 1 1 .5 0 1-.4 1-1v-5.2l2.2 2.2c.2.2.4.3.7.3.3 0 .5-.1.7-.3.4-.4.4-1 0-1.4L34 43.5v-8.3l5.9 5.9v5.1c0 .5.4 1 1 1 .5 0 1-.4 1-1v-3.1l3.7 3.7c.2.2.4.3.7.3.3 0 .5-.1.7-.3.4-.4.4-1 0-1.4l-3.7-3.7h3.1c.5 0 1-.4 1-1 0-.5-.4-1-1-1h-5.1l-5.9-5.9h8.3l3.6 3.6c.2.2.4.3.7.3.3 0 .5-.1.7-.3.4-.4.4-1 0-1.4l-2.2-2.2h5.2c.5 0 1-.4 1-1-.2-.4-.6-.8-1.1-.8z" id="snow"/>'

sunny = '<g id="sunny"> <path class="light" d="M32.9,19.2c-0.7,0-1.3-0.6-1.3-1.3v-4.6c0-0.7,0.6-1.3,1.3-1.3s1.3,0.6,1.3,1.3v4.6 C34.2,18.6,33.6,19.2,32.9,19.2z M32.9,53.8c-0.7,0-1.3-0.6-1.3-1.3v-4.6c0-0.7,0.6-1.3,1.3-1.3s1.3,0.6,1.3,1.3v4.6 C34.2,53.2,33.6,53.8,32.9,53.8z M17.9,34.2h-4.6c-0.7,0-1.3-0.6-1.3-1.3s0.6-1.3,1.3-1.3h4.6c0.7,0,1.3,0.6,1.3,1.3 S18.6,34.2,17.9,34.2z M52.5,34.2h-4.6c-0.7,0-1.3-0.6-1.3-1.3s0.6-1.3,1.3-1.3h4.6c0.7,0,1.3,0.6,1.3,1.3S53.2,34.2,52.5,34.2z M44,23.5c-0.3,0-0.7-0.1-0.9-0.4c-0.5-0.5-0.5-1.4,0-1.9l3.2-3.2c0.5-0.5,1.4-0.5,1.9,0s0.5,1.4,0,1.9L45,23.1 C44.7,23.4,44.3,23.5,44,23.5z M19.1,48.4c-0.3,0-0.7-0.1-0.9-0.4c-0.5-0.5-0.5-1.4,0-1.9l3.2-3.2c0.5-0.5,1.4-0.5,1.9,0 s0.5,1.4,0,1.9L20,48C19.8,48.3,19.4,48.4,19.1,48.4z M47.2,48.2c-0.3,0-0.7-0.1-0.9-0.4l-3.2-3.2c-0.5-0.5-0.5-1.4,0-1.9 s1.4-0.5,1.9,0l3.2,3.2c0.5,0.5,0.5,1.4,0,1.9C47.9,48.1,47.6,48.2,47.2,48.2z M22.3,23.8c-0.3,0-0.7-0.1-0.9-0.4l-3.2-3.2 c-0.5-0.5-0.5-1.4,0-1.9s1.4-0.5,1.9,0l3.2,3.2c0.5,0.5,0.5,1.4,0,1.9C23,23.6,22.7,23.8,22.3,23.8z M32.9,21.8 c-6.1,0-11.1,5-11.1,11.1S26.8,44,32.9,44S44,39,44,32.9S39,21.8,32.9,21.8z"/> </g>'

tstorms = '<g id="tstorms"> <path class="cloud" d="M44,41.1h5.7c5.2,0,9.5-4.3,9.5-9.5c0-4.7-3.7-8.7-8.3-9.3c0.1-0.8,0.2-1.6,0.2-2.4c0-7.4-6-13.4-13.4-13.4 c-4.5,0-8.7,2.3-11.2,6c-1.1-0.5-2.4-0.8-3.6-0.8c-5.1,0-9.3,4.2-9.3,9.3v0.3c-4.1,1.4-7,5.2-7,9.7c0,5.6,4.6,10.2,10.2,10.2 L44,41.1"/> <path class="precip" d="M19.7,53c-0.2,0-0.4,0-0.6-0.1c-0.7-0.3-0.9-1.1-0.6-1.8l2.8-5.8c0.3-0.7,1.1-0.9,1.8-0.6 c0.7,0.3,0.9,1.1,0.6,1.8l-2.8,5.8C20.6,52.7,20.2,53,19.7,53z M13.1,53c-0.2,0-0.4,0-0.6-0.1c-0.7-0.3-0.9-1.1-0.6-1.8l2.8-5.8 c0.3-0.7,1.1-0.9,1.8-0.6c0.7,0.3,0.9,1.1,0.6,1.8l-2.8,5.8C14.1,52.7,13.6,53,13.1,53z M46.8,53c-0.2,0-0.4,0-0.6-0.1 c-0.7-0.3-0.9-1.1-0.6-1.8l2.8-5.8c0.3-0.7,1.1-0.9,1.8-0.6c0.7,0.3,0.9,1.1,0.6,1.8L48,52.3C47.8,52.7,47.3,53,46.8,53z M40.2,53 c-0.2,0-0.4,0-0.6-0.1c-0.7-0.3-0.9-1.1-0.6-1.8l2.8-5.8c0.3-0.7,1.1-0.9,1.8-0.6c0.7,0.3,0.9,1.1,0.6,1.8l-2.8,5.8 C41.2,52.7,40.7,53,40.2,53z"/> <path class="light" d="M28.1,59.3c-0.1,0-0.3-0.1-0.4-0.1c-0.4-0.2-0.5-0.7-0.2-1.1l4.8-8h-5l5.7-8c0.2-0.4,0.7-0.4,1.1-0.2 c0.4,0.2,0.4,0.8,0.2,1.2l-3.9,5.5H35l-6.3,10.3C28.7,59.1,28.4,59.3,28.1,59.3z"/> </g>'

partlycloudy = '<g id="partlycloudy"> <path class="light" d="M35.5,15.3c-0.7,0-1.3-0.6-1.3-1.3V9c0-0.7,0.6-1.3,1.3-1.3s1.3,0.6,1.3,1.3v5C36.8,14.7,36.2,15.3,35.5,15.3z M19.2,31.6h-5c-0.7,0-1.3-0.6-1.3-1.3c0-0.7,0.6-1.3,1.3-1.3h5c0.7,0,1.3,0.6,1.3,1.3C20.5,31,19.9,31.6,19.2,31.6z M56.7,31.6h-5 c-0.7,0-1.3-0.6-1.3-1.3c0-0.7,0.6-1.3,1.3-1.3h5c0.7,0,1.3,0.6,1.3,1.3C58,31,57.4,31.6,56.7,31.6z M47.5,20 c-0.3,0-0.7-0.1-0.9-0.4c-0.5-0.5-0.5-1.4,0-1.9l3.5-3.5c0.5-0.5,1.4-0.5,1.9,0s0.5,1.4,0,1.9l-3.5,3.5C48.2,19.8,47.8,20,47.5,20z M51,46.8c-0.3,0-0.7-0.1-0.9-0.4l-3.5-3.5c-0.5-0.5-0.5-1.4,0-1.9s1.3-0.5,1.9,0l3.5,3.5c0.5,0.5,0.5,1.4,0,1.9 C51.7,46.6,51.3,46.8,51,46.8z M24,20.2c-0.3,0-0.7-0.1-0.9-0.4l-3.5-3.5c-0.5-0.5-0.5-1.4,0-1.9s1.3-0.5,1.9,0l3.5,3.5 c0.5,0.5,0.5,1.4,0,1.9C24.7,20.1,24.3,20.2,24,20.2z"/> <circle class="light" cx="35.5" cy="30.5" r="12.2"/> <path class="cloud" d="M33.4,58.2h-20c-3.7,0-6.7-3-6.7-6.7c0-2.8,1.7-5.3,4.3-6.3c0.1-3.3,2.8-6,6.2-6c0.7,0,1.4,0.1,2,0.4 c1.6-2.2,4.2-3.6,7-3.6c4.8,0,8.7,3.9,8.7,8.7c0,0.4,0,0.7-0.1,1.1c2.8,0.6,5,3.1,5,6.2C39.7,55.4,36.9,58.2,33.4,58.2z"/> </g>'

partlysunny = '<g id="partlysunny"> <path class="light" d="M43.1,13.9c-0.7,0-1.2-0.6-1.2-1.2V9.2c0-0.7,0.6-1.2,1.2-1.2c0.7,0,1.2,0.6,1.2,1.2v3.4 C44.3,13.3,43.8,13.9,43.1,13.9z M57.6,25h-3.4c-0.7,0-1.2-0.5-1.2-1.2s0.5-1.2,1.2-1.2h3.4c0.7,0,1.2,0.5,1.2,1.2 C58.9,24.5,58.3,25,57.6,25z M51.3,17.1c-0.3,0-0.6-0.1-0.9-0.4c-0.5-0.5-0.5-1.3,0-1.7l2.4-2.4c0.5-0.5,1.3-0.5,1.7,0 c0.5,0.5,0.5,1.3,0,1.7l-2.4,2.4C52,17,51.6,17.1,51.3,17.1z M53.7,35.4c-0.3,0-0.6-0.1-0.9-0.4l-2.4-2.4c-0.5-0.5-0.5-1.3,0-1.7 c0.5-0.5,1.3-0.5,1.7,0l2.4,2.4c0.5,0.5,0.5,1.3,0,1.7C54.4,35.3,54,35.4,53.7,35.4z M35.3,17.2c-0.3,0-0.6-0.1-0.9-0.4L32,14.5 c-0.5-0.5-0.5-1.3,0-1.7c0.5-0.5,1.3-0.5,1.7,0l2.4,2.4c0.5,0.5,0.5,1.3,0,1.7C35.9,17.1,35.6,17.2,35.3,17.2z"/> <circle class="light" cx="43.1" cy="23.5" r="7.7"/> <path class="cloud" d="M45.6,57.8H16c-5.1,0-9.3-4.2-9.3-9.3c0-4,2.6-7.6,6.3-8.8v-0.2c0-4.7,3.8-8.5,8.5-8.5c1.1,0,2.2,0.2,3.2,0.7 c2.2-3.4,6-5.4,10.1-5.4c6.7,0,12.2,5.5,12.2,12.2c0,0.7-0.1,1.4-0.2,2.1c4.2,0.6,7.5,4.2,7.5,8.6C54.2,53.9,50.4,57.8,45.6,57.8z"/></g>'

sprinklerWatering = '<g transform="scale(.3,.3)"><path class="rainDropWatering" d="M62.5,42.2C62.5,54.9,52.2,65,39.7,65S16.9,54.9,16.9,42.2S39.7,1,39.7,1S62.5,29.7,62.5,42.2z"/> <path class="rainDropAccent" d="M39.5,59c-9.2,0-16.8-7.5-16.8-16.8c0-1.1,0.9-2,2-2s2,0.9,2,2c0,7.1,5.7,12.8,12.8,12.8c1.1,0,2,0.9,2,2 S40.6,59,39.5,59z"/></g>'

saturationSkip = '<g transform="scale(.3,.3)"><path class="saturatedSoil" d="M53.9,60.1c14.1,0.8,24.8,2.7,24.8,4.9c0,2.9-17.4,5.2-38.9,5.2S0.9,67.9,0.9,65c0-2.1,10.5-4.1,24.5-4.9"/><g><path class="rainDropSkip" d="M62.5,42.2C62.5,54.9,52.2,65,39.7,65S16.9,54.9,16.9,42.2S39.7,1,39.7,1S62.5,29.7,62.5,42.2z"/><path class="rainDropAccent" d="M39.5,59c-9.2,0-16.8-7.5-16.8-16.8c0-1.1,0.9-2,2-2s2,0.9,2,2c0,7.1,5.7,12.8,12.8,12.8c1.1,0,2,0.9,2,2 S40.6,59,39.5,59z"/></g></g>'

rainSkip = '<g transform="scale(.3,.3)"><path class="rainDropSkip" d="M62.5,42.2C62.5,54.9,52.2,65,39.7,65S16.9,54.9,16.9,42.2S39.7,1,39.7,1S62.5,29.7,62.5,42.2z"/> <path class="rainDropAccent" d="M39.5,59c-9.2,0-16.8-7.5-16.8-16.8c0-1.1,0.9-2,2-2s2,0.9,2,2c0,7.1,5.7,12.8,12.8,12.8c1.1,0,2,0.9,2,2 S40.6,59,39.5,59z"/><path class="rainDropsPredicted" d="M75.1,36.3c0,3.3-2.7,5.9-5.9,5.9s-5.9-2.6-5.9-5.9c0-3.3,5.9-10.6,5.9-10.6S75.1,33.1,75.1,36.3z"/><path class="rainDropsPredicted" d="M65.1,11.6c0,3.3-2.7,5.9-5.9,5.9s-5.9-2.6-5.9-5.9S59.2,1,59.2,1S65.1,8.4,65.1,11.6z"/><path class="rainDropsPredicted" d="M78.4,17.7c0,3.3-2.7,5.9-5.9,5.9c-3.2,0-5.9-2.6-5.9-5.9s5.9-10.6,5.9-10.6S78.4,14.5,78.4,17.7z"/><path class="rainDropsPredicted" d="M26.2,12.2c0,3.3-2.7,5.9-5.9,5.9s-5.9-2.6-5.9-5.9s5.9-10.6,5.9-10.6S26.2,9,26.2,12.2z"/><path class="rainDropsPredicted" d="M12.8,17.7c0,3.3-2.7,5.9-5.9,5.9S1,21,1,17.7S6.9,7.1,6.9,7.1S12.8,14.5,12.8,17.7z"/><path class="rainDropsPredicted" d="M16.2,36.3c0,3.3-2.7,5.9-5.9,5.9s-5.9-2.6-5.9-5.9c0-3.3,5.9-10.6,5.9-10.6S16.2,33.1,16.2,36.3z"/></g>'

windSkip = '<g transform="scale(.3,.3)"><g><path class="windSkip" d="M42.4,15.1h23.8c4.2,0,7.5-3.2,7.5-7.1S70.3,1,66.2,1s-7.5,3.2-7.5,7.1c0,0.9,0.7,1.6,1.6,1.6 c0.9,0,1.6-0.7,1.6-1.6c0-2.1,2-3.9,4.4-3.9s4.4,1.7,4.4,3.9c0,2.1-2,3.9-4.4,3.9H2.4c-0.9,0-1.6,0.7-1.6,1.6 c0,0.9,0.7,1.6,1.6,1.6L42.4,15.1z"/> <path class="windSkip" d="M66.2,24.8H2.4c-0.9,0-1.6,0.7-1.6,1.6c0,0.9,0.7,1.6,1.6,1.6h63.8c2.4,0,4.4,1.8,4.4,3.9 c0,2.1-2,3.9-4.4,3.9c-0.9,0-1.6,0.7-1.6,1.6c0,0.9,0.7,1.6,1.6,1.6c4.2,0,7.5-3.2,7.5-7.1C73.7,28,70.3,24.8,66.2,24.8L66.2,24.8 z"/> <path class="windSkip" d="M77.2,13.9c-0.9,0-1.6,0.7-1.6,1.6c0,1.8-1.8,3.2-4.1,3.2H2.4c-0.9,0-1.6,0.7-1.6,1.6s0.7,1.6,1.6,1.6h69.1 c4,0,7.2-2.9,7.2-6.4C78.8,14.6,78.1,13.9,77.2,13.9L77.2,13.9z"/> </g><g> <path class="rainDropSkip" d="M62.5,42.2C62.5,54.9,52.2,65,39.7,65S16.9,54.9,16.9,42.2S39.7,1,39.7,1S62.5,29.7,62.5,42.2z"/> <path class="rainDropAccent" d="M39.5,59c-9.2,0-16.8-7.5-16.8-16.8c0-1.1,0.9-2,2-2s2,0.9,2,2c0,7.1,5.7,12.8,12.8,12.8c1.1,0,2,0.9,2,2 S40.6,59,39.5,59z"/></g></g>'

freezeSkip = '<g transform="scale(.3,.3)"><g> <path class="freezeSkip0" d="M50.3,0l4.5,19.4c0.2,1,1.7,1,1.9,0L61.2,0H50.3z"/> <path class="freezeSkip1" d="M53.6,0h-3.3l4.5,19.4c0.2,1,1.7,1,1.9,0l0.7-3L53.6,0z"/> <path class="freezeSkip0" d="M57.7,0l4.5,30.2c0.2,1.1,1.8,1.1,1.9,0L68.6,0H57.7z"/> <path class="freezeSkip1" d="M61,0h-3.3l4.5,30.2c0.2,1.1,1.8,1.1,1.9,0l0.7-4.6L61,0z"/> <path class="freezeSkip0" d="M68.6,0l4.5,23c0.2,1.1,1.7,1.1,1.9,0l4.5-23H68.6z"/> <path class="freezeSkip1" d="M71.9,0h-3.3l4.5,23c0.2,1.1,1.7,1.1,1.9,0l0.7-3.5L71.9,0z"/> <path class="freezeSkip0" d="M6.9,0l4.5,33.8c0.1,1.1,1.8,1.1,1.9,0L17.8,0H6.9z"/> <path class="freezeSkip1" d="M10.2,0H6.9l4.5,33.8c0.1,1.1,1.8,1.1,1.9,0l0.7-5.1L10.2,0z"/> <path class="freezeSkip0" d="M0,0l4.5,16.7c0.3,1,1.6,1,1.9,0L10.9,0H0z"/> <path class="freezeSkip1" d="M3.3,0H0l4.5,16.7c0.3,1,1.6,1,1.9,0l0.7-2.6L3.3,0z"/> <path class="freezeSkip0" d="M15.2,0l4.5,19.4c0.2,1,1.7,1,1.9,0L26.1,0H15.2z"/> <path class="freezeSkip1" d="M18.5,0h-3.3l4.5,19.4c0.2,1,1.7,1,1.9,0l0.7-3L18.5,0z"/> </g> <g> <path class="rainDropSkip" d="M62.5,42.2C62.5,54.9,52.2,65,39.7,65S16.9,54.9,16.9,42.2S39.7,1,39.7,1S62.5,29.7,62.5,42.2z"/> <path class="rainDropAccent" d="M39.5,59c-9.2,0-16.8-7.5-16.8-16.8c0-1.1,0.9-2,2-2s2,0.9,2,2c0,7.1,5.7,12.8,12.8,12.8c1.1,0,2,0.9,2,2 S40.6,59,39.5,59z"/> </g></g>'

rainSensorSkip = '<g transform="scale(.3,.3)"><g></g><g><path class="rainDropSkip" d="M62.5,42.2C62.5,54.9,52.2,65,39.7,65S16.9,54.9,16.9,42.2S39.7,1,39.7,1S62.5,29.7,62.5,42.2z"/><path class="rainDropAccent" d="M39.5,59c-9.2,0-16.8-7.5-16.8-16.8c0-1.1,0.9-2,2-2s2,0.9,2,2c0,7.1,5.7,12.8,12.8,12.8c1.1,0,2,0.9,2,2 S40.6,59,39.5,59z"/> <g> <path class="rainSensorSkip" d="M75.4,23.8c-0.6-0.6-1.6-0.6-2.2,0c-0.6,0.6-0.6,1.6,0,2.2c4.4,4.4,6.8,10.3,6.8,16.5s-2.4,12.1-6.8,16.5 c-0.6,0.6-0.6,1.6,0,2.2c0.6,0.6,1.6,0.6,2.2,0c5-5,7.7-11.6,7.7-18.7S80.4,28.7,75.4,23.8z"/> <path class="rainSensorSkip" d="M70.7,28.4c-0.6-0.6-1.6-0.6-2.2,0c-0.6,0.6-0.6,1.6,0,2.2c3.2,3.2,4.9,7.3,4.9,11.8s-1.7,8.7-4.9,11.8 c-0.6,0.6-0.6,1.6,0,2.2c0.6,0.6,1.6,0.6,2.2,0c3.7-3.7,5.8-8.7,5.8-14S74.4,32.2,70.7,28.4z"/> <path class="rainSensorSkip" d="M66,33.1c-0.6-0.6-1.6-0.6-2.2,0c-0.6,0.6-0.6,1.6,0,2.2c1.9,1.9,2.9,4.4,2.9,7.1c0,2.7-1,5.2-2.9,7.1 c-0.6,0.6-0.6,1.6,0,2.2c0.6,0.6,1.6,0.6,2.2,0c2.5-2.5,3.9-5.8,3.9-9.3S68.5,35.6,66,33.1L66,33.1z"/> <path class="rainSensorSkip" d="M-0.6,42.4c0-6.2,2.4-12.1,6.8-16.5c0.6-0.6,0.6-1.6,0-2.2c-0.6-0.6-1.6-0.6-2.2,0c-5,5-7.7,11.6-7.7,18.7 S-1,56.1,4,61.1c0.6,0.6,1.6,0.6,2.2,0c0.6-0.6,0.6-1.6,0-2.2C1.8,54.5-0.6,48.7-0.6,42.4L-0.6,42.4z"/> <path class="rainSensorSkip" d="M6,42.4c0-4.5,1.7-8.7,4.9-11.8c0.6-0.6,0.6-1.6,0-2.2c-0.6-0.6-1.6-0.6-2.2,0c-3.7,3.7-5.8,8.7-5.8,14 s2.1,10.3,5.8,14c0.6,0.6,1.6,0.6,2.2,0c0.6-0.6,0.6-1.6,0-2.2C7.7,51.1,6,46.9,6,42.4z"/> <path class="rainSensorSkip" d="M15.6,33.1c-0.6-0.6-1.6-0.6-2.2,0c-2.5,2.5-3.9,5.8-3.9,9.3s1.4,6.8,3.9,9.3c0.6,0.6,1.6,0.6,2.2,0 c0.6-0.6,0.6-1.6,0-2.2c-1.9-1.9-2.9-4.4-2.9-7.1c0-2.7,1-5.2,2.9-7.1C16.2,34.7,16.2,33.7,15.6,33.1L15.6,33.1z"/> </g> </g></g>'
    
genericSkip = '<g transform="scale(.3,.3)"><path class="rainDropSkip" d="M62.5,42.2C62.5,54.9,52.2,65,39.7,65S16.9,54.9,16.9,42.2S39.7,1,39.7,1S62.5,29.7,62.5,42.2z"/> <path class="rainDropAccent" d="M39.5,59c-9.2,0-16.8-7.5-16.8-16.8c0-1.1,0.9-2,2-2s2,0.9,2,2c0,7.1,5.7,12.8,12.8,12.8c1.1,0,2,0.9,2,2 S40.6,59,39.5,59z"/></g>'
    

// Outline icons
chanceflurries2 = '<g transform="scale(2) translate(1,0)" id="chanceflurries"> <path d="M 11.919922 18.460938 C 11.689922 18.460938 11.499844 18.539218 11.339844 18.699219 C 11.179844 18.859219 11.099609 19.070781 11.099609 19.300781 C 11.099609 19.530781 11.179849 19.720859 11.339844 19.880859 C 11.499844 20.040859 11.699922 20.119141 11.919922 20.119141 C 12.159922 20.119141 12.359531 20.040861 12.519531 19.880859 C 12.689531 19.720859 12.769531 19.529063 12.769531 19.289062 C 12.769531 19.059062 12.689531 18.859219 12.519531 18.699219 C 12.349531 18.539219 12.149922 18.460937 11.919922 18.460938 z M 8.75 20.160156 C 8.52 20.160156 8.3201565 20.240386 8.1601562 20.400391 C 8.0001562 20.560391 7.9199219 20.760469 7.9199219 20.980469 C 7.9199219 21.220469 8.0001559 21.419844 8.1601562 21.589844 C 8.3201565 21.759844 8.51 21.839844 8.75 21.839844 C 8.98 21.839844 9.1798435 21.759844 9.3398438 21.589844 C 9.4998438 21.419844 9.5800781 21.220469 9.5800781 20.980469 C 9.5800781 20.750469 9.4998441 20.560391 9.3398438 20.400391 C 9.1798435 20.240391 8.99 20.160156 8.75 20.160156 z M 15.150391 20.160156 C 14.910391 20.160156 14.720547 20.240386 14.560547 20.400391 C 14.400547 20.560391 14.320313 20.760469 14.320312 20.980469 C 14.320312 21.220469 14.400552 21.419844 14.560547 21.589844 C 14.720547 21.759844 14.920391 21.839844 15.150391 21.839844 C 15.380391 21.839844 15.580234 21.759844 15.740234 21.589844 C 15.900234 21.419844 15.980469 21.220469 15.980469 20.980469 C 15.980469 20.750469 15.900229 20.560391 15.740234 20.400391 C 15.580234 20.240391 15.390391 20.160156 15.150391 20.160156 z M 11.919922 22.050781 C 11.689922 22.050781 11.499844 22.130781 11.339844 22.300781 C 11.179844 22.470781 11.099609 22.670391 11.099609 22.900391 C 11.099609 23.120391 11.179849 23.32 11.339844 23.5 C 11.499844 23.66 11.699922 23.740234 11.919922 23.740234 C 12.159922 23.740234 12.359531 23.660004 12.519531 23.5 C 12.679531 23.34 12.769531 23.140391 12.769531 22.900391 C 12.769531 22.670391 12.689531 22.470781 12.519531 22.300781 C 12.349531 22.130781 12.149922 22.050781 11.919922 22.050781 z M 8.7304688 23.789062 C 8.5004687 23.789062 8.300625 23.869532 8.140625 24.019531 C 8.000625 24.169531 7.9199219 24.369375 7.9199219 24.609375 C 7.9199219 24.819375 8.000156 25.009688 8.1601562 25.179688 C 8.3401562 25.339688 8.5302344 25.419922 8.7402344 25.419922 C 8.9802344 25.419922 9.1700781 25.339452 9.3300781 25.189453 C 9.4900781 25.029453 9.5605469 24.839375 9.5605469 24.609375 C 9.5605469 24.369375 9.4803129 24.179531 9.3203125 24.019531 C 9.1603125 23.859531 8.9704685 23.789062 8.7304688 23.789062 z M 15.140625 23.789062 C 14.900625 23.789062 14.699064 23.869292 14.539062 24.029297 C 14.399064 24.179297 14.320315 24.379375 14.320312 24.609375 C 14.320312 24.819375 14.400782 25.009688 14.550781 25.179688 C 14.730781 25.339688 14.930391 25.419922 15.150391 25.419922 C 15.390391 25.419922 15.580234 25.339452 15.740234 25.189453 C 15.900234 25.029453 15.970703 24.839375 15.970703 24.609375 C 15.970703 24.369375 15.890473 24.179531 15.730469 24.019531 C 15.570469 23.859531 15.380625 23.789062 15.140625 23.789062 z M 11.919922 25.710938 C 11.699922 25.710938 11.509844 25.790937 11.339844 25.960938 C 11.179844 26.130938 11.099609 26.330547 11.099609 26.560547 C 11.099609 26.780547 11.179849 26.970859 11.339844 27.130859 C 11.509844 27.300859 11.699922 27.380859 11.919922 27.380859 C 12.159922 27.380859 12.359531 27.300389 12.519531 27.150391 C 12.689531 26.990391 12.769531 26.800547 12.769531 26.560547 C 12.769531 26.320547 12.689531 26.120936 12.519531 25.960938 C 12.349531 25.790937 12.149922 25.710938 11.919922 25.710938 z " class="frozenPrecip" /><path id="path879" d="M 17.769531 0.93945312 C 17.539531 0.93945312 17.339922 1.0292187 17.169922 1.1992188 C 16.999922 1.3692187 16.910156 1.5707814 16.910156 1.8007812 L 16.910156 3.8398438 L 16.900391 3.8398438 C 16.900391 4.0698438 16.980391 4.2699219 17.150391 4.4199219 C 17.320391 4.5699219 17.519766 4.6503906 17.759766 4.6503906 C 17.999766 4.6503906 18.189609 4.5699216 18.349609 4.4199219 C 18.509609 4.2599219 18.580078 4.0698438 18.580078 3.8398438 L 18.580078 1.8007812 C 18.580078 1.5607814 18.499848 1.3594531 18.339844 1.1894531 C 18.179844 1.0194531 17.999531 0.93945313 17.769531 0.93945312 z M 24.679688 3.8007812 C 24.459688 3.8007812 24.269609 3.8807813 24.099609 4.0507812 L 22.669922 5.5097656 C 22.499922 5.6697656 22.419922 5.869375 22.419922 6.109375 C 22.419922 6.339375 22.499922 6.5392187 22.669922 6.6992188 C 22.819922 6.8592188 23.010469 6.9409375 23.230469 6.9609375 C 23.450469 6.9809375 23.659609 6.8892185 23.849609 6.6992188 L 25.279297 5.2695312 C 25.459297 5.0895313 25.539063 4.8901563 25.539062 4.6601562 C 25.539062 4.4201562 25.449302 4.2207814 25.279297 4.0507812 C 25.109297 3.8807813 24.909687 3.8007813 24.679688 3.8007812 z M 10.849609 3.8300781 C 10.599609 3.8300781 10.390703 3.9100781 10.220703 4.0800781 C 10.050703 4.2400781 9.9707031 4.4396875 9.9707031 4.6796875 C 9.9707031 4.9196875 10.050937 5.1195313 10.210938 5.2695312 L 10.869141 5.9296875 C 11.029141 6.0896875 11.210391 6.1796875 11.400391 6.1796875 C 11.610391 6.2096875 11.809766 6.1409375 12.009766 5.9609375 C 12.209766 5.7809375 12.310547 5.5700781 12.310547 5.3300781 C 12.310547 5.0900781 12.230317 4.8694531 12.070312 4.6894531 L 11.429688 4.0800781 C 11.279685 3.9100781 11.089609 3.8300781 10.849609 3.8300781 z M 17.769531 6.3808594 C 16.588304 6.3808594 15.554792 6.7228405 14.667969 7.4003906 C 15.209558 7.7106152 15.687592 8.0584038 16.125 8.4785156 C 16.620944 8.2163004 17.164509 8.0703125 17.769531 8.0703125 C 18.739531 8.0703125 19.57 8.419375 20.25 9.109375 C 20.94 9.799375 21.279297 10.639609 21.279297 11.599609 C 21.279297 11.882727 21.240817 12.166052 21.169922 12.447266 C 21.687376 12.933995 22.095291 13.419895 22.4375 13.949219 C 22.798278 13.239005 23 12.457648 23 11.599609 C 23 10.659609 22.770781 9.7902344 22.300781 8.9902344 C 21.830781 8.1902344 21.190625 7.5500781 20.390625 7.0800781 C 19.590625 6.6100781 18.709531 6.3808594 17.769531 6.3808594 z M 25.550781 10.75 C 25.310781 10.75 25.109686 10.83 24.929688 11 C 24.749688 11.17 24.669922 11.369609 24.669922 11.599609 C 24.669922 11.839609 24.759692 12.029453 24.929688 12.189453 C 25.099688 12.369453 25.310781 12.460937 25.550781 12.460938 L 27.570312 12.460938 C 27.800314 12.460938 27.999922 12.380937 28.169922 12.210938 C 28.339922 12.040938 28.419922 11.839609 28.419922 11.599609 C 28.419922 11.359609 28.339922 11.16 28.169922 11 C 27.999922 10.84 27.800314 10.75 27.570312 10.75 L 25.550781 10.75 z M 24.060547 17.060547 C 23.830547 17.060547 23.630703 17.140547 23.470703 17.310547 C 23.300703 17.470547 23.220703 17.670156 23.220703 17.910156 C 23.220703 18.160156 23.300933 18.369297 23.460938 18.529297 L 24.099609 19.160156 C 24.339609 19.320156 24.560234 19.400391 24.740234 19.400391 C 24.950234 19.400391 25.130781 19.310621 25.300781 19.140625 C 25.470781 18.970625 25.550781 18.759297 25.550781 18.529297 C 25.550781 18.299297 25.459062 18.109219 25.289062 17.949219 L 24.669922 17.300781 C 24.489922 17.140781 24.290547 17.060547 24.060547 17.060547 z " class="light" /><path d="m 11.210938,7.4492188 c -1.410001,0 -2.6502349,0.4405468 -3.7402349,1.3105468 -1.09,0.87 -1.7798437,1.9898434 -2.0898437,3.3398434 -1.12,0.28 -2.0302344,0.86 -2.7402344,1.75 -0.71,0.9 -1.0605469,1.920078 -1.0605469,3.080079 0,0.859999 0.210625,1.670156 0.640625,2.410156 0.42,0.74 1.0002344,1.341015 1.7402344,1.791015 0.73,0.45 1.5384375,0.688985 2.3984375,0.708985 0.11,0 0.1699219,-0.05992 0.1699219,-0.169922 v -1.330078 c 0,-0.12 -0.059922,-0.189453 -0.1699219,-0.189453 -0.85,-0.04 -1.5796875,-0.379532 -2.1796875,-1.019532 -0.6,-0.64 -0.9003906,-1.370937 -0.9003906,-2.210937 0,-0.82 0.2815625,-1.540156 0.8515625,-2.160156 0.57,-0.61 1.2596092,-0.970313 2.0996094,-1.070313 l 0.5292968,-0.05859 c 0.12,0 0.1796875,-0.06141 0.1796875,-0.191406 l 0.080078,-0.509765 c 0.1100001,-1.09 0.5613282,-2.000469 1.3613282,-2.730469 0.8,-0.7300005 1.7496096,-1.089844 2.8496096,-1.089844 1.09,0 2.039609,0.3598436 2.849609,1.089844 0.82,0.73 1.280859,1.631172 1.38086,2.701172 l 0.06836,0.580078 c 0,0.11 0.05992,0.169922 0.169922,0.169922 h 1.611328 c 0.9,0 1.668594,0.318984 2.308594,0.958984 0.64,0.64 0.960937,1.401016 0.960937,2.291016 0,0.84 -0.300391,1.568984 -0.90039,2.208984 -0.600001,0.63 -1.329922,0.971484 -2.169922,1.021484 -0.12,0 -0.189453,0.05945 -0.189454,0.189453 v 1.330079 c 0,0.11 0.05945,0.169921 0.189454,0.169921 1.33,-0.04 2.450859,-0.539999 3.380859,-1.5 0.93,-0.96 1.388672,-2.090156 1.388672,-3.410156 0,-0.711087 -0.12755,-1.340263 -0.380859,-1.910156 C 21.584533,14.387348 21.201675,13.880191 20.65625,13.34375 19.726909,12.45499 18.609347,12 17.300781,12 h -0.320312 c -0.29645,-1.156153 -0.848138,-2.1250746 -1.652344,-2.9101562 -0.001,-9.586e-4 -0.0029,-9.956e-4 -0.0039,-0.00195 C 14.861063,8.6650066 14.331722,8.3352975 13.666016,8 12.916923,7.6387274 12.098916,7.4492187 11.210938,7.4492188 Z" id="path875" class="cloud" /> </g>'

chancerain2 = '<g transform="scale(2) translate(1,0)"> <path id="chancerain" id="path879" d="M 17.75 0.93945312 C 17.52 0.93945312 17.320391 1.0292227 17.150391 1.1992188 C 16.980391 1.3692187 16.890625 1.5707812 16.890625 1.8007812 L 16.890625 3.8398438 L 16.880859 3.8398438 C 16.880859 4.0698438 16.960859 4.2699219 17.130859 4.4199219 C 17.300859 4.5699219 17.500234 4.6503906 17.740234 4.6503906 C 17.980234 4.6503906 18.170078 4.5699209 18.330078 4.4199219 C 18.490078 4.2599219 18.560547 4.0698438 18.560547 3.8398438 L 18.560547 1.8007812 C 18.560547 1.5607813 18.480317 1.3594531 18.320312 1.1894531 C 18.160312 1.0194531 17.98 0.93945312 17.75 0.93945312 z M 24.660156 3.8007812 C 24.440156 3.8007812 24.250078 3.8807813 24.080078 4.0507812 L 22.650391 5.5097656 C 22.480391 5.6697656 22.400391 5.869375 22.400391 6.109375 C 22.400391 6.339375 22.480391 6.5392187 22.650391 6.6992188 C 22.800391 6.8592188 22.990938 6.9409375 23.210938 6.9609375 C 23.430937 6.9809375 23.640078 6.8892167 23.830078 6.6992188 L 25.259766 5.2695312 C 25.439766 5.0895313 25.519532 4.8901563 25.519531 4.6601562 C 25.519531 4.4201562 25.429771 4.2207812 25.259766 4.0507812 C 25.089766 3.8807813 24.890156 3.8007812 24.660156 3.8007812 z M 10.830078 3.8300781 C 10.580078 3.8300781 10.371172 3.9100781 10.201172 4.0800781 C 10.031172 4.2400781 9.9511719 4.4396875 9.9511719 4.6796875 C 9.9511719 4.9196875 10.031401 5.1195313 10.191406 5.2695312 L 10.849609 5.9296875 C 11.009609 6.0896875 11.190859 6.1796875 11.380859 6.1796875 C 11.590859 6.2096875 11.790234 6.1409375 11.990234 5.9609375 C 12.190234 5.7809375 12.291016 5.5700781 12.291016 5.3300781 C 12.291016 5.0900781 12.210786 4.8694531 12.050781 4.6894531 L 11.410156 4.0800781 C 11.260154 3.9100781 11.070078 3.8300781 10.830078 3.8300781 z M 17.75 6.3808594 C 16.568773 6.3808594 15.53526 6.7228393 14.648438 7.4003906 C 15.190027 7.7106146 15.668061 8.0584036 16.105469 8.4785156 C 16.601413 8.2162996 17.144978 8.0703125 17.75 8.0703125 C 18.72 8.0703125 19.550469 8.419375 20.230469 9.109375 C 20.920469 9.799375 21.259766 10.639609 21.259766 11.599609 C 21.259766 11.882727 21.221286 12.166052 21.150391 12.447266 C 21.667845 12.933995 22.07576 13.419895 22.417969 13.949219 C 22.778747 13.239005 22.980469 12.457648 22.980469 11.599609 C 22.980469 10.659609 22.75125 9.7902344 22.28125 8.9902344 C 21.81125 8.1902344 21.171094 7.5500784 20.371094 7.0800781 C 19.571094 6.6100781 18.69 6.3808594 17.75 6.3808594 z M 25.53125 10.75 C 25.29125 10.75 25.090155 10.83 24.910156 11 C 24.730156 11.17 24.650391 11.369609 24.650391 11.599609 C 24.650391 11.839609 24.74016 12.029453 24.910156 12.189453 C 25.080156 12.369453 25.29125 12.460937 25.53125 12.460938 L 27.550781 12.460938 C 27.780782 12.460938 27.980391 12.380937 28.150391 12.210938 C 28.320391 12.040938 28.400391 11.839609 28.400391 11.599609 C 28.400391 11.359609 28.320391 11.16 28.150391 11 C 27.980391 10.84 27.780783 10.75 27.550781 10.75 L 25.53125 10.75 z M 24.041016 17.060547 C 23.811016 17.060547 23.611172 17.140547 23.451172 17.310547 C 23.281172 17.470547 23.201172 17.670156 23.201172 17.910156 C 23.201172 18.160156 23.281401 18.369297 23.441406 18.529297 L 24.080078 19.160156 C 24.320078 19.320156 24.540703 19.400391 24.720703 19.400391 C 24.930703 19.400391 25.11125 19.310621 25.28125 19.140625 C 25.45125 18.970625 25.53125 18.759297 25.53125 18.529297 C 25.53125 18.299297 25.43953 18.109219 25.269531 17.949219 L 24.650391 17.300781 C 24.470391 17.140781 24.271016 17.060547 24.041016 17.060547 z " class="light" /><path d="m 11.19086,7.449375 c -1.410001,0 -2.650235,0.440547 -3.740235,1.310547 -1.09,0.87 -1.779844,1.989843 -2.089844,3.339843 -1.12,0.28 -2.030234,0.86 -2.740234,1.75 -0.71,0.9 -1.060547,1.920078 -1.060547,3.080079 0,0.859999 0.210625,1.670156 0.640625,2.410156 0.42,0.74 1.000235,1.341015 1.740235,1.791015 0.73,0.45 1.538437,0.688985 2.398437,0.708985 0.11,0 0.169922,-0.05992 0.169922,-0.169922 V 20.34 c 0,-0.12 -0.05992,-0.189453 -0.169922,-0.189453 -0.85,-0.04 -1.579687,-0.379532 -2.179687,-1.019532 -0.6,-0.64 -0.900391,-1.370937 -0.900391,-2.210937 0,-0.82 0.281562,-1.540156 0.851562,-2.160156 0.57,-0.61 1.25961,-0.970313 2.09961,-1.070313 l 0.529297,-0.05859 c 0.12,0 0.179687,-0.06141 0.179687,-0.191406 l 0.08008,-0.509765 c 0.11,-1.09 0.561328,-2.000469 1.361328,-2.730469 0.8,-0.730001 1.74961,-1.089844 2.84961,-1.089844 1.09,0 2.039609,0.359844 2.849609,1.089844 0.82,0.73 1.280859,1.631172 1.38086,2.701172 l 0.06836,0.580078 c 0,0.11 0.05992,0.169922 0.169922,0.169922 h 1.611328 c 0.9,0 1.668594,0.318984 2.308594,0.958984 0.64,0.64 0.960937,1.401016 0.960937,2.291016 0,0.84 -0.300391,1.568984 -0.90039,2.208984 -0.600001,0.63 -1.329922,0.971484 -2.169922,1.021484 -0.12,0 -0.189453,0.05945 -0.189454,0.189453 v 1.330079 c 0,0.11 0.05945,0.169921 0.189454,0.169921 1.33,-0.04 2.450859,-0.539999 3.380859,-1.5 0.93,-0.96 1.388672,-2.090156 1.388672,-3.410156 0,-0.711087 -0.12755,-1.340263 -0.380859,-1.910156 -0.313906,-0.612656 -0.696764,-1.119813 -1.242189,-1.656254 -0.929341,-0.88876 -2.046903,-1.34375 -3.355469,-1.34375 H 16.960393 C 16.663943,10.844003 16.112255,9.875081 15.308049,9.09 c -0.001,-9.59e-4 -0.0029,-9.96e-4 -0.0039,-0.002 C 14.840987,8.665113 14.311646,8.335403 13.64594,8.000106 12.896847,7.638833 12.07884,7.449325 11.190862,7.449325 Z" id="path875" class="cloud" /><path id="path884" d="M 9.2792969 16.972656 C 9.1667969 16.985156 9.0609375 17.020078 8.9609375 17.080078 C 8.7609375 17.200078 8.6398438 17.369609 8.5898438 17.599609 L 8.2890625 18.619141 C 8.2890625 18.699141 8.2792969 18.779375 8.2792969 18.859375 C 8.2792969 19.239375 8.4899219 19.500391 8.9199219 19.650391 C 9.1399219 19.730391 9.3505469 19.709609 9.5605469 19.599609 C 9.7705469 19.489609 9.9007031 19.310313 9.9707031 19.070312 L 10.210938 18.039062 C 10.280937 17.829063 10.260625 17.629922 10.140625 17.419922 C 10.030625 17.209922 9.8608594 17.07 9.6308594 17 C 9.5108594 16.97 9.3917969 16.960156 9.2792969 16.972656 z M 16.035156 17.033203 C 15.927656 17.043203 15.825469 17.075859 15.730469 17.130859 C 15.530469 17.240859 15.399844 17.410859 15.339844 17.630859 L 15.039062 18.689453 C 15.039062 18.769453 15.029297 18.849922 15.029297 18.919922 C 15.029297 19.079922 15.079688 19.240391 15.179688 19.400391 C 15.279687 19.560391 15.430859 19.670703 15.630859 19.720703 L 15.880859 19.75 C 16.070859 19.75 16.250391 19.690313 16.400391 19.570312 C 16.550391 19.450312 16.639688 19.289609 16.679688 19.099609 L 16.949219 18.109375 C 17.019219 17.869375 17.000859 17.660937 16.880859 17.460938 C 16.770859 17.260938 16.599141 17.130312 16.369141 17.070312 C 16.254141 17.035312 16.142656 17.023203 16.035156 17.033203 z M 11.841797 20.109375 C 11.728047 20.123125 11.619531 20.160703 11.519531 20.220703 C 11.319531 20.340703 11.190391 20.52 11.150391 20.75 L 10.869141 21.779297 C 10.849141 21.809297 10.849609 21.870938 10.849609 21.960938 C 10.849609 22.130938 10.899766 22.300703 11.009766 22.470703 C 11.119766 22.640703 11.270469 22.750313 11.480469 22.820312 C 11.710469 22.890313 11.919141 22.869531 12.119141 22.769531 C 12.309141 22.669531 12.449531 22.480937 12.519531 22.210938 L 12.759766 21.199219 C 12.829766 20.969219 12.809219 20.750781 12.699219 20.550781 C 12.589219 20.350781 12.419219 20.210625 12.199219 20.140625 C 12.074219 20.105625 11.955547 20.095625 11.841797 20.109375 z M 7.9453125 21.746094 C 7.8340625 21.759844 7.7308594 21.794609 7.6308594 21.849609 C 7.4308594 21.959609 7.3097656 22.150859 7.2597656 22.380859 L 6.9804688 23.369141 C 6.9804688 23.419141 6.9707031 23.490078 6.9707031 23.580078 C 6.9707031 23.760078 7.0208594 23.939375 7.1308594 24.109375 C 7.2408594 24.289375 7.3900781 24.400703 7.5800781 24.470703 C 7.7700781 24.540703 7.9794531 24.520156 8.1894531 24.410156 C 8.4094531 24.300156 8.5508594 24.119375 8.6308594 23.859375 L 8.8808594 22.810547 C 8.9508594 22.600547 8.9305469 22.399453 8.8105469 22.189453 C 8.6905469 21.979453 8.5207812 21.839531 8.3007812 21.769531 C 8.1757812 21.739531 8.0565625 21.732344 7.9453125 21.746094 z M 14.660156 21.814453 C 14.557656 21.825703 14.454609 21.859922 14.349609 21.919922 C 14.139609 22.039922 14.009453 22.209688 13.939453 22.429688 L 13.669922 23.449219 C 13.659922 23.469219 13.660391 23.499297 13.650391 23.529297 C 13.640391 23.559297 13.640859 23.589375 13.630859 23.609375 C 13.620859 23.629375 13.630859 23.659688 13.630859 23.679688 C 13.650859 24.059687 13.859766 24.329766 14.259766 24.509766 L 14.509766 24.550781 C 14.669766 24.550781 14.830469 24.500625 14.980469 24.390625 C 15.130469 24.280625 15.240781 24.120625 15.300781 23.890625 L 15.589844 22.880859 C 15.649844 22.640859 15.62 22.420703 15.5 22.220703 C 15.38 22.020703 15.200703 21.889609 14.970703 21.849609 C 14.865703 21.814609 14.762656 21.803203 14.660156 21.814453 z M 10.542969 24.904297 C 10.434219 24.915547 10.330469 24.949766 10.230469 25.009766 C 10.030469 25.129766 9.8900781 25.299531 9.8300781 25.519531 L 9.5507812 26.539062 C 9.5107812 26.629062 9.5 26.7 9.5 26.75 C 9.5 26.91 9.5599219 27.08 9.6699219 27.25 C 9.7799219 27.42 9.9501562 27.539375 10.160156 27.609375 C 10.170156 27.609375 10.199766 27.609141 10.259766 27.619141 C 10.319766 27.629141 10.370156 27.630859 10.410156 27.630859 C 10.550156 27.630859 10.669297 27.610547 10.779297 27.560547 C 10.969297 27.480547 11.109453 27.290469 11.189453 26.980469 L 11.460938 25.990234 C 11.530938 25.760234 11.510625 25.539844 11.390625 25.339844 C 11.270625 25.139844 11.100859 24.999453 10.880859 24.939453 C 10.765859 24.904453 10.651719 24.893047 10.542969 24.904297 z " class="precip" /></g>'

chancesleet2 = '<g transform="scale(2) translate(1,0)" id="chancesleet"> <path id="path872" d="M 17.759766 0.859375 C 17.529766 0.859375 17.330156 0.94914062 17.160156 1.1191406 C 16.990156 1.2891406 16.910156 1.4904688 16.910156 1.7304688 L 16.910156 3.7792969 C 16.910156 4.0192969 16.990156 4.220625 17.160156 4.390625 C 17.330156 4.560625 17.529766 4.6503906 17.759766 4.6503906 C 17.999766 4.6503906 18.199375 4.5703906 18.359375 4.4003906 C 18.519375 4.2303906 18.599609 4.0192969 18.599609 3.7792969 L 18.599609 1.7304688 C 18.599609 1.4904688 18.519375 1.279375 18.359375 1.109375 C 18.199375 0.939375 17.999766 0.859375 17.759766 0.859375 z M 24.740234 3.7695312 C 24.500234 3.7695312 24.310156 3.8495313 24.160156 4.0195312 L 22.720703 5.4707031 C 22.570703 5.6307031 22.490234 5.8303125 22.490234 6.0703125 C 22.490234 6.3203125 22.560703 6.5196875 22.720703 6.6796875 C 22.860703 6.8396875 23.039531 6.9194531 23.269531 6.9394531 C 23.499531 6.9494531 23.710391 6.8696875 23.900391 6.6796875 L 25.339844 5.2207031 C 25.509844 5.0607031 25.599609 4.8591406 25.599609 4.6191406 C 25.599609 4.3791406 25.519844 4.1795313 25.339844 4.0195312 C 25.179844 3.8495313 24.980234 3.7695312 24.740234 3.7695312 z M 10.779297 3.7792969 C 10.529297 3.7792969 10.320391 3.8595312 10.150391 4.0195312 C 9.9803906 4.1795312 9.9003906 4.3791406 9.9003906 4.6191406 C 9.9003906 4.8491406 9.9903906 5.0507031 10.150391 5.2207031 L 10.800781 5.8808594 C 10.960781 6.0408594 11.139609 6.1303906 11.349609 6.1503906 C 11.559609 6.1803906 11.760938 6.0999219 11.960938 5.9199219 C 12.160937 5.7399219 12.259766 5.5192969 12.259766 5.2792969 C 12.259766 5.0492969 12.179766 4.8496875 12.009766 4.6796875 L 11.380859 4.0195312 C 11.220859 3.8595312 11.019297 3.7792969 10.779297 3.7792969 z M 17.789062 6.3496094 C 16.607836 6.3496094 15.574323 6.6915906 14.6875 7.3691406 C 15.229089 7.6793646 15.707123 8.0271536 16.144531 8.4472656 C 16.640475 8.1850506 17.18404 8.0390625 17.789062 8.0390625 C 18.759062 8.0390625 19.589531 8.388125 20.269531 9.078125 C 20.959531 9.768125 21.298828 10.608359 21.298828 11.568359 C 21.298828 11.851477 21.260348 12.134802 21.189453 12.416016 C 21.706907 12.902745 22.114822 13.388645 22.457031 13.917969 C 22.817809 13.207755 23.019531 12.426398 23.019531 11.568359 C 23.019531 10.628359 22.790312 9.7589844 22.320312 8.9589844 C 21.850313 8.1589844 21.210156 7.5188281 20.410156 7.0488281 C 19.610156 6.5788281 18.729062 6.3496094 17.789062 6.3496094 z M 25.589844 10.769531 C 25.349844 10.769531 25.150469 10.849766 24.980469 11.009766 C 24.810469 11.169766 24.730469 11.369375 24.730469 11.609375 C 24.730469 11.849375 24.810234 12.049219 24.990234 12.199219 C 25.150234 12.379219 25.349844 12.470703 25.589844 12.470703 L 27.650391 12.470703 C 27.890391 12.470703 28.089766 12.390703 28.259766 12.220703 C 28.429766 12.050703 28.509766 11.849375 28.509766 11.609375 C 28.509766 11.369375 28.419766 11.169766 28.259766 11.009766 C 28.099766 10.849766 27.890391 10.769531 27.650391 10.769531 L 25.589844 10.769531 z M 24.109375 17.119141 C 23.879375 17.119141 23.679766 17.199141 23.509766 17.369141 C 23.339766 17.539141 23.259766 17.740469 23.259766 17.980469 C 23.259766 18.210469 23.349766 18.410078 23.509766 18.580078 L 24.160156 19.220703 C 24.340156 19.380703 24.539297 19.460938 24.779297 19.460938 L 24.800781 19.480469 C 25.020781 19.480469 25.199844 19.390703 25.339844 19.220703 C 25.509844 19.060703 25.599609 18.859141 25.599609 18.619141 C 25.599609 18.389141 25.519844 18.179766 25.339844 18.009766 L 24.720703 17.380859 C 24.540703 17.210859 24.339375 17.119141 24.109375 17.119141 z " class="light" /><path id="path862" d="M 8.5507812 20.330078 C 8.3107813 20.330078 8.1209375 20.400547 7.9609375 20.560547 C 7.8109375 20.720547 7.7304688 20.910391 7.7304688 21.150391 C 7.7304687 21.370391 7.8104687 21.560703 7.9804688 21.720703 C 8.1304688 21.880703 8.3207812 21.960938 8.5507812 21.960938 C 8.7907812 21.960938 8.990625 21.890469 9.140625 21.730469 C 9.290625 21.570469 9.3691406 21.380391 9.3691406 21.150391 C 9.3691406 20.910391 9.300625 20.720547 9.140625 20.560547 C 8.980625 20.410547 8.7907813 20.330078 8.5507812 20.330078 z M 15.099609 20.339844 C 14.859609 20.339844 14.669766 20.410312 14.509766 20.570312 C 14.359766 20.730313 14.279297 20.920156 14.279297 21.160156 C 14.279297 21.380156 14.359531 21.570703 14.519531 21.720703 C 14.669531 21.890703 14.869609 21.970703 15.099609 21.970703 C 15.339609 21.970703 15.529453 21.900234 15.689453 21.740234 C 15.839453 21.590234 15.919922 21.390156 15.919922 21.160156 C 15.919922 20.920156 15.849453 20.730313 15.689453 20.570312 C 15.529453 20.420313 15.339609 20.339844 15.099609 20.339844 z M 10.980469 23.419922 C 10.740469 23.419922 10.550625 23.490391 10.390625 23.650391 C 10.240625 23.800391 10.160156 24.000469 10.160156 24.230469 C 10.160156 24.450469 10.240391 24.640781 10.400391 24.800781 C 10.570391 24.970781 10.760469 25.050781 10.980469 25.050781 C 11.220469 25.050781 11.410312 24.980313 11.570312 24.820312 C 11.720313 24.660312 11.800781 24.470469 11.800781 24.230469 C 11.800781 24.000469 11.730313 23.810391 11.570312 23.650391 C 11.410312 23.500391 11.220469 23.419922 10.980469 23.419922 z " class="frozenPrecip" /><path id="path860" d="M 11.765625 20.158203 C 11.659375 20.171953 11.554219 20.209531 11.449219 20.269531 C 11.249219 20.389531 11.109063 20.570781 11.039062 20.800781 L 10.810547 21.699219 C 10.790547 21.779219 10.779297 21.870938 10.779297 21.960938 C 10.759297 22.110938 10.809688 22.259453 10.929688 22.439453 C 11.029688 22.599453 11.180859 22.700234 11.380859 22.740234 C 11.610859 22.800234 11.829531 22.789687 12.019531 22.679688 C 12.209531 22.569688 12.349687 22.379375 12.429688 22.109375 L 12.689453 21.210938 C 12.759453 20.990937 12.739141 20.789844 12.619141 20.589844 C 12.499141 20.389844 12.329844 20.259453 12.089844 20.189453 C 11.979844 20.154453 11.871875 20.144453 11.765625 20.158203 z M 7.8515625 22.613281 C 7.7378125 22.625781 7.6292969 22.660703 7.5292969 22.720703 C 7.3192969 22.840703 7.1891406 23.01 7.1191406 23.25 L 7.0292969 23.839844 C 7.0292969 23.869844 7.0197656 23.910937 7.0097656 23.960938 C 6.9997656 24.020937 6.9902344 24.059844 6.9902344 24.089844 C 6.9902344 24.259844 7.0403906 24.430078 7.1503906 24.580078 C 7.2503906 24.740078 7.399375 24.850156 7.609375 24.910156 C 7.629375 24.910156 7.6702344 24.909922 7.7402344 24.919922 C 7.8102344 24.929922 7.860625 24.929688 7.890625 24.929688 C 8.300625 24.929687 8.5503906 24.709531 8.6503906 24.269531 L 8.7890625 23.669922 C 8.8490625 23.459922 8.8307031 23.250781 8.7207031 23.050781 C 8.6007031 22.840781 8.4409375 22.710625 8.2109375 22.640625 C 8.0859375 22.610625 7.9653125 22.600781 7.8515625 22.613281 z M 14.380859 22.632812 C 14.267109 22.645312 14.160547 22.680234 14.060547 22.740234 C 13.850547 22.860234 13.720391 23.029531 13.650391 23.269531 L 13.560547 23.859375 C 13.560547 23.879375 13.560781 23.910703 13.550781 23.970703 C 13.540781 24.030703 13.539062 24.069609 13.539062 24.099609 C 13.539062 24.269609 13.589453 24.429609 13.689453 24.599609 C 13.789453 24.759609 13.940625 24.869688 14.140625 24.929688 C 14.160625 24.929688 14.199531 24.929453 14.269531 24.939453 C 14.339531 24.949453 14.389922 24.949219 14.419922 24.949219 C 14.829922 24.949219 15.079688 24.730781 15.179688 24.300781 L 15.320312 23.699219 C 15.390312 23.489219 15.37 23.280313 15.25 23.070312 C 15.14 22.870313 14.970234 22.730156 14.740234 22.660156 C 14.615234 22.630156 14.494609 22.620313 14.380859 22.632812 z M 10.265625 25.703125 C 10.160625 25.714375 10.054219 25.750547 9.9492188 25.810547 C 9.7492188 25.920547 9.6090625 26.090312 9.5390625 26.320312 L 9.4101562 26.900391 C 9.3801562 27.020391 9.3691406 27.090859 9.3691406 27.130859 C 9.3691406 27.300859 9.4192969 27.459141 9.5292969 27.619141 C 9.6392969 27.779141 9.7995313 27.889219 10.019531 27.949219 C 10.129531 27.979219 10.209766 27.990234 10.259766 27.990234 C 10.689766 27.990234 10.960547 27.790859 11.060547 27.380859 L 11.189453 26.789062 C 11.259453 26.539062 11.229375 26.309375 11.109375 26.109375 C 10.989375 25.909375 10.810078 25.780234 10.580078 25.740234 C 10.475078 25.705234 10.370625 25.691875 10.265625 25.703125 z " class="precip" /><path d="m 11.12086,7.519375 c -1.4100014,0 -2.6502354,0.440547 -3.7402354,1.310547 -1.09,0.87 -1.779843,1.989843 -2.089843,3.339843 -1.12,0.28 -2.030235,0.86 -2.740235,1.75 C 1.8405469,14.819765 1.49,15.839843 1.49,16.999844 1.49,17.859843 1.700625,18.67 2.130625,19.41 c 0.4199996,0.74 1.0002346,1.341015 1.7402346,1.791015 0.73,0.45 1.538437,0.688985 2.398437,0.708985 0.11,0 0.169922,-0.05992 0.169922,-0.169922 V 20.41 c 0,-0.12 -0.05992,-0.189453 -0.169922,-0.189453 -0.85,-0.04 -1.579687,-0.379532 -2.179687,-1.019532 -0.6,-0.64 -0.900391,-1.370937 -0.900391,-2.210937 0,-0.82 0.281563,-1.540156 0.851563,-2.160156 0.57,-0.61 1.259609,-0.970313 2.099609,-1.070313 l 0.529297,-0.05859 c 0.12,0 0.179687,-0.06141 0.179687,-0.191406 l 0.08008,-0.509765 c 0.110001,-1.09 0.561329,-2.000469 1.361329,-2.730469 0.8,-0.73 1.7496094,-1.089844 2.8496094,-1.089844 1.09,0 2.039609,0.359844 2.849609,1.089844 0.82,0.73 1.280859,1.631172 1.38086,2.701172 l 0.06836,0.580078 c 0,0.11 0.05992,0.169922 0.169922,0.169922 h 1.611328 c 0.9,0 1.668594,0.318984 2.308594,0.958984 0.64,0.64 0.960937,1.401016 0.960937,2.291016 0,0.84 -0.300391,1.568984 -0.90039,2.208984 -0.600001,0.63 -1.329922,0.971484 -2.169922,1.021484 -0.12,0 -0.189453,0.05945 -0.189454,0.189453 v 1.330079 c 0,0.11 0.05945,0.169921 0.189454,0.169921 1.33,-0.04 2.450859,-0.539999 3.380859,-1.5 0.93,-0.96 1.388672,-2.090156 1.388672,-3.410156 0,-0.711087 -0.12755,-1.340263 -0.380859,-1.910156 -0.313906,-0.612656 -0.696764,-1.119813 -1.242189,-1.656254 -0.929341,-0.88876 -2.046903,-1.34375 -3.355469,-1.34375 H 16.890393 C 16.593943,10.914003 16.042255,9.945082 15.238049,9.16 c -10e-4,-9.59e-4 -0.0029,-9.96e-4 -0.0039,-0.0019 C 14.770987,8.735213 14.241646,8.405504 13.57594,8.070206 12.826847,7.708934 12.00884,7.519425 11.120862,7.519425 Z" id="path875" class="cloud" /> </g>'

chancesnow2 = '<g transform="scale(2) translate(1,0)" id="chancesnow"> <path id="path893" d="M 11.919922 18.460938 C 11.689922 18.460938 11.499844 18.539218 11.339844 18.699219 C 11.179844 18.859219 11.099609 19.070781 11.099609 19.300781 C 11.099609 19.530781 11.179849 19.720859 11.339844 19.880859 C 11.499844 20.040859 11.699922 20.119141 11.919922 20.119141 C 12.159922 20.119141 12.359531 20.040861 12.519531 19.880859 C 12.689531 19.720859 12.769531 19.529063 12.769531 19.289062 C 12.769531 19.059062 12.689531 18.859219 12.519531 18.699219 C 12.349531 18.539219 12.149922 18.460937 11.919922 18.460938 z M 8.75 20.160156 C 8.52 20.160156 8.3201565 20.240386 8.1601562 20.400391 C 8.0001562 20.560391 7.9199219 20.760469 7.9199219 20.980469 C 7.9199219 21.220469 8.0001559 21.419844 8.1601562 21.589844 C 8.3201565 21.759844 8.51 21.839844 8.75 21.839844 C 8.98 21.839844 9.1798435 21.759844 9.3398438 21.589844 C 9.4998438 21.419844 9.5800781 21.220469 9.5800781 20.980469 C 9.5800781 20.750469 9.4998441 20.560391 9.3398438 20.400391 C 9.1798435 20.240391 8.99 20.160156 8.75 20.160156 z M 15.150391 20.160156 C 14.910391 20.160156 14.720547 20.240386 14.560547 20.400391 C 14.400547 20.560391 14.320313 20.760469 14.320312 20.980469 C 14.320312 21.220469 14.400552 21.419844 14.560547 21.589844 C 14.720547 21.759844 14.920391 21.839844 15.150391 21.839844 C 15.380391 21.839844 15.580234 21.759844 15.740234 21.589844 C 15.900234 21.419844 15.980469 21.220469 15.980469 20.980469 C 15.980469 20.750469 15.900229 20.560391 15.740234 20.400391 C 15.580234 20.240391 15.390391 20.160156 15.150391 20.160156 z M 11.919922 22.050781 C 11.689922 22.050781 11.499844 22.130781 11.339844 22.300781 C 11.179844 22.470781 11.099609 22.670391 11.099609 22.900391 C 11.099609 23.120391 11.179849 23.32 11.339844 23.5 C 11.499844 23.66 11.699922 23.740234 11.919922 23.740234 C 12.159922 23.740234 12.359531 23.660004 12.519531 23.5 C 12.679531 23.34 12.769531 23.140391 12.769531 22.900391 C 12.769531 22.670391 12.689531 22.470781 12.519531 22.300781 C 12.349531 22.130781 12.149922 22.050781 11.919922 22.050781 z M 8.7304688 23.789062 C 8.5004687 23.789062 8.300625 23.869532 8.140625 24.019531 C 8.000625 24.169531 7.9199219 24.369375 7.9199219 24.609375 C 7.9199219 24.819375 8.000156 25.009688 8.1601562 25.179688 C 8.3401562 25.339688 8.5302344 25.419922 8.7402344 25.419922 C 8.9802344 25.419922 9.1700781 25.339452 9.3300781 25.189453 C 9.4900781 25.029453 9.5605469 24.839375 9.5605469 24.609375 C 9.5605469 24.369375 9.4803129 24.179531 9.3203125 24.019531 C 9.1603125 23.859531 8.9704685 23.789062 8.7304688 23.789062 z M 15.140625 23.789062 C 14.900625 23.789062 14.699064 23.869292 14.539062 24.029297 C 14.399064 24.179297 14.320315 24.379375 14.320312 24.609375 C 14.320312 24.819375 14.400782 25.009688 14.550781 25.179688 C 14.730781 25.339688 14.930391 25.419922 15.150391 25.419922 C 15.390391 25.419922 15.580234 25.339452 15.740234 25.189453 C 15.900234 25.029453 15.970703 24.839375 15.970703 24.609375 C 15.970703 24.369375 15.890473 24.179531 15.730469 24.019531 C 15.570469 23.859531 15.380625 23.789062 15.140625 23.789062 z M 11.919922 25.710938 C 11.699922 25.710938 11.509844 25.790937 11.339844 25.960938 C 11.179844 26.130938 11.099609 26.330547 11.099609 26.560547 C 11.099609 26.780547 11.179849 26.970859 11.339844 27.130859 C 11.509844 27.300859 11.699922 27.380859 11.919922 27.380859 C 12.159922 27.380859 12.359531 27.300389 12.519531 27.150391 C 12.689531 26.990391 12.769531 26.800547 12.769531 26.560547 C 12.769531 26.320547 12.689531 26.120936 12.519531 25.960938 C 12.349531 25.790937 12.149922 25.710938 11.919922 25.710938 z " class="frozenPrecip" /><path id="path879" d="M 17.769531 0.93945312 C 17.539531 0.93945312 17.339922 1.0292187 17.169922 1.1992188 C 16.999922 1.3692187 16.910156 1.5707814 16.910156 1.8007812 L 16.910156 3.8398438 L 16.900391 3.8398438 C 16.900391 4.0698438 16.980391 4.2699219 17.150391 4.4199219 C 17.320391 4.5699219 17.519766 4.6503906 17.759766 4.6503906 C 17.999766 4.6503906 18.189609 4.5699216 18.349609 4.4199219 C 18.509609 4.2599219 18.580078 4.0698438 18.580078 3.8398438 L 18.580078 1.8007812 C 18.580078 1.5607814 18.499848 1.3594531 18.339844 1.1894531 C 18.179844 1.0194531 17.999531 0.93945313 17.769531 0.93945312 z M 24.679688 3.8007812 C 24.459688 3.8007812 24.269609 3.8807813 24.099609 4.0507812 L 22.669922 5.5097656 C 22.499922 5.6697656 22.419922 5.869375 22.419922 6.109375 C 22.419922 6.339375 22.499922 6.5392187 22.669922 6.6992188 C 22.819922 6.8592188 23.010469 6.9409375 23.230469 6.9609375 C 23.450469 6.9809375 23.659609 6.8892185 23.849609 6.6992188 L 25.279297 5.2695312 C 25.459297 5.0895313 25.539063 4.8901563 25.539062 4.6601562 C 25.539062 4.4201562 25.449302 4.2207814 25.279297 4.0507812 C 25.109297 3.8807813 24.909687 3.8007813 24.679688 3.8007812 z M 10.849609 3.8300781 C 10.599609 3.8300781 10.390703 3.9100781 10.220703 4.0800781 C 10.050703 4.2400781 9.9707031 4.4396875 9.9707031 4.6796875 C 9.9707031 4.9196875 10.050937 5.1195313 10.210938 5.2695312 L 10.869141 5.9296875 C 11.029141 6.0896875 11.210391 6.1796875 11.400391 6.1796875 C 11.610391 6.2096875 11.809766 6.1409375 12.009766 5.9609375 C 12.209766 5.7809375 12.310547 5.5700781 12.310547 5.3300781 C 12.310547 5.0900781 12.230317 4.8694531 12.070312 4.6894531 L 11.429688 4.0800781 C 11.279685 3.9100781 11.089609 3.8300781 10.849609 3.8300781 z M 17.769531 6.3808594 C 16.588304 6.3808594 15.554792 6.7228405 14.667969 7.4003906 C 15.209558 7.7106152 15.687592 8.0584038 16.125 8.4785156 C 16.620944 8.2163004 17.164509 8.0703125 17.769531 8.0703125 C 18.739531 8.0703125 19.57 8.419375 20.25 9.109375 C 20.94 9.799375 21.279297 10.639609 21.279297 11.599609 C 21.279297 11.882727 21.240817 12.166052 21.169922 12.447266 C 21.687376 12.933995 22.095291 13.419895 22.4375 13.949219 C 22.798278 13.239005 23 12.457648 23 11.599609 C 23 10.659609 22.770781 9.7902344 22.300781 8.9902344 C 21.830781 8.1902344 21.190625 7.5500781 20.390625 7.0800781 C 19.590625 6.6100781 18.709531 6.3808594 17.769531 6.3808594 z M 25.550781 10.75 C 25.310781 10.75 25.109686 10.83 24.929688 11 C 24.749688 11.17 24.669922 11.369609 24.669922 11.599609 C 24.669922 11.839609 24.759692 12.029453 24.929688 12.189453 C 25.099688 12.369453 25.310781 12.460937 25.550781 12.460938 L 27.570312 12.460938 C 27.800314 12.460938 27.999922 12.380937 28.169922 12.210938 C 28.339922 12.040938 28.419922 11.839609 28.419922 11.599609 C 28.419922 11.359609 28.339922 11.16 28.169922 11 C 27.999922 10.84 27.800314 10.75 27.570312 10.75 L 25.550781 10.75 z M 24.060547 17.060547 C 23.830547 17.060547 23.630703 17.140547 23.470703 17.310547 C 23.300703 17.470547 23.220703 17.670156 23.220703 17.910156 C 23.220703 18.160156 23.300933 18.369297 23.460938 18.529297 L 24.099609 19.160156 C 24.339609 19.320156 24.560234 19.400391 24.740234 19.400391 C 24.950234 19.400391 25.130781 19.310621 25.300781 19.140625 C 25.470781 18.970625 25.550781 18.759297 25.550781 18.529297 C 25.550781 18.299297 25.459062 18.109219 25.289062 17.949219 L 24.669922 17.300781 C 24.489922 17.140781 24.290547 17.060547 24.060547 17.060547 z " class="light" /><path d="m 11.210938,7.4492188 c -1.410001,0 -2.6502349,0.4405468 -3.7402349,1.3105468 -1.09,0.87 -1.7798437,1.9898434 -2.0898437,3.3398434 -1.12,0.28 -2.0302344,0.86 -2.7402344,1.75 -0.71,0.9 -1.0605469,1.920078 -1.0605469,3.080079 0,0.859999 0.210625,1.670156 0.640625,2.410156 0.42,0.74 1.0002344,1.341015 1.7402344,1.791015 0.73,0.45 1.5384375,0.688985 2.3984375,0.708985 0.11,0 0.1699219,-0.05992 0.1699219,-0.169922 v -1.330078 c 0,-0.12 -0.059922,-0.189453 -0.1699219,-0.189453 -0.85,-0.04 -1.5796875,-0.379532 -2.1796875,-1.019532 -0.6,-0.64 -0.9003906,-1.370937 -0.9003906,-2.210937 0,-0.82 0.2815625,-1.540156 0.8515625,-2.160156 0.57,-0.61 1.2596092,-0.970313 2.0996094,-1.070313 l 0.5292968,-0.05859 c 0.12,0 0.1796875,-0.06141 0.1796875,-0.191406 l 0.080078,-0.509765 c 0.1100001,-1.09 0.5613282,-2.000469 1.3613282,-2.730469 0.8,-0.7300005 1.7496096,-1.089844 2.8496096,-1.089844 1.09,0 2.039609,0.3598436 2.849609,1.089844 0.82,0.73 1.280859,1.631172 1.38086,2.701172 l 0.06836,0.580078 c 0,0.11 0.05992,0.169922 0.169922,0.169922 h 1.611328 c 0.9,0 1.668594,0.318984 2.308594,0.958984 0.64,0.64 0.960937,1.401016 0.960937,2.291016 0,0.84 -0.300391,1.568984 -0.90039,2.208984 -0.600001,0.63 -1.329922,0.971484 -2.169922,1.021484 -0.12,0 -0.189453,0.05945 -0.189454,0.189453 v 1.330079 c 0,0.11 0.05945,0.169921 0.189454,0.169921 1.33,-0.04 2.450859,-0.539999 3.380859,-1.5 0.93,-0.96 1.388672,-2.090156 1.388672,-3.410156 0,-0.711087 -0.12755,-1.340263 -0.380859,-1.910156 C 21.584533,14.387348 21.201675,13.880191 20.65625,13.34375 19.726909,12.45499 18.609347,12 17.300781,12 h -0.320312 c -0.29645,-1.156153 -0.848138,-2.1250746 -1.652344,-2.9101562 -0.001,-9.586e-4 -0.0029,-9.956e-4 -0.0039,-0.00195 C 14.861063,8.6650066 14.331722,8.3352975 13.666016,8 12.916923,7.6387274 12.098916,7.4492187 11.210938,7.4492188 Z" id="path875"class="cloud" /> </g>'

chancetstorms2 = '<g transform="scale(2) translate(1,0)" id="chancetstorms"> <path id="path851" d="M 19.419922 17 C 19.249922 17 19.089687 17.05039 18.929688 17.150391 C 18.769686 17.250391 18.659609 17.410859 18.599609 17.630859 L 18.330078 18.640625 C 18.320078 18.720625 18.310547 18.789375 18.310547 18.859375 C 18.300547 19.019375 18.350936 19.170078 18.460938 19.330078 C 18.570936 19.490078 18.729219 19.610938 18.949219 19.710938 C 19.029219 19.750937 19.110937 19.769531 19.210938 19.769531 C 19.320936 19.769531 19.430781 19.739453 19.550781 19.689453 C 19.760781 19.589453 19.900234 19.399141 19.990234 19.119141 L 20.279297 18.089844 C 20.299297 17.959844 20.310547 17.889141 20.310547 17.869141 C 20.310547 17.699141 20.260387 17.540859 20.150391 17.380859 C 20.040391 17.220859 19.880156 17.110781 19.660156 17.050781 C 19.640156 17.050781 19.600786 17.039297 19.550781 17.029297 C 19.490781 16.999297 19.449922 17 19.419922 17 z M 15.126953 20.091797 C 15.019453 20.104297 14.915547 20.139217 14.810547 20.199219 C 14.600547 20.319219 14.470391 20.490703 14.400391 20.720703 L 14.160156 21.730469 C 14.140156 21.900469 14.130859 21.99 14.130859 22 C 14.130859 22.14 14.179299 22.289453 14.279297 22.439453 C 14.379297 22.589453 14.530469 22.699531 14.730469 22.769531 C 14.950469 22.839531 15.169141 22.830703 15.369141 22.720703 C 15.569141 22.610703 15.699531 22.439219 15.769531 22.199219 L 16.070312 21.160156 C 16.130312 20.940156 16.100234 20.729297 15.990234 20.529297 C 15.870234 20.329297 15.690937 20.189141 15.460938 20.119141 C 15.345937 20.089141 15.234453 20.079297 15.126953 20.091797 z M 17.941406 21.787109 C 17.827656 21.800859 17.719141 21.835629 17.619141 21.890625 C 17.419141 22.010625 17.29 22.189922 17.25 22.419922 L 16.980469 23.449219 C 16.960469 23.509219 16.949219 23.580391 16.949219 23.650391 C 16.949219 23.820391 16.999379 23.990156 17.109375 24.160156 C 17.219375 24.330156 17.380078 24.439766 17.580078 24.509766 C 17.600078 24.509766 17.639218 24.519267 17.699219 24.529297 C 17.749219 24.539297 17.79031 24.550781 17.820312 24.550781 C 17.950312 24.550781 18.079219 24.530703 18.199219 24.470703 C 18.389219 24.400703 18.529375 24.210391 18.609375 23.900391 L 18.859375 22.890625 C 18.929375 22.660625 18.910781 22.440469 18.800781 22.230469 C 18.690781 22.020469 18.520781 21.880547 18.300781 21.810547 C 18.175781 21.780547 18.055156 21.773359 17.941406 21.787109 z M 13.796875 24.873047 C 13.691875 24.885547 13.590234 24.920467 13.490234 24.980469 C 13.290234 25.100469 13.150078 25.269766 13.080078 25.509766 L 12.810547 26.509766 C 12.800547 26.679766 12.789072 26.769531 12.789062 26.769531 C 12.789062 26.929531 12.839452 27.080469 12.939453 27.230469 C 13.039453 27.380469 13.200391 27.490781 13.400391 27.550781 C 13.540391 27.580781 13.620391 27.599609 13.650391 27.599609 C 13.740391 27.599609 13.859297 27.57 14.029297 27.5 C 14.239297 27.41 14.379219 27.230469 14.449219 26.980469 L 14.730469 25.929688 C 14.790469 25.709688 14.770391 25.500781 14.650391 25.300781 C 14.530391 25.100781 14.359141 24.970391 14.119141 24.900391 C 14.009141 24.870391 13.901875 24.860547 13.796875 24.873047 z " class="precip" /><path d="m 10.109375,17.070312 c -0.09,0 -0.16875,0.05063 -0.21875,0.140626 l -0.4648438,1.220703 0.00977,0.0039 -0.5253907,1.357422 -0.109375,0.287109 c -6.073e-4,-1.54e-4 -0.00135,1.54e-4 -0.00195,0 l -1.21875,3.146484 -0.00195,-0.002 -0.048828,0.125 c -0.03,0.14 0.020625,0.220703 0.140625,0.220703 h 2.1308593 l -1.0410156,3.779297 h 0.2792969 l 3.9707035,-5.21875 c 0.04,-0.04 0.03953,-0.09062 0.01953,-0.140625 -0.02,-0.05 -0.06867,-0.07031 -0.138672,-0.07031 h -2.179687 l 2.478515,-4.640625 c 0.06,-0.14 0.02133,-0.208985 -0.138672,-0.208985 z" id="path845" class="light" /><path d="m 14.279297,7.4492188 c -1.41,0 -2.669766,0.4405468 -3.759766,1.3105468 -1.0899997,0.87 -1.7896091,1.9893754 -2.0996091,3.3593754 -1.1,0.26 -2.0104688,0.830468 -2.7304688,1.730468 -0.72,0.9 -1.0585937,1.910547 -1.0585937,3.060547 0,1.11 0.3282812,2.100703 0.9882812,2.970703 0.4540835,0.598565 1.0053645,1.05874 1.6425782,1.398438 L 7.8789062,19.683594 C 7.5628725,19.484848 7.2780839,19.232229 7.0292969,18.919922 c -0.47,-0.59 -0.6992188,-1.259766 -0.6992188,-2.009766 0,-0.83 0.2798438,-1.550156 0.8398438,-2.160156 0.56,-0.61 1.2596094,-0.960547 2.0996093,-1.060547 l 0.5195313,-0.07031 c 0.13,0 0.2011719,-0.05992 0.2011719,-0.169922 l 0.070313,-0.519531 c 0.1,-1.080001 0.549375,-1.988751 1.359375,-2.71875 0.81,-0.7300005 1.759609,-1.101563 2.849609,-1.101563 1.09,0 2.03961,0.3715625 2.84961,1.101563 0.82,0.73 1.28039,1.638749 1.40039,2.71875 l 0.06055,0.580078 c 0,0.12 0.05945,0.179687 0.189453,0.179687 h 1.611328 c 0.91,0 1.67836,0.321172 2.31836,0.951172 0.64,0.63 0.960937,1.389297 0.960937,2.279297 0,0.85 -0.300625,1.590937 -0.890625,2.210937 -0.59,0.62 -1.319453,0.959297 -2.189453,1.029297 -0.13,0 -0.199219,0.05945 -0.199219,0.189453 v 1.371094 c 0,0.11 0.06922,0.169922 0.199219,0.169922 0.65,-0.02 1.269375,-0.171406 1.859375,-0.441406 0.59,-0.27 1.101484,-0.62836 1.521485,-1.06836 0.42,-0.44 0.759765,-0.960312 1.009765,-1.570312 0.25,-0.6 0.378906,-1.23086 0.378906,-1.880859 0,-0.9 -0.219921,-1.730235 -0.669921,-2.490235 -0.45,-0.76 -1.050547,-1.358828 -1.810547,-1.798828 -0.76,-0.44 -1.588516,-0.660156 -2.478516,-0.660156 h -0.320313 c -0.329999,-1.33 -1.029375,-2.4197659 -2.109374,-3.2597659 -1.080001,-0.84 -2.301641,-1.2714843 -3.681641,-1.2714843 z" id="path2" class="cloud" /> </g>'

clear2 = '<g transform="scale(2) translate(1,0)" id="clear"> <path d="M7.91,14.48c0-0.96,0.19-1.87,0.56-2.75s0.88-1.63,1.51-2.26c0.63-0.63,1.39-1.14,2.27-1.52c0.88-0.38,1.8-0.57,2.75-0.57  h1.14c0.16,0.04,0.23,0.14,0.23,0.28l0.05,0.88c0.04,1.27,0.49,2.35,1.37,3.24c0.88,0.89,1.94,1.37,3.19,1.42l0.82,0.07  c0.16,0,0.24,0.08,0.24,0.23v0.98c0.01,1.28-0.3,2.47-0.93,3.56c-0.63,1.09-1.48,1.95-2.57,2.59c-1.08,0.63-2.27,0.95-3.55,0.95  c-0.97,0-1.9-0.19-2.78-0.56s-1.63-0.88-2.26-1.51c-0.63-0.63-1.13-1.39-1.5-2.26C8.1,16.37,7.91,15.45,7.91,14.48z M9.74,14.48  c0,0.76,0.15,1.48,0.45,2.16c0.3,0.67,0.7,1.24,1.19,1.7c0.49,0.46,1.05,0.82,1.69,1.08c0.63,0.27,1.28,0.4,1.94,0.4  c0.58,0,1.17-0.11,1.76-0.34c0.59-0.23,1.14-0.55,1.65-0.96c0.51-0.41,0.94-0.93,1.31-1.57c0.37-0.64,0.6-1.33,0.71-2.09  c-1.63-0.34-2.94-1.04-3.92-2.1s-1.55-2.3-1.7-3.74C13.86,9.08,13,9.37,12.21,9.9c-0.78,0.53-1.39,1.2-1.82,2.02  C9.96,12.74,9.74,13.59,9.74,14.48z" id="path2" class="cloud" /> </g>'

cloudy2 = '<g transform="scale(2) translate(1,0)"><path id="cloudy" d="M3.89,17.6c0-0.99,0.31-1.88,0.93-2.65s1.41-1.27,2.38-1.49c0.26-1.17,0.85-2.14,1.78-2.88c0.93-0.75,2-1.12,3.22-1.12  c1.18,0,2.24,0.36,3.16,1.09c0.93,0.73,1.53,1.66,1.8,2.8h0.27c1.18,0,2.18,0.41,3.01,1.24s1.25,1.83,1.25,3  c0,1.18-0.42,2.18-1.25,3.01s-1.83,1.25-3.01,1.25H8.16c-0.58,0-1.13-0.11-1.65-0.34S5.52,21,5.14,20.62  c-0.38-0.38-0.68-0.84-0.91-1.36S3.89,18.17,3.89,17.6z M5.34,17.6c0,0.76,0.28,1.42,0.82,1.96s1.21,0.82,1.99,0.82h9.28  c0.77,0,1.44-0.27,1.99-0.82c0.55-0.55,0.83-1.2,0.83-1.96c0-0.76-0.27-1.42-0.83-1.96c-0.55-0.54-1.21-0.82-1.99-0.82h-1.39  c-0.1,0-0.15-0.05-0.15-0.15l-0.07-0.49c-0.1-0.94-0.5-1.73-1.19-2.35s-1.51-0.93-2.45-0.93c-0.94,0-1.76,0.31-2.46,0.94  c-0.7,0.62-1.09,1.41-1.18,2.34l-0.07,0.42c0,0.1-0.05,0.15-0.16,0.15l-0.45,0.07c-0.72,0.06-1.32,0.36-1.81,0.89  C5.59,16.24,5.34,16.87,5.34,17.6z M14.19,8.88c-0.1,0.09-0.08,0.16,0.07,0.21c0.43,0.19,0.79,0.37,1.08,0.55  c0.11,0.03,0.19,0.02,0.22-0.03c0.61-0.57,1.31-0.86,2.12-0.86c0.81,0,1.5,0.27,2.1,0.81c0.59,0.54,0.92,1.21,0.99,2l0.09,0.64h1.42  c0.65,0,1.21,0.23,1.68,0.7c0.47,0.47,0.7,1.02,0.7,1.66c0,0.6-0.21,1.12-0.62,1.57s-0.92,0.7-1.53,0.77c-0.1,0-0.15,0.05-0.15,0.16  v1.13c0,0.11,0.05,0.16,0.15,0.16c1.01-0.06,1.86-0.46,2.55-1.19s1.04-1.6,1.04-2.6c0-1.06-0.37-1.96-1.12-2.7  c-0.75-0.75-1.65-1.12-2.7-1.12h-0.15c-0.26-1-0.81-1.82-1.65-2.47c-0.83-0.65-1.77-0.97-2.8-0.97C16.28,7.29,15.11,7.82,14.19,8.88  z" id="path2" class="cloud" /></g>'

flurries2 = '<g transform="scale(2) translate(1,0)" id="flurries"> <path id="path844" d="M 15.009766 18.490234 C 14.809766 18.490234 14.619453 18.570469 14.439453 18.730469 C 14.269453 18.900469 14.189453 19.100078 14.189453 19.330078 C 14.189453 19.560078 14.269687 19.759687 14.429688 19.929688 C 14.589688 20.089688 14.779766 20.169922 15.009766 20.169922 C 15.249766 20.169922 15.449141 20.089688 15.619141 19.929688 C 15.789141 19.769687 15.869141 19.569844 15.869141 19.339844 C 15.869141 19.099844 15.789141 18.910234 15.619141 18.740234 C 15.449141 18.570234 15.249766 18.490234 15.009766 18.490234 z M 18.259766 20.189453 C 18.029766 20.189453 17.830156 20.269453 17.660156 20.439453 C 17.490156 20.609453 17.410156 20.799531 17.410156 21.019531 C 17.410156 21.249531 17.500156 21.449375 17.660156 21.609375 C 17.820156 21.779375 18.019766 21.859375 18.259766 21.859375 C 18.499766 21.859375 18.689609 21.779375 18.849609 21.609375 C 19.009609 21.449375 19.089844 21.249766 19.089844 21.009766 C 19.089844 20.789766 19.009609 20.589688 18.849609 20.429688 C 18.689609 20.269687 18.489766 20.189453 18.259766 20.189453 z M 11.830078 20.199219 C 11.590078 20.199219 11.400234 20.279453 11.240234 20.439453 C 11.080234 20.599453 11 20.799531 11 21.019531 C 11 21.259531 11.080234 21.459141 11.240234 21.619141 C 11.400234 21.789141 11.600078 21.869141 11.830078 21.869141 C 12.070078 21.869141 12.259922 21.789141 12.419922 21.619141 C 12.579922 21.459141 12.660156 21.259531 12.660156 21.019531 C 12.660156 20.799531 12.579922 20.599453 12.419922 20.439453 C 12.259922 20.279453 12.060078 20.199219 11.830078 20.199219 z M 15.009766 22.089844 C 14.789766 22.089844 14.599453 22.170078 14.439453 22.330078 C 14.269453 22.510078 14.189453 22.719219 14.189453 22.949219 C 14.189453 23.179219 14.269687 23.380781 14.429688 23.550781 C 14.589688 23.720781 14.779766 23.800781 15.009766 23.800781 C 15.249766 23.800781 15.449141 23.720781 15.619141 23.550781 C 15.789141 23.380781 15.869141 23.179219 15.869141 22.949219 C 15.869141 22.719219 15.779375 22.519609 15.609375 22.349609 C 15.439375 22.179609 15.239766 22.089844 15.009766 22.089844 z M 11.820312 23.820312 C 11.590313 23.820312 11.400234 23.900781 11.240234 24.050781 C 11.080234 24.210781 11 24.410391 11 24.650391 C 11 24.880391 11.080469 25.080469 11.230469 25.230469 C 11.390469 25.380469 11.590312 25.460938 11.820312 25.460938 C 12.060313 25.460938 12.250156 25.390469 12.410156 25.230469 C 12.570156 25.070469 12.650391 24.880625 12.650391 24.640625 C 12.650391 24.400625 12.570156 24.210781 12.410156 24.050781 C 12.250156 23.900781 12.050313 23.820312 11.820312 23.820312 z M 18.259766 23.820312 C 18.019766 23.820312 17.820156 23.900781 17.660156 24.050781 C 17.490156 24.230781 17.410156 24.430391 17.410156 24.650391 C 17.410156 24.880391 17.500156 25.070703 17.660156 25.220703 C 17.820156 25.380703 18.019766 25.460938 18.259766 25.460938 C 18.499766 25.460938 18.689609 25.390469 18.849609 25.230469 C 18.999609 25.070469 19.080078 24.880625 19.080078 24.640625 C 19.080078 24.400625 19.009609 24.200781 18.849609 24.050781 C 18.689609 23.900781 18.499766 23.820312 18.259766 23.820312 z M 15.009766 25.759766 C 14.789766 25.759766 14.599453 25.84 14.439453 26 C 14.269453 26.18 14.189453 26.379375 14.189453 26.609375 C 14.189453 26.839375 14.269687 27.029219 14.429688 27.199219 C 14.589688 27.359219 14.779766 27.439453 15.009766 27.439453 C 15.249766 27.439453 15.449141 27.359219 15.619141 27.199219 C 15.789141 27.039219 15.869141 26.839375 15.869141 26.609375 C 15.869141 26.379375 15.789141 26.179766 15.619141 26.009766 C 15.449141 25.839766 15.249766 25.759766 15.009766 25.759766 z " class="frozenPrecip" /><path d="m 4.64,16.95 c 0,-1.16 0.35,-2.18 1.06,-3.08 0.71,-0.9 1.62,-1.48 2.74,-1.76 0.31,-1.36 1.01,-2.48 2.1,-3.36 1.09,-0.88 2.34,-1.31 3.75,-1.31 1.38,0 2.6,0.43 3.68,1.28 1.08,0.85 1.78,1.95 2.1,3.29 h 0.32 c 0.89,0 1.72,0.22 2.48,0.66 0.76,0.44 1.37,1.04 1.81,1.8 0.44,0.76 0.67,1.59 0.67,2.48 0,1.32 -0.46,2.47 -1.39,3.42 -0.92,0.96 -2.05,1.46 -3.38,1.5 -0.13,0 -0.2,-0.06 -0.2,-0.17 v -1.33 c 0,-0.12 0.07,-0.18 0.2,-0.18 0.85,-0.04 1.58,-0.38 2.18,-1.02 0.6,-0.64 0.9,-1.38 0.9,-2.23 0,-0.89 -0.32,-1.65 -0.97,-2.3 -0.65,-0.65 -1.42,-0.97 -2.32,-0.97 h -1.61 c -0.12,0 -0.18,-0.06 -0.18,-0.17 L 18.5,12.92 C 18.39,11.84 17.92,10.93 17.11,10.2 16.29,9.47 15.35,9.1 14.26,9.1 c -1.1,0 -2.05,0.37 -2.86,1.11 -0.81,0.74 -1.27,1.65 -1.37,2.75 l -0.06,0.5 c 0,0.12 -0.07,0.19 -0.2,0.19 l -0.53,0.07 c -0.83,0.07 -1.53,0.41 -2.1,1.04 -0.57,0.63 -0.85,1.35 -0.85,2.19 0,0.85 0.3,1.59 0.9,2.23 0.6,0.64 1.33,0.97 2.18,1.02 0.11,0 0.17,0.06 0.17,0.18 v 1.33 c 0,0.11 -0.06,0.17 -0.17,0.17 C 8.03,21.84 6.9,21.34 5.97,20.38 5.1,19.42 4.64,18.27 4.64,16.95 Z" id="path2" class="cloud" /> </g>'

fog2 = '<g transform="scale(2) translate(1,0)" id="fog"><path d="M2.62,21.05c0-0.24,0.08-0.45,0.25-0.61c0.17-0.16,0.38-0.24,0.63-0.24h18.67c0.25,0,0.45,0.08,0.61,0.24  c0.16,0.16,0.24,0.36,0.24,0.61c0,0.23-0.08,0.43-0.25,0.58c-0.17,0.16-0.37,0.23-0.6,0.23H3.5c-0.25,0-0.46-0.08-0.63-0.23  C2.7,21.47,2.62,21.28,2.62,21.05z M5.24,17.91c0-0.24,0.09-0.44,0.26-0.6c0.15-0.15,0.35-0.23,0.59-0.23h18.67  c0.23,0,0.42,0.08,0.58,0.24c0.16,0.16,0.23,0.35,0.23,0.59c0,0.24-0.08,0.44-0.23,0.6c-0.16,0.17-0.35,0.25-0.58,0.25H6.09  c-0.24,0-0.44-0.08-0.6-0.25C5.32,18.34,5.24,18.14,5.24,17.91z M5.37,15.52c0,0.09,0.05,0.13,0.15,0.13h1.43  c0.06,0,0.13-0.05,0.2-0.16c0.24-0.52,0.59-0.94,1.06-1.27c0.47-0.33,0.99-0.52,1.55-0.56l0.55-0.07c0.11,0,0.17-0.06,0.17-0.18  l0.07-0.5c0.11-1.08,0.56-1.98,1.37-2.7c0.81-0.72,1.76-1.08,2.85-1.08c1.08,0,2.02,0.36,2.83,1.07c0.8,0.71,1.26,1.61,1.37,2.68  l0.08,0.57c0,0.11,0.07,0.17,0.2,0.17h1.59c0.64,0,1.23,0.17,1.76,0.52s0.92,0.8,1.18,1.37c0.07,0.11,0.14,0.16,0.21,0.16h1.43  c0.12,0,0.17-0.07,0.14-0.23c-0.29-1.02-0.88-1.86-1.74-2.51c-0.87-0.65-1.86-0.97-2.97-0.97h-0.32c-0.33-1.33-1.03-2.42-2.1-3.27  s-2.28-1.27-3.65-1.27c-1.4,0-2.64,0.44-3.73,1.32s-1.78,2-2.09,3.36c-0.85,0.2-1.6,0.6-2.24,1.21c-0.64,0.61-1.09,1.33-1.34,2.18  v-0.04C5.37,15.45,5.37,15.48,5.37,15.52z M6.98,24.11c0-0.24,0.09-0.43,0.26-0.59c0.15-0.15,0.35-0.23,0.6-0.23h18.68  c0.24,0,0.44,0.08,0.6,0.23c0.17,0.16,0.25,0.35,0.25,0.58c0,0.24-0.08,0.44-0.25,0.61c-0.17,0.17-0.37,0.25-0.6,0.25H7.84  c-0.23,0-0.43-0.09-0.6-0.26C7.07,24.55,6.98,24.34,6.98,24.11z" id="path2" class="cloud" /></g>'

hazy2 = '<g transform="scale(2) translate(1,0)" id="hazy"><path id="path856" d="M 15 5 C 14.76 5 14.560625 5.08 14.390625 5.25 C 14.220625 5.42 14.140625 5.619375 14.140625 5.859375 L 14.140625 7.890625 C 14.140625 8.120625 14.240391 8.3304687 14.400391 8.4804688 C 14.560391 8.6304688 14.77 8.7109375 15 8.7109375 C 15.23 8.7109375 15.429609 8.6207031 15.599609 8.4707031 C 15.769609 8.3207031 15.849609 8.120625 15.849609 7.890625 L 15.849609 5.859375 C 15.849609 5.619375 15.769609 5.42 15.599609 5.25 C 15.429609 5.08 15.24 5 15 5 z M 8.0996094 7.8496094 C 7.8696094 7.8496094 7.6609375 7.9296094 7.4609375 8.0996094 C 7.3109375 8.2796094 7.2304688 8.4809375 7.2304688 8.7109375 C 7.2304688 8.9509375 7.3107031 9.1503125 7.4707031 9.3203125 L 8.9296875 10.75 C 9.0796875 10.91 9.2795312 10.990234 9.5195312 10.990234 C 9.7595312 10.990234 9.9591406 10.91 10.119141 10.75 C 10.279141 10.59 10.359375 10.390391 10.359375 10.150391 C 10.359375 9.9103906 10.279141 9.7105469 10.119141 9.5605469 L 8.6894531 8.0996094 C 8.5094531 7.9296094 8.3096094 7.8496094 8.0996094 7.8496094 z M 21.900391 7.8496094 C 21.690391 7.8496094 21.490547 7.9296094 21.310547 8.0996094 L 19.890625 9.5605469 C 19.740625 9.7005469 19.660156 9.9003906 19.660156 10.150391 C 19.660156 10.390391 19.740625 10.590234 19.890625 10.740234 C 20.040625 10.900234 20.219219 10.980469 20.449219 10.980469 C 20.669219 10.980469 20.870781 10.900234 21.050781 10.740234 L 22.509766 9.3203125 C 22.669766 9.1603125 22.75 8.9509375 22.75 8.7109375 C 22.75 8.4709375 22.67 8.2696094 22.5 8.0996094 C 22.33 7.9296094 22.130391 7.8496094 21.900391 7.8496094 z M 15.009766 10.810547 C 14.699766 10.810547 14.44 10.829141 14.25 10.869141 L 14.199219 10.869141 C 12.969219 11.069141 11.939609 11.630547 11.099609 12.560547 C 10.259609 13.490547 9.8190625 14.579844 9.7890625 15.839844 L 9.7890625 15.910156 C 9.7890625 16.070156 9.8692969 16.150391 10.029297 16.150391 L 11.160156 16.150391 C 11.280156 16.150391 11.369922 16.120547 11.419922 16.060547 C 11.469922 16.000547 11.5 15.940859 11.5 15.880859 C 11.54 14.950859 11.900078 14.159766 12.580078 13.509766 C 13.260078 12.859766 14.069531 12.539062 15.019531 12.539062 C 15.969531 12.539062 16.780938 12.859766 17.460938 13.509766 C 18.140937 14.159766 18.499063 14.950859 18.539062 15.880859 C 18.539062 15.940859 18.559375 16.000547 18.609375 16.060547 C 18.659375 16.120547 18.739375 16.150391 18.859375 16.150391 L 19.990234 16.150391 C 20.140234 16.150391 20.220703 16.070156 20.220703 15.910156 L 20.220703 15.839844 C 20.190703 14.579844 19.750156 13.490547 18.910156 12.560547 C 18.070156 11.630547 17.030547 11.059141 15.810547 10.869141 L 15.769531 10.869141 C 15.579531 10.829141 15.319766 10.810547 15.009766 10.810547 z M 5.2207031 14.759766 C 5.0007031 14.759766 4.7991406 14.839766 4.6191406 15.009766 C 4.4491406 15.179766 4.3691406 15.379141 4.3691406 15.619141 C 4.3691406 15.849141 4.4608594 16.050703 4.6308594 16.220703 C 4.8008594 16.390703 5.0004687 16.470703 5.2304688 16.470703 L 7.2597656 16.470703 C 7.4897656 16.470703 7.6898437 16.390703 7.8398438 16.220703 C 7.9898438 16.060703 8.0703125 15.859141 8.0703125 15.619141 C 8.0703125 15.379141 7.9898438 15.179766 7.8398438 15.009766 C 7.6798438 14.839766 7.4897656 14.759766 7.2597656 14.759766 L 5.2207031 14.759766 z M 22.730469 14.759766 C 22.520469 14.759766 22.330156 14.839766 22.160156 15.009766 C 22.000156 15.189766 21.919922 15.389141 21.919922 15.619141 C 21.919922 15.859141 22.000391 16.050703 22.150391 16.220703 C 22.300391 16.390703 22.500469 16.470703 22.730469 16.470703 L 24.75 16.470703 C 24.98 16.470703 25.179609 16.390703 25.349609 16.220703 C 25.519609 16.050703 25.609375 15.849141 25.609375 15.619141 C 25.609375 15.389141 25.519609 15.189531 25.349609 15.019531 C 25.179609 14.849531 24.98 14.759766 24.75 14.759766 L 22.730469 14.759766 z " class="light" /><path id="path852" d="M 8.2597656 17.25 C 7.9897656 17.25 7.7791406 17.330703 7.6191406 17.470703 C 7.4691406 17.610703 7.390625 17.799531 7.390625 18.019531 C 7.390625 18.289531 7.4591406 18.519922 7.6191406 18.669922 C 7.7791406 18.819922 7.9897656 18.900391 8.2597656 18.900391 L 13.970703 18.900391 C 14.250703 18.900391 14.459141 18.820156 14.619141 18.660156 C 14.769141 18.500156 14.849609 18.289531 14.849609 18.019531 C 14.849609 17.799531 14.769375 17.610703 14.609375 17.470703 C 14.449375 17.320703 14.240703 17.25 13.970703 17.25 L 8.2597656 17.25 z M 16.380859 17.25 C 16.150859 17.25 15.949531 17.330469 15.769531 17.480469 C 15.589531 17.630469 15.5 17.809531 15.5 18.019531 C 15.5 18.279531 15.589531 18.490156 15.769531 18.660156 C 15.939531 18.820156 16.150859 18.900391 16.380859 18.900391 C 16.610859 18.900391 16.810234 18.820156 16.990234 18.660156 C 17.170234 18.500156 17.259766 18.279531 17.259766 18.019531 C 17.259766 17.809531 17.170234 17.630469 16.990234 17.480469 C 16.810234 17.330469 16.610859 17.25 16.380859 17.25 z M 18.789062 17.25 C 18.569063 17.25 18.369453 17.330469 18.189453 17.480469 C 18.009453 17.630469 17.919922 17.809531 17.919922 18.019531 C 17.919922 18.279531 18.009687 18.490156 18.179688 18.660156 C 18.359687 18.820156 18.559062 18.900391 18.789062 18.900391 L 21.859375 18.900391 C 22.089375 18.900391 22.270156 18.820156 22.410156 18.660156 C 22.550156 18.500156 22.619141 18.289531 22.619141 18.019531 C 22.619141 17.799531 22.540391 17.620703 22.400391 17.470703 C 22.260391 17.320703 22.079375 17.25 21.859375 17.25 L 18.789062 17.25 z M 9.2597656 20.099609 C 9.0497656 20.099609 8.8401562 20.189141 8.6601562 20.369141 C 8.4701562 20.549141 8.3808594 20.750703 8.3808594 20.970703 C 8.3808594 21.230703 8.4703906 21.449375 8.6503906 21.609375 C 8.8203906 21.769375 9.0297656 21.849609 9.2597656 21.849609 C 9.5297656 21.849609 9.7503906 21.779141 9.9003906 21.619141 C 10.050391 21.459141 10.130859 21.250703 10.130859 20.970703 C 10.130859 20.740703 10.050625 20.539375 9.890625 20.359375 C 9.730625 20.189375 9.5197656 20.099609 9.2597656 20.099609 z M 11.669922 20.099609 C 11.409922 20.099609 11.199063 20.189375 11.039062 20.359375 C 10.879063 20.539375 10.800781 20.740703 10.800781 20.970703 C 10.800781 21.250703 10.869297 21.459141 11.029297 21.619141 C 11.189297 21.769141 11.399922 21.849609 11.669922 21.849609 L 15.5 21.849609 C 15.73 21.849609 15.929375 21.769375 16.109375 21.609375 C 16.289375 21.449375 16.380859 21.230703 16.380859 20.970703 C 16.380859 20.750703 16.279609 20.549141 16.099609 20.369141 C 15.919609 20.189141 15.72 20.099609 15.5 20.099609 L 11.669922 20.099609 z M 17.919922 20.099609 C 17.659922 20.099609 17.439297 20.189375 17.279297 20.359375 C 17.119297 20.539375 17.039062 20.740703 17.039062 20.970703 C 17.039062 21.250703 17.119297 21.459141 17.279297 21.619141 C 17.439297 21.769141 17.649922 21.849609 17.919922 21.849609 L 19.779297 21.849609 C 20.049297 21.849609 20.269922 21.779141 20.419922 21.619141 C 20.569922 21.459141 20.650391 21.250703 20.650391 20.970703 C 20.650391 20.740703 20.570156 20.539375 20.410156 20.359375 C 20.250156 20.189375 20.039297 20.099609 19.779297 20.099609 L 17.919922 20.099609 z " class="cloud" /></g>'

mostlycloudy2 = '<g transform="scale(2) translate(1,0)" id="mostlycloudy"> <path id="path855" d="M 17.759766 0.91015625 C 17.519766 0.91015625 17.329922 0.99062495 17.169922 1.140625 C 17.009922 1.290625 16.939453 1.4904688 16.939453 1.7304688 L 16.939453 3.7792969 C 16.939453 4.0392969 17.019923 4.2403906 17.169922 4.4003906 C 17.319922 4.5603906 17.519766 4.6308594 17.759766 4.6308594 C 18.019766 4.6308594 18.220859 4.5503904 18.380859 4.4003906 C 18.540859 4.2403906 18.609375 4.0392969 18.609375 3.7792969 L 18.609375 1.7304688 C 18.609375 1.4904688 18.529145 1.300625 18.369141 1.140625 C 18.209141 0.980625 18.009766 0.91015625 17.759766 0.91015625 z M 10.839844 3.7792969 C 10.599844 3.7792969 10.390703 3.8592969 10.220703 4.0292969 C 10.050703 4.1892969 9.9707031 4.3908594 9.9707031 4.6308594 C 9.9707031 4.8708594 10.050938 5.0797656 10.210938 5.2597656 L 10.869141 5.9003906 C 11.119141 6.0903906 11.329766 6.1703906 11.509766 6.1503906 C 11.719766 6.1503906 11.900547 6.0606246 12.060547 5.890625 C 12.220547 5.720625 12.300781 5.5095313 12.300781 5.2695312 C 12.300781 5.0295312 12.209061 4.8296875 12.039062 4.6796875 L 11.449219 4.0195312 C 11.269219 3.8595312 11.069844 3.7792969 10.839844 3.7792969 z M 24.730469 3.7792969 C 24.490469 3.7792969 24.300391 3.859531 24.150391 4.0195312 L 22.679688 5.4492188 C 22.529687 5.6392187 22.460938 5.8403125 22.460938 6.0703125 C 22.460938 6.3303125 22.529687 6.5294531 22.679688 6.6894531 C 22.889688 6.8494531 23.100781 6.9296875 23.300781 6.9296875 C 23.480781 6.9296875 23.680625 6.8494535 23.890625 6.6894531 L 25.320312 5.2597656 C 25.480314 5.0797656 25.560547 4.8691406 25.560547 4.6191406 C 25.560547 4.3791406 25.480317 4.1795313 25.320312 4.0195312 C 25.160312 3.8595312 24.960469 3.7792969 24.730469 3.7792969 z M 17.759766 6.359375 C 16.613843 6.359375 15.582911 6.7108337 14.660156 7.40625 C 15.164893 7.6949553 15.658757 8.0389291 16.115234 8.4804688 C 16.614718 8.2091529 17.159969 8.0605469 17.759766 8.0605469 C 18.749766 8.0605469 19.589297 8.3998436 20.279297 9.0898438 C 20.969297 9.7798437 21.320312 10.609609 21.320312 11.599609 C 21.320312 11.888004 21.280592 12.176509 21.207031 12.462891 C 21.807264 12.986831 22.177459 13.452401 22.460938 13.947266 C 22.810508 13.242491 23 12.460931 23 11.599609 C 23 10.889609 22.859844 10.210547 22.589844 9.5605469 C 22.319844 8.9105469 21.940703 8.360625 21.470703 7.890625 C 21.000703 7.420625 20.450781 7.0395313 19.800781 6.7695312 C 19.150781 6.4895312 18.469766 6.359375 17.759766 6.359375 z M 25.589844 10.75 C 25.349844 10.75 25.150469 10.83 24.980469 11 C 24.800469 11.17 24.720703 11.369609 24.720703 11.599609 C 24.720703 11.829609 24.810473 12.019687 24.980469 12.179688 C 25.140469 12.339688 25.349844 12.419922 25.589844 12.419922 L 27.630859 12.419922 C 27.860859 12.419922 28.050936 12.339452 28.210938 12.189453 C 28.370936 12.039453 28.439453 11.839609 28.439453 11.599609 C 28.439453 11.359609 28.360943 11.16 28.210938 11 C 28.060937 10.84 27.860859 10.75 27.630859 10.75 L 25.589844 10.75 z M 24.109375 17.070312 C 23.869375 17.070312 23.669766 17.150542 23.509766 17.310547 C 23.339766 17.470547 23.25 17.670156 23.25 17.910156 C 23.25 18.150156 23.33 18.359063 23.5 18.539062 L 24.150391 19.169922 C 24.300391 19.329922 24.490469 19.410156 24.730469 19.410156 C 24.970469 19.410156 25.170078 19.330156 25.330078 19.160156 C 25.490078 18.990156 25.570313 18.789062 25.570312 18.539062 C 25.570312 18.319063 25.490082 18.120936 25.330078 17.960938 L 24.679688 17.310547 C 24.519686 17.150547 24.329375 17.070313 24.109375 17.070312 z " class="light" /><path id="path849" d="M 11.179688 7.4394531 C 9.769687 7.4394531 8.5292187 7.88 7.4492188 8.75 C 6.3692187 9.62 5.6691406 10.739609 5.3691406 12.099609 C 4.2491406 12.359609 3.3408594 12.930078 2.6308594 13.830078 C 1.9208594 14.730078 1.5605469 15.750391 1.5605469 16.900391 C 1.5605469 17.800391 1.7807031 18.630625 2.2207031 19.390625 C 2.6607031 20.150625 3.2595313 20.749453 4.0195312 21.189453 C 4.7795312 21.629453 5.6002344 21.849609 6.4902344 21.849609 L 17.320312 21.849609 C 18.210314 21.849609 19.040781 21.629453 19.800781 21.189453 C 20.560781 20.749453 21.169375 20.150625 21.609375 19.390625 C 22.049375 18.630625 22.279297 17.800391 22.279297 16.900391 C 22.279297 16.305266 22.149535 15.701711 21.921875 15.097656 C 21.631933 14.384794 21.363855 13.943115 20.642578 13.300781 C 19.706176 12.443555 18.605455 12 17.320312 12 L 17 12 C 16.819143 11.211463 16.470056 10.481994 15.960938 9.8085938 C 15.937648 9.7778377 15.916218 9.7428036 15.892578 9.7128906 C 15.891078 9.7110206 15.890172 9.7089012 15.888672 9.7070312 C 15.773745 9.5610297 15.638669 9.4237001 15.507812 9.2832031 C 14.83776 8.5999914 14.059093 8.1640025 13.222656 7.7929688 C 12.609999 7.5591717 11.930497 7.4394531 11.179688 7.4394531 z M 11.189453 9.1191406 C 12.289453 9.1191406 13.250547 9.4907032 14.060547 10.220703 C 14.880547 10.950703 15.329688 11.849686 15.429688 12.929688 L 15.5 13.509766 C 15.52 13.619766 15.590939 13.679687 15.710938 13.679688 L 17.320312 13.679688 C 18.200312 13.679688 18.959609 14.000625 19.599609 14.640625 C 20.239609 15.280625 20.560547 16.030156 20.560547 16.910156 C 20.560547 17.820156 20.239375 18.590469 19.609375 19.230469 C 18.979375 19.870469 18.210078 20.189453 17.330078 20.189453 L 6.4902344 20.189453 C 5.6102344 20.189453 4.8607031 19.870703 4.2207031 19.220703 C 3.5907031 18.570703 3.2695312 17.800391 3.2695312 16.900391 C 3.2695312 16.060391 3.549375 15.340469 4.109375 14.730469 C 4.669375 14.120469 5.3709375 13.769922 6.2109375 13.669922 L 6.7109375 13.640625 C 6.8309375 13.640625 6.9003906 13.580934 6.9003906 13.460938 L 6.9707031 12.919922 C 7.1107031 11.839922 7.5808594 10.930937 8.3808594 10.210938 C 9.1808594 9.480937 10.119453 9.1191406 11.189453 9.1191406 z " class="cloud" /> </g>'

mostlysunny2 = '<g transform="scale(2) translate(1,0)" id="mostlysunny"> <path id="path857" d="m 15.280407,1.199 c -0.232814,0 -0.430665,0.078884 -0.594497,0.234094 -0.163833,0.1552095 -0.250936,0.3450447 -0.250936,0.5692361 V 4.019918 c 0,0.2328141 0.0871,0.4390864 0.250936,0.6029186 0.163832,0.1638322 0.361683,0.2509354 0.594497,0.2509354 0.241437,0 0.439087,-0.087103 0.602919,-0.2509354 0.163832,-0.1638322 0.250935,-0.3614817 0.250935,-0.6029186 V 2.0023301 c 0,-0.2241914 -0.0871,-0.4140266 -0.250935,-0.5692361 C 15.719494,1.2778846 15.521844,1.199 15.280407,1.199 Z M 8.3990517,4.019918 c -0.2414369,0 -0.4394906,0.076999 -0.5860773,0.2408306 -0.1465867,0.1638322 -0.2155687,0.3614817 -0.2155687,0.6029187 0,0.2414369 0.077403,0.4396926 0.2239893,0.5776565 l 1.3877233,1.4584568 c 0.4052691,0.3104189 0.8106727,0.3104189 1.2159417,0 0.163832,-0.1638322 0.242515,-0.3631658 0.242515,-0.6046027 0,-0.2328142 -0.07868,-0.4304637 -0.242515,-0.6029187 L 9.0036543,4.2691692 C 8.8225768,4.1053371 8.6146203,4.019918 8.3990517,4.019918 Z m 13.7189243,0.00842 c -0.224191,0 -0.422245,0.08542 -0.586077,0.2492512 l -1.41467,1.4062487 c -0.155209,0.1552094 -0.232409,0.353061 -0.232409,0.594498 0,0.2414369 0.0772,0.4489891 0.232409,0.621444 0.15521,0.1552095 0.353264,0.23241 0.586078,0.23241 0.232814,0 0.432551,-0.0772 0.587761,-0.23241 L 22.74784,5.4413276 c 0.15521,-0.1465867 0.22399,-0.3362197 0.22399,-0.5776566 0,-0.241437 -0.08542,-0.4392886 -0.249251,-0.594498 C 22.558746,4.1139635 22.359413,4.0283422 22.117976,4.0283424 Z m -6.84599,2.5346159 c -0.939878,0 -1.810372,0.2332857 -2.603665,0.698914 -0.793292,0.4656283 -1.424167,1.0948196 -1.881172,1.8794888 -0.349158,0.6060834 -0.55876,1.2530273 -0.63997,1.9434863 0.572945,-0.236708 1.161003,-0.348037 1.785178,-0.36714 0.172634,-0.577608 0.474188,-1.0913867 0.933008,-1.5325583 0.663951,-0.6380838 1.475366,-0.9666909 2.406621,-0.9666908 0.957125,0 1.776152,0.3444382 2.448726,1.0256351 0.672574,0.6811969 1.008794,1.518143 1.008794,2.492513 0,0.603592 -0.146384,1.163397 -0.439558,1.680762 -0.148005,0.261187 -0.323015,0.496097 -0.523764,0.70565 0.435092,0.380182 0.793803,0.809743 1.040792,1.340568 0.394585,-0.365512 0.733004,-0.788076 1.000373,-1.278254 0.413892,-0.758802 0.629865,-1.577829 0.629865,-2.448726 0,-0.698442 -0.138368,-1.371084 -0.414296,-2.0091676 C 19.74699,9.0893556 19.376818,8.5373651 18.919813,8.0803596 18.462807,7.623354 17.910817,7.2531822 17.272734,6.9772543 16.63465,6.7013264 15.97043,6.5629583 15.271986,6.5629583 Z M 5.5882384,10.891169 c -0.2500597,0 -0.4576119,0.07868 -0.6214441,0.242515 -0.1638322,0.146586 -0.2408306,0.352656 -0.2408305,0.61134 0,0.232813 0.076999,0.422446 0.2408305,0.577655 0.1638322,0.15521 0.3713844,0.22399 0.6214441,0.22399 H 7.045011 c 0.2328142,0 0.4323499,-0.0772 0.5961821,-0.23241 0.1638321,-0.155209 0.2492512,-0.345045 0.2492512,-0.569235 0,-0.25006 -0.076999,-0.456131 -0.2408305,-0.61134 -0.1638323,-0.15521 -0.363368,-0.242515 -0.5961822,-0.242515 z m 17.3920126,0 c -0.25006,0 -0.457613,0.07868 -0.621445,0.242515 -0.163831,0.146586 -0.249251,0.352656 -0.249251,0.61134 0,0.232813 0.077,0.422446 0.240831,0.577655 0.163832,0.15521 0.371384,0.22399 0.621444,0.22399 h 1.456773 c 0.232814,0 0.432349,-0.0772 0.596181,-0.23241 0.163833,-0.155209 0.249252,-0.345045 0.249252,-0.569235 0,-0.25006 -0.077,-0.456131 -0.240831,-0.61134 -0.163832,-0.15521 -0.363367,-0.242515 -0.596181,-0.242515 z m -2.276944,5.441425 c -0.241437,0 -0.430868,0.0772 -0.586078,0.232409 -0.155209,0.15521 -0.232409,0.353264 -0.232409,0.586078 0,0.232814 0.0772,0.432148 0.232409,0.604603 l 1.41467,1.396143 c 0.362155,0.362156 0.767559,0.362156 1.215941,0 0.15521,-0.146586 0.22399,-0.336017 0.22399,-0.586076 0,-0.232815 -0.07741,-0.422448 -0.22399,-0.577657 l -1.456772,-1.439932 c -0.15521,-0.146586 -0.354947,-0.215568 -0.587761,-0.215568 z" class="light" style="stroke-width:0.999989" /><path id="path853" d="m 12.008142,11.573242 c -0.79944,0.01243 -1.439552,0.170503 -2.1270558,0.613023 -0.7294244,0.483304 -1.2324277,1.140419 -1.4820345,1.990642 -0.6553288,0.206946 -1.1731651,0.568697 -1.5611887,1.094684 -0.3880236,0.525988 -0.5860773,1.129446 -0.5860773,1.80202 0,0.836406 0.3022677,1.561997 0.9144827,2.174212 0.612215,0.612215 1.3277008,0.912798 2.1641072,0.912798 H 15.24504 c 0.836407,0 1.552297,-0.300785 2.147267,-0.904377 0.594969,-0.603593 0.897641,-1.328981 0.897641,-2.182633 0,-0.315549 -0.04772,-0.583211 -0.117889,-0.828592 -0.218757,-0.7288 -0.589271,-1.203309 -1.202469,-1.667289 -0.478638,-0.355431 -1.018572,-0.538921 -1.620133,-0.538921 -0.25006,-0.758802 -0.699318,-1.353637 -1.328778,-1.80202 -0.595622,-0.424278 -1.269809,-0.640738 -2.012537,-0.663547 z M 11.875096,13.2119 c 0.500119,0 0.939678,0.163899 1.301833,0.500188 0.370778,0.336287 0.586347,0.749707 0.646706,1.241203 l 0.06905,0.560815 c 0.05174,0.129341 0.120919,0.197044 0.207148,0.197044 h 1.136788 c 0.370778,0 0.690763,0.13857 0.966691,0.405875 0.275928,0.267305 0.404191,0.585606 0.404191,0.965007 0,0.388024 -0.136886,0.716024 -0.404191,0.991952 -0.267305,0.275928 -0.595913,0.414296 -0.966691,0.414296 H 9.3303756 c -0.3880236,0 -0.7147448,-0.138368 -0.9734272,-0.414296 -0.2673051,-0.275928 -0.3974548,-0.612349 -0.3974547,-1.000373 0,-0.362155 0.1124325,-0.672641 0.3452467,-0.931324 0.2328141,-0.258682 0.5255833,-0.405067 0.8791159,-0.439558 l 0.5355534,-0.06905 c 0.1120957,0 0.1717813,-0.06771 0.1717813,-0.197043 l 0.07747,-0.483345 c 0.060359,-0.50012 0.267709,-0.913541 0.629865,-1.241204 0.362155,-0.336288 0.785073,-0.500188 1.27657,-0.500188 z" class="cloud" style="stroke-width:0.999989" /> </g>'

rain2 = '<g transform="scale(2) translate(1,0)" id="rain"> <path id="path840" d="M 19.169922 17.029297 C 19.009922 17.029297 18.860937 17.079687 18.710938 17.179688 C 18.570937 17.279687 18.470156 17.429141 18.410156 17.619141 L 16.779297 23.390625 C 16.749297 23.510625 16.740234 23.579141 16.740234 23.619141 C 16.740234 23.779141 16.790859 23.939844 16.880859 24.089844 C 16.990859 24.249844 17.139844 24.350156 17.339844 24.410156 L 17.580078 24.460938 C 17.770078 24.460938 17.939844 24.399062 18.089844 24.289062 C 18.239844 24.179063 18.329141 24.020078 18.369141 23.830078 L 20 18.099609 C 20 18.079609 20.009531 18.040469 20.019531 17.980469 C 20.029531 17.920469 20.039062 17.869844 20.039062 17.839844 C 20.039062 17.679844 19.990625 17.519141 19.890625 17.369141 C 19.790625 17.219141 19.639688 17.120547 19.429688 17.060547 C 19.339688 17.040547 19.249922 17.029297 19.169922 17.029297 z M 12.439453 17.039062 C 12.289453 17.039063 12.130469 17.089453 11.980469 17.189453 C 11.830469 17.289453 11.720156 17.440859 11.660156 17.630859 L 10.029297 23.400391 C 9.9992969 23.490391 9.9902344 23.559609 9.9902344 23.599609 C 9.9902344 23.769609 10.040391 23.929609 10.150391 24.099609 C 10.260391 24.259609 10.420625 24.369687 10.640625 24.429688 C 10.650625 24.429687 10.680234 24.440938 10.740234 24.460938 C 10.780234 24.470937 10.809609 24.480469 10.849609 24.480469 C 11.269609 24.480469 11.549922 24.269844 11.669922 23.839844 L 13.300781 18.109375 C 13.370781 17.859375 13.340703 17.639453 13.220703 17.439453 C 13.100703 17.239453 12.919688 17.110312 12.679688 17.070312 C 12.589687 17.050313 12.509453 17.039062 12.439453 17.039062 z M 15.839844 17.050781 C 15.669844 17.050781 15.509609 17.099219 15.349609 17.199219 C 15.189609 17.299219 15.090781 17.450625 15.050781 17.640625 L 12.609375 26.410156 C 12.539375 26.670156 12.559922 26.880547 12.669922 27.060547 C 12.819922 27.270547 12.989453 27.399219 13.189453 27.449219 C 13.259453 27.479219 13.349453 27.5 13.439453 27.5 C 13.629453 27.5 13.789219 27.440313 13.949219 27.320312 C 14.109219 27.200312 14.200234 27.060625 14.240234 26.890625 L 16.669922 18.109375 C 16.729922 17.879375 16.709609 17.670703 16.599609 17.470703 C 16.489609 17.270703 16.329375 17.140078 16.109375 17.080078 C 16.019375 17.060078 15.929844 17.050781 15.839844 17.050781 z " class="precip" /><path d="m 4.64,16.91 c 0,-1.15 0.36,-2.17 1.08,-3.07 0.72,-0.9 1.63,-1.47 2.73,-1.73 0.31,-1.36 1.02,-2.48 2.11,-3.36 1.09,-0.88 2.34,-1.31 3.75,-1.31 1.38,0 2.6,0.43 3.68,1.28 1.08,0.85 1.78,1.95 2.1,3.29 h 0.32 c 0.89,0 1.72,0.22 2.48,0.65 0.76,0.43 1.37,1.03 1.81,1.78 0.44,0.75 0.67,1.58 0.67,2.47 0,0.88 -0.21,1.69 -0.63,2.44 -0.42,0.75 -1,1.35 -1.73,1.8 -0.73,0.45 -1.53,0.69 -2.4,0.71 -0.13,0 -0.2,-0.06 -0.2,-0.17 v -1.33 c 0,-0.12 0.07,-0.18 0.2,-0.18 0.85,-0.04 1.58,-0.38 2.18,-1.02 0.6,-0.64 0.9,-1.39 0.9,-2.26 0,-0.87 -0.33,-1.62 -0.98,-2.26 C 22.06,14 21.29,13.68 20.4,13.68 h -1.61 c -0.12,0 -0.18,-0.06 -0.18,-0.17 L 18.53,12.93 C 18.42,11.85 17.95,10.94 17.14,10.22 16.32,9.49 15.38,9.13 14.29,9.13 c -1.09,0 -2.05,0.36 -2.85,1.09 -0.81,0.73 -1.26,1.63 -1.36,2.71 l -0.07,0.53 c 0,0.12 -0.07,0.19 -0.2,0.19 l -0.53,0.03 c -0.83,0.1 -1.53,0.46 -2.1,1.07 -0.57,0.61 -0.85,1.33 -0.85,2.16 0,0.87 0.3,1.62 0.9,2.26 0.6,0.64 1.33,0.98 2.18,1.02 0.11,0 0.17,0.06 0.17,0.18 v 1.33 c 0,0.11 -0.06,0.17 -0.17,0.17 C 8.07,21.81 6.94,21.3 6.01,20.34 5.08,19.38 4.64,18.24 4.64,16.91 Z" id="path2" class="cloud" /> </g>'

sleet2 = '<g transform="scale(2) translate(1,0)" id="sleet"> <path id="path848" d="M 11.150391 20.359375 C 10.910391 20.359375 10.710547 20.429844 10.560547 20.589844 C 10.410547 20.749844 10.330078 20.939688 10.330078 21.179688 C 10.330078 21.399687 10.420078 21.59 10.580078 21.75 C 10.730078 21.91 10.920391 21.990234 11.150391 21.990234 C 11.390391 21.990234 11.590234 21.919766 11.740234 21.759766 C 11.890234 21.599766 11.970703 21.409688 11.970703 21.179688 C 11.970703 20.939687 11.900234 20.739844 11.740234 20.589844 C 11.580234 20.439844 11.390391 20.359375 11.150391 20.359375 z M 17.699219 20.369141 C 17.459219 20.369141 17.269375 20.439609 17.109375 20.599609 C 16.959375 20.759609 16.880859 20.949453 16.880859 21.189453 C 16.880859 21.419453 16.970859 21.609766 17.130859 21.759766 C 17.280859 21.919766 17.470938 22 17.710938 22 C 17.950938 22 18.139063 21.919531 18.289062 21.769531 C 18.439062 21.619531 18.519531 21.419453 18.519531 21.189453 C 18.519531 20.949453 18.449063 20.759609 18.289062 20.599609 C 18.129062 20.449609 17.939219 20.369141 17.699219 20.369141 z M 13.580078 23.449219 C 13.340078 23.449219 13.150234 23.519687 12.990234 23.679688 C 12.840234 23.829687 12.759766 24.029766 12.759766 24.259766 C 12.759766 24.489766 12.84 24.679844 13 24.839844 C 13.16 24.999844 13.350078 25.080078 13.580078 25.080078 C 13.820078 25.080078 14.009922 25.009609 14.169922 24.849609 C 14.319922 24.689609 14.400391 24.499766 14.400391 24.259766 C 14.400391 24.029766 14.329922 23.839688 14.169922 23.679688 C 14.009922 23.529687 13.820078 23.449219 13.580078 23.449219 z " class="frozenPrecip" /><path id="path846" d="M 14.367188 20.179688 C 14.260938 20.193437 14.155781 20.229062 14.050781 20.289062 C 13.850781 20.409062 13.710625 20.590312 13.640625 20.820312 L 13.410156 21.720703 C 13.390156 21.800703 13.380859 21.890234 13.380859 21.990234 C 13.370859 22.140234 13.409297 22.300937 13.529297 22.460938 C 13.629297 22.620938 13.780469 22.719766 13.980469 22.759766 C 14.210469 22.819766 14.429141 22.799219 14.619141 22.699219 C 14.809141 22.599219 14.949297 22.420625 15.029297 22.140625 L 15.289062 21.240234 C 15.359062 21.020234 15.340703 20.809375 15.220703 20.609375 C 15.100703 20.409375 14.929453 20.280938 14.689453 20.210938 C 14.579453 20.175937 14.473437 20.165938 14.367188 20.179688 z M 10.455078 22.642578 C 10.342578 22.655078 10.235859 22.69 10.130859 22.75 C 9.9208594 22.87 9.7907031 23.039297 9.7207031 23.279297 L 9.6308594 23.869141 C 9.6308594 23.899141 9.619375 23.940234 9.609375 23.990234 C 9.599375 24.050234 9.5898438 24.089141 9.5898438 24.119141 C 9.5898438 24.289141 9.64 24.449609 9.75 24.599609 C 9.85 24.759609 10.000938 24.869687 10.210938 24.929688 C 10.250938 24.929687 10.289609 24.939219 10.349609 24.949219 C 10.409609 24.959219 10.460234 24.970703 10.490234 24.970703 C 10.900234 24.970703 11.15 24.750547 11.25 24.310547 L 11.390625 23.710938 C 11.450625 23.500938 11.430312 23.290078 11.320312 23.080078 C 11.200313 22.880078 11.040547 22.739922 10.810547 22.669922 C 10.685547 22.639922 10.567578 22.630078 10.455078 22.642578 z M 16.984375 22.662109 C 16.871875 22.674609 16.765156 22.709531 16.660156 22.769531 C 16.450156 22.889531 16.32 23.060781 16.25 23.300781 L 16.160156 23.890625 C 16.160156 23.910625 16.160391 23.95 16.150391 24 C 16.140391 24.05 16.140625 24.100859 16.140625 24.130859 C 16.140625 24.300859 16.199063 24.459141 16.289062 24.619141 C 16.389062 24.779141 16.540234 24.889219 16.740234 24.949219 C 16.770234 24.949219 16.820859 24.960703 16.880859 24.970703 C 16.940859 24.980703 16.989531 24.990234 17.019531 24.990234 C 17.429531 24.990234 17.679297 24.770078 17.779297 24.330078 L 17.919922 23.730469 C 17.989922 23.520469 17.969609 23.309609 17.849609 23.099609 C 17.739609 22.899609 17.569844 22.759453 17.339844 22.689453 C 17.214844 22.659453 17.096875 22.649609 16.984375 22.662109 z M 12.865234 25.734375 C 12.760234 25.745625 12.655781 25.779844 12.550781 25.839844 C 12.350781 25.949844 12.210625 26.119609 12.140625 26.349609 L 12.009766 26.939453 C 11.979766 27.059453 11.970703 27.129922 11.970703 27.169922 C 11.970703 27.339922 12.030859 27.500156 12.130859 27.660156 C 12.240859 27.820156 12.399141 27.930234 12.619141 27.990234 C 12.699141 28.010234 12.789375 28.019531 12.859375 28.019531 C 13.289375 28.019531 13.560156 27.820156 13.660156 27.410156 L 13.789062 26.820312 C 13.859062 26.570312 13.830937 26.340625 13.710938 26.140625 C 13.590938 25.940625 13.409688 25.809531 13.179688 25.769531 C 13.074687 25.734531 12.970234 25.723125 12.865234 25.734375 z " class="precip" /><path d="m 4.09,16.95 c 0,-1.16 0.36,-2.19 1.08,-3.09 0.72,-0.9 1.64,-1.49 2.74,-1.74 0.31,-1.37 1.01,-2.49 2.1,-3.37 1.09,-0.88 2.35,-1.32 3.77,-1.32 0.81,0 1.55,0.13 2.2,0.4 0,0.01 0,0.01 0.01,0.02 0.84,0.32 1.58,0.84 2.21,1.55 h 0.03 c 0.68,0.73 1.13,1.6 1.37,2.62 h 0.31 c 1.08,0 2.02,0.29 2.83,0.86 v -0.01 c 0.53,0.36 0.98,0.8 1.34,1.33 0.36,0.53 0.6,1.11 0.73,1.74 0.04,0.21 0.06,0.38 0.08,0.52 v 0.06 c 0,0.01 0,0.06 0.01,0.17 0.01,0.11 0.01,0.19 0.01,0.24 v 0.03 c 0,0.88 -0.21,1.7 -0.64,2.45 -0.42,0.75 -1,1.36 -1.74,1.81 -0.73,0.45 -1.54,0.69 -2.42,0.72 -0.13,0 -0.2,-0.06 -0.2,-0.17 v -1.34 c 0,-0.13 0.07,-0.19 0.2,-0.19 0.86,-0.04 1.58,-0.38 2.18,-1.02 0.6,-0.64 0.9,-1.39 0.9,-2.26 0,-0.89 -0.32,-1.65 -0.97,-2.29 -0.64,-0.64 -1.41,-0.96 -2.31,-0.96 H 18.3 c -0.12,0 -0.18,-0.06 -0.18,-0.17 l -0.08,-0.59 c -0.1,-1 -0.52,-1.86 -1.27,-2.59 -0.01,-0.01 -0.01,-0.02 -0.02,-0.03 -0.01,-0.01 -0.02,-0.02 -0.02,-0.03 -0.01,-0.01 -0.02,-0.02 -0.04,-0.02 0,-0.02 -0.01,-0.03 -0.02,-0.03 C 15.94,9.59 15.09,9.21 14.11,9.13 14.04,9.12 13.93,9.12 13.77,9.12 c -1.1,0 -2.05,0.37 -2.86,1.1 -0.81,0.73 -1.27,1.64 -1.37,2.72 L 9.46,13.53 C 9.43,13.62 9.35,13.67 9.24,13.67 L 8.75,13.7 C 7.91,13.8 7.2,14.16 6.64,14.77 6.08,15.38 5.8,16.11 5.8,16.95 v 0.04 h 0.03 c 0.01,0.48 0.11,0.93 0.3,1.35 0.2,0.43 0.46,0.79 0.8,1.09 0.21,0.18 0.45,0.34 0.74,0.48 v 0.01 c 0.4,0.19 0.8,0.3 1.21,0.32 0.11,0 0.17,0.06 0.17,0.18 v 1.34 c 0,0.11 -0.06,0.17 -0.17,0.17 C 8.36,21.9 7.87,21.8 7.4,21.63 v 0.01 C 6.57,21.35 5.86,20.87 5.29,20.21 4.72,19.55 4.34,18.77 4.18,17.9 V 17.87 C 4.17,17.86 4.17,17.85 4.17,17.83 4.11,17.57 4.09,17.27 4.09,16.95 Z" id="path2" class="cloud" /> </g>'

snow2 = '<g transform="scale(2) translate(1,0)"><path d="M7.46,14.41c0-0.19,0.07-0.36,0.2-0.5c0.13-0.14,0.29-0.21,0.48-0.21c0.19,0,0.36,0.07,0.49,0.21c0.13,0.14,0.2,0.3,0.2,0.5  c0,0.19-0.07,0.35-0.2,0.48c-0.13,0.13-0.3,0.2-0.48,0.2s-0.35-0.07-0.48-0.2C7.52,14.75,7.46,14.59,7.46,14.41z M9.44,14.41  c0-0.19,0.07-0.36,0.2-0.5c0.13-0.14,0.29-0.21,0.48-0.21h3.23l-2.28-2.28c-0.14-0.12-0.21-0.28-0.21-0.47  c0-0.19,0.07-0.35,0.21-0.49c0.14-0.14,0.3-0.21,0.49-0.21s0.35,0.07,0.49,0.21l2.27,2.27V9.52c0-0.19,0.07-0.36,0.21-0.5  s0.3-0.21,0.5-0.21c0.19,0,0.35,0.07,0.48,0.21c0.13,0.14,0.2,0.3,0.2,0.5v3.23l2.29-2.3c0.14-0.14,0.3-0.21,0.48-0.21  c0.18,0,0.35,0.07,0.49,0.21c0.12,0.14,0.18,0.3,0.18,0.49c0,0.19-0.06,0.35-0.18,0.47l-2.28,2.28h3.23c0.18,0,0.34,0.07,0.47,0.21  c0.13,0.14,0.2,0.3,0.2,0.5c0,0.18-0.07,0.34-0.2,0.47c-0.13,0.13-0.29,0.2-0.47,0.2h-3.23l2.29,2.29c0.12,0.12,0.18,0.28,0.18,0.47  s-0.06,0.35-0.18,0.49c-0.14,0.14-0.31,0.21-0.49,0.21c-0.18,0-0.35-0.07-0.48-0.21l-2.29-2.3v3.24c0,0.19-0.07,0.36-0.2,0.49  c-0.13,0.13-0.29,0.2-0.48,0.2c-0.19,0-0.36-0.07-0.5-0.2c-0.14-0.13-0.21-0.3-0.21-0.49v-3.22l-2.27,2.27  c-0.14,0.14-0.3,0.21-0.49,0.21s-0.35-0.07-0.49-0.21s-0.21-0.3-0.21-0.49s0.07-0.34,0.21-0.47l2.3-2.29h-3.24  c-0.19,0-0.35-0.07-0.48-0.2C9.5,14.75,9.44,14.59,9.44,14.41z M9.45,19.25c0-0.18,0.07-0.35,0.21-0.48  c0.12-0.14,0.28-0.21,0.47-0.21c0.19,0,0.35,0.07,0.49,0.21c0.14,0.14,0.21,0.3,0.21,0.48c0,0.18-0.07,0.35-0.21,0.48  c-0.14,0.14-0.3,0.21-0.49,0.21c-0.19,0-0.35-0.07-0.47-0.21C9.52,19.6,9.45,19.44,9.45,19.25z M9.45,9.54  c0-0.18,0.07-0.35,0.21-0.48c0.12-0.14,0.28-0.21,0.47-0.21c0.19,0,0.35,0.07,0.49,0.21c0.14,0.14,0.21,0.3,0.21,0.48  s-0.07,0.35-0.21,0.49c-0.14,0.14-0.3,0.21-0.49,0.21c-0.19,0-0.35-0.07-0.47-0.21C9.52,9.89,9.45,9.72,9.45,9.54z M14.3,21.25  c0-0.18,0.07-0.34,0.21-0.47c0.14-0.13,0.3-0.2,0.5-0.2c0.19,0,0.35,0.07,0.48,0.2c0.13,0.13,0.2,0.29,0.2,0.47  c0,0.19-0.07,0.36-0.2,0.49c-0.13,0.13-0.29,0.2-0.48,0.2c-0.19,0-0.36-0.07-0.5-0.2C14.37,21.61,14.3,21.45,14.3,21.25z M14.3,7.54  c0-0.19,0.07-0.36,0.21-0.49s0.3-0.2,0.5-0.2c0.19,0,0.35,0.07,0.48,0.2c0.13,0.13,0.2,0.3,0.2,0.49c0,0.18-0.07,0.34-0.2,0.47  c-0.13,0.13-0.29,0.2-0.48,0.2c-0.19,0-0.36-0.07-0.5-0.2C14.37,7.88,14.3,7.72,14.3,7.54z M19.17,19.25c0-0.18,0.07-0.35,0.21-0.48  c0.12-0.14,0.28-0.21,0.47-0.21c0.19,0,0.35,0.07,0.49,0.21c0.14,0.14,0.21,0.3,0.21,0.48c0,0.18-0.07,0.35-0.21,0.48  c-0.14,0.14-0.3,0.21-0.49,0.21c-0.19,0-0.35-0.07-0.47-0.21C19.24,19.6,19.17,19.44,19.17,19.25z M19.17,9.54  c0-0.18,0.07-0.35,0.21-0.48c0.12-0.14,0.28-0.21,0.47-0.21c0.19,0,0.35,0.07,0.49,0.21c0.14,0.14,0.21,0.3,0.21,0.48  s-0.07,0.35-0.21,0.49c-0.14,0.14-0.3,0.21-0.49,0.21c-0.19,0-0.35-0.07-0.47-0.21C19.24,9.89,19.17,9.72,19.17,9.54z M21.17,14.41  c0-0.19,0.07-0.36,0.2-0.5c0.13-0.14,0.3-0.21,0.49-0.21c0.18,0,0.34,0.07,0.47,0.21c0.13,0.14,0.2,0.3,0.2,0.5  c0,0.18-0.07,0.34-0.2,0.47c-0.13,0.13-0.29,0.2-0.47,0.2c-0.19,0-0.36-0.07-0.49-0.2C21.24,14.75,21.17,14.59,21.17,14.41z" id="path2" class="frozenPrecip" /></g>'

sunny2 = '<g transform="scale(2) translate(1,0)" id="sunny"> <path id="path2" d="M 15 4 C 14.76 4 14.560625 4.0897656 14.390625 4.2597656 C 14.220625 4.4297656 14.140625 4.629375 14.140625 4.859375 L 14.140625 6.9003906 C 14.140625 7.1303906 14.240391 7.3304687 14.400391 7.4804688 C 14.560391 7.6304687 14.77 7.7109375 15 7.7109375 C 15.23 7.7109375 15.429609 7.6404688 15.599609 7.4804688 C 15.769609 7.3204688 15.849609 7.1303906 15.849609 6.9003906 L 15.849609 4.8496094 C 15.849609 4.6196094 15.769609 4.42 15.599609 4.25 C 15.429609 4.08 15.24 4 15 4 z M 8.0996094 6.8496094 C 7.8696094 6.8496094 7.6609375 6.9296094 7.4609375 7.0996094 C 7.3109375 7.2796094 7.2304688 7.4809375 7.2304688 7.7109375 C 7.2304688 7.9509375 7.3107031 8.1603125 7.4707031 8.3203125 L 8.9296875 9.75 C 9.0796875 9.91 9.2795312 9.9902344 9.5195312 9.9902344 C 9.7595312 9.9902344 9.9591406 9.91 10.119141 9.75 C 10.279141 9.59 10.359375 9.3903906 10.359375 9.1503906 C 10.359375 8.9103906 10.279141 8.7105469 10.119141 8.5605469 L 8.6894531 7.0898438 C 8.5194531 6.9298437 8.3196094 6.8496094 8.0996094 6.8496094 z M 21.900391 6.859375 C 21.680391 6.859375 21.480547 6.9396094 21.310547 7.0996094 L 19.890625 8.5703125 C 19.740625 8.7103125 19.660156 8.9101562 19.660156 9.1601562 C 19.660156 9.4001562 19.740625 9.5997656 19.890625 9.7597656 C 20.040625 9.9197656 20.219219 10 20.449219 10 C 20.669219 10 20.870781 9.9197656 21.050781 9.7597656 L 22.509766 8.3300781 C 22.669766 8.1700781 22.75 7.9609375 22.75 7.7109375 C 22.75 7.4809375 22.67 7.279375 22.5 7.109375 C 22.34 6.939375 22.140391 6.859375 21.900391 6.859375 z M 14.990234 9.4101562 C 14.060234 9.4101562 13.200625 9.639375 12.390625 10.109375 C 11.580625 10.579375 10.950469 11.219531 10.480469 12.019531 C 10.010469 12.819531 9.7792969 13.689141 9.7792969 14.619141 C 9.7792969 15.559141 10.020703 16.430234 10.470703 17.240234 C 10.940703 18.040234 11.569141 18.670625 12.369141 19.140625 C 13.169141 19.610625 14.040469 19.839844 14.980469 19.839844 C 15.920469 19.839844 16.789844 19.610625 17.589844 19.140625 C 18.389844 18.670625 19.020234 18.040234 19.490234 17.240234 C 19.960234 16.440234 20.189453 15.570859 20.189453 14.630859 C 20.189453 13.930859 20.049297 13.249375 19.779297 12.609375 C 19.509297 11.969375 19.139922 11.419219 18.669922 10.949219 C 18.209922 10.479219 17.649766 10.110078 17.009766 9.8300781 C 16.359766 9.5500781 15.690234 9.4101562 14.990234 9.4101562 z M 15 11.130859 C 15.98 11.130859 16.81 11.470391 17.5 12.150391 C 18.19 12.840391 18.539062 13.659141 18.539062 14.619141 C 18.539062 15.599141 18.19 16.429141 17.5 17.119141 C 16.81 17.809141 15.98 18.160156 15 18.160156 C 14.02 18.160156 13.189766 17.809141 12.509766 17.119141 C 11.819766 16.429141 11.480469 15.599141 11.480469 14.619141 C 11.480469 13.659141 11.819531 12.840391 12.519531 12.150391 C 13.199531 11.470391 14.03 11.130859 15 11.130859 z M 5.2207031 13.759766 C 5.0007031 13.759766 4.7891406 13.84 4.6191406 14 C 4.4491406 14.17 4.3691406 14.379141 4.3691406 14.619141 C 4.3691406 14.859141 4.4608594 15.060469 4.6308594 15.230469 C 4.8008594 15.400469 5.0004687 15.480469 5.2304688 15.480469 L 7.2695312 15.480469 C 7.4995312 15.480469 7.6996094 15.400469 7.8496094 15.230469 C 7.9996094 15.060469 8.0703125 14.859141 8.0703125 14.619141 C 8.0703125 14.379141 7.9898438 14.179766 7.8398438 14.009766 C 7.6798438 13.839766 7.4897656 13.759766 7.2597656 13.759766 L 5.2207031 13.759766 z M 22.730469 13.759766 C 22.510469 13.759766 22.320156 13.84 22.160156 14 C 22.000156 14.18 21.919922 14.379141 21.919922 14.619141 C 21.919922 14.859141 22.000391 15.050703 22.150391 15.220703 C 22.300391 15.390703 22.500469 15.470703 22.730469 15.470703 L 24.75 15.470703 C 24.98 15.470703 25.179609 15.390703 25.349609 15.220703 C 25.519609 15.050703 25.609375 14.849141 25.609375 14.619141 C 25.609375 14.389141 25.519609 14.189531 25.349609 14.019531 C 25.179609 13.849531 24.98 13.759766 24.75 13.759766 L 22.730469 13.759766 z M 9.5195312 19.279297 C 9.2795312 19.279297 9.0796875 19.349766 8.9296875 19.509766 L 7.4609375 20.939453 C 7.3109375 21.119453 7.2304688 21.320781 7.2304688 21.550781 C 7.2304687 21.780781 7.3107031 21.980625 7.4707031 22.140625 C 7.8807031 22.460625 8.2892187 22.460625 8.6992188 22.140625 L 10.119141 20.720703 C 10.279141 20.540703 10.359375 20.320078 10.359375 20.080078 C 10.359375 19.850078 10.279141 19.659766 10.119141 19.509766 C 9.9591406 19.359766 9.7595313 19.279297 9.5195312 19.279297 z M 20.449219 19.289062 C 20.229219 19.289063 20.040625 19.359531 19.890625 19.519531 C 19.740625 19.659531 19.660156 19.850078 19.660156 20.080078 C 19.660156 20.340078 19.740625 20.550469 19.890625 20.730469 L 21.310547 22.150391 C 21.710547 22.460391 22.109766 22.460391 22.509766 22.150391 C 22.669766 21.990391 22.75 21.790547 22.75 21.560547 C 22.75 21.330547 22.669766 21.119219 22.509766 20.949219 L 21.050781 19.519531 C 20.890781 19.369531 20.689219 19.289062 20.449219 19.289062 z M 14.990234 21.560547 C 14.760234 21.560547 14.560625 21.640781 14.390625 21.800781 C 14.220625 21.960781 14.140625 22.160391 14.140625 22.400391 L 14.140625 24.390625 C 14.140625 24.630625 14.220625 24.839766 14.390625 25.009766 C 14.550625 25.179766 14.760234 25.259766 14.990234 25.259766 C 15.220234 25.259766 15.419844 25.179766 15.589844 25.009766 C 15.759844 24.839766 15.839844 24.630625 15.839844 24.390625 L 15.839844 22.400391 C 15.839844 22.160391 15.759609 21.960781 15.599609 21.800781 C 15.439609 21.640781 15.230234 21.560547 14.990234 21.560547 z " class="light" /> </g>'

tstorms2 = '<g transform="scale(2) translate(1,0)" id="tstorms"> <path d="m 10.108516,17.031093 c -0.09,0 -0.1687504,0.05063 -0.2187504,0.140626 l -0.4648438,1.220703 0.00977,0.0039 -0.5253907,1.357422 -0.109375,0.287109 c -6.073e-4,-1.54e-4 -0.00135,1.54e-4 -0.00195,0 l -1.21875,3.146484 -0.00195,-0.002 -0.048828,0.125 c -0.03,0.14 0.020625,0.220703 0.140625,0.220703 h 2.1308593 l -1.0410156,3.779297 h 0.2792969 l 3.9707043,-5.21875 c 0.04,-0.04 0.03953,-0.09062 0.01953,-0.140625 -0.02,-0.05 -0.06867,-0.07031 -0.138672,-0.07031 h -2.179687 l 2.478515,-4.640625 c 0.06,-0.14 0.02133,-0.208985 -0.138672,-0.208985 z" id="path845" class="light" /><path d="m 14.278438,7.41 c -1.41,0 -2.669766,0.440547 -3.759766,1.310547 -1.0900001,0.87 -1.7896095,1.989375 -2.0996095,3.359375 -1.1,0.26 -2.0104688,0.830468 -2.7304688,1.730468 -0.72,0.9 -1.0585937,1.910547 -1.0585937,3.060547 0,1.11 0.3282812,2.100703 0.9882812,2.970703 0.4540835,0.598565 1.0053645,1.05874 1.6425782,1.398438 L 7.8780468,19.644375 C 7.5620131,19.445629 7.2772245,19.19301 7.0284375,18.880703 c -0.47,-0.59 -0.6992188,-1.259766 -0.6992188,-2.009766 0,-0.83 0.2798438,-1.550156 0.8398438,-2.160156 0.56,-0.61 1.2596094,-0.960547 2.0996093,-1.060547 l 0.5195313,-0.07031 c 0.13,0 0.2011719,-0.05992 0.2011719,-0.169922 l 0.070313,-0.519531 c 0.1,-1.080001 0.549375,-1.988751 1.359375,-2.71875 0.81,-0.73 1.759609,-1.101563 2.849609,-1.101563 1.09,0 2.03961,0.371562 2.84961,1.101563 0.82,0.73 1.28039,1.638749 1.40039,2.71875 l 0.06055,0.580078 c 0,0.12 0.05945,0.179687 0.189453,0.179687 h 1.611328 c 0.91,0 1.67836,0.321172 2.31836,0.951172 0.64,0.63 0.960937,1.389297 0.960937,2.279297 0,0.85 -0.300625,1.590937 -0.890625,2.210937 -0.59,0.62 -1.319453,0.959297 -2.189453,1.029297 -0.13,0 -0.199219,0.05945 -0.199219,0.189453 v 1.371094 c 0,0.11 0.06922,0.169922 0.199219,0.169922 0.65,-0.02 1.269375,-0.171406 1.859375,-0.441406 0.59,-0.27 1.101484,-0.62836 1.521485,-1.06836 0.42,-0.44 0.759765,-0.960312 1.009765,-1.570312 0.25,-0.6 0.378906,-1.23086 0.378906,-1.880859 0,-0.9 -0.219921,-1.730235 -0.669921,-2.490235 -0.45,-0.76 -1.050547,-1.358828 -1.810547,-1.798828 -0.76,-0.44 -1.588516,-0.660156 -2.478516,-0.660156 h -0.320313 c -0.329999,-1.33 -1.029375,-2.419766 -2.109374,-3.259766 -1.080001,-0.84 -2.301641,-1.271484 -3.681641,-1.271484 z" id="path2-9" class="cloud" /><path id="path854" d="M 15.830078 17.019531 C 15.670078 17.019531 15.509375 17.069922 15.359375 17.169922 C 15.209375 17.269922 15.100781 17.419141 15.050781 17.619141 L 12.789062 26.339844 C 12.779063 26.439844 12.769531 26.529141 12.769531 26.619141 C 12.769531 27.009141 12.959609 27.270625 13.349609 27.390625 C 13.359609 27.390625 13.400938 27.390391 13.460938 27.400391 C 13.520938 27.410391 13.569609 27.410156 13.599609 27.410156 C 13.769609 27.410156 13.929844 27.359766 14.089844 27.259766 C 14.249844 27.159766 14.360156 26.999297 14.410156 26.779297 L 16.660156 18.089844 C 16.720156 17.849844 16.699844 17.639453 16.589844 17.439453 C 16.479844 17.249453 16.319844 17.120781 16.089844 17.050781 C 15.919844 17.030781 15.830078 17.019531 15.830078 17.019531 z M 19.189453 17.039062 C 19.019453 17.039062 18.860703 17.089453 18.720703 17.189453 C 18.580703 17.289453 18.479922 17.440625 18.419922 17.640625 L 16.960938 23.339844 C 16.960938 23.359844 16.959219 23.389219 16.949219 23.449219 C 16.929219 23.499219 16.929688 23.530547 16.929688 23.560547 C 16.929688 23.690547 16.959297 23.819453 17.029297 23.939453 C 17.169297 24.159453 17.339063 24.310859 17.539062 24.380859 C 17.649062 24.410859 17.749844 24.429688 17.839844 24.429688 C 17.929844 24.429688 18.040156 24.409609 18.160156 24.349609 C 18.370156 24.259609 18.510078 24.069297 18.580078 23.779297 L 20.019531 18.109375 C 20.049531 17.969375 20.070312 17.879844 20.070312 17.839844 C 20.070312 17.689844 20.020156 17.540625 19.910156 17.390625 C 19.800156 17.240625 19.649219 17.130312 19.449219 17.070312 C 19.279219 17.050313 19.189453 17.039062 19.189453 17.039062 z " class="precip" /> </g>'

partlycloudy2 = '<g transform="scale(2) translate(1,0)" id="partlycloudy"> <path id="path857" d="m 15.280407,1.199 c -0.232814,0 -0.430665,0.078884 -0.594497,0.234094 -0.163833,0.1552095 -0.250936,0.3450447 -0.250936,0.5692361 V 4.019918 c 0,0.2328141 0.0871,0.4390864 0.250936,0.6029186 0.163832,0.1638322 0.361683,0.2509354 0.594497,0.2509354 0.241437,0 0.439087,-0.087103 0.602919,-0.2509354 0.163832,-0.1638322 0.250935,-0.3614817 0.250935,-0.6029186 V 2.0023301 c 0,-0.2241914 -0.0871,-0.4140266 -0.250935,-0.5692361 C 15.719494,1.2778846 15.521844,1.199 15.280407,1.199 Z M 8.3990517,4.019918 c -0.2414369,0 -0.4394906,0.076999 -0.5860773,0.2408306 -0.1465867,0.1638322 -0.2155687,0.3614817 -0.2155687,0.6029187 0,0.2414369 0.077403,0.4396926 0.2239893,0.5776565 l 1.3877233,1.4584568 c 0.4052691,0.3104189 0.8106727,0.3104189 1.2159417,0 0.163832,-0.1638322 0.242515,-0.3631658 0.242515,-0.6046027 0,-0.2328142 -0.07868,-0.4304637 -0.242515,-0.6029187 L 9.0036543,4.2691692 C 8.8225768,4.1053371 8.6146203,4.019918 8.3990517,4.019918 Z m 13.7189243,0.00842 c -0.224191,0 -0.422245,0.08542 -0.586077,0.2492512 l -1.41467,1.4062487 c -0.155209,0.1552094 -0.232409,0.353061 -0.232409,0.594498 0,0.2414369 0.0772,0.4489891 0.232409,0.621444 0.15521,0.1552095 0.353264,0.23241 0.586078,0.23241 0.232814,0 0.432551,-0.0772 0.587761,-0.23241 L 22.74784,5.4413276 c 0.15521,-0.1465867 0.22399,-0.3362197 0.22399,-0.5776566 0,-0.241437 -0.08542,-0.4392886 -0.249251,-0.594498 C 22.558746,4.1139635 22.359413,4.0283422 22.117976,4.0283424 Z m -6.84599,2.5346159 c -0.939878,0 -1.810372,0.2332857 -2.603665,0.698914 -0.793292,0.4656283 -1.424167,1.0948196 -1.881172,1.8794888 -0.349158,0.6060834 -0.55876,1.2530273 -0.63997,1.9434863 0.572945,-0.236708 1.161003,-0.348037 1.785178,-0.36714 0.172634,-0.577608 0.474188,-1.0913867 0.933008,-1.5325583 0.663951,-0.6380838 1.475366,-0.9666909 2.406621,-0.9666908 0.957125,0 1.776152,0.3444382 2.448726,1.0256351 0.672574,0.6811969 1.008794,1.518143 1.008794,2.492513 0,0.603592 -0.146384,1.163397 -0.439558,1.680762 -0.148005,0.261187 -0.323015,0.496097 -0.523764,0.70565 0.435092,0.380182 0.793803,0.809743 1.040792,1.340568 0.394585,-0.365512 0.733004,-0.788076 1.000373,-1.278254 0.413892,-0.758802 0.629865,-1.577829 0.629865,-2.448726 0,-0.698442 -0.138368,-1.371084 -0.414296,-2.0091676 C 19.74699,9.0893556 19.376818,8.5373651 18.919813,8.0803596 18.462807,7.623354 17.910817,7.2531822 17.272734,6.9772543 16.63465,6.7013264 15.97043,6.5629583 15.271986,6.5629583 Z M 5.5882384,10.891169 c -0.2500597,0 -0.4576119,0.07868 -0.6214441,0.242515 -0.1638322,0.146586 -0.2408306,0.352656 -0.2408305,0.61134 0,0.232813 0.076999,0.422446 0.2408305,0.577655 0.1638322,0.15521 0.3713844,0.22399 0.6214441,0.22399 H 7.045011 c 0.2328142,0 0.4323499,-0.0772 0.5961821,-0.23241 0.1638321,-0.155209 0.2492512,-0.345045 0.2492512,-0.569235 0,-0.25006 -0.076999,-0.456131 -0.2408305,-0.61134 -0.1638323,-0.15521 -0.363368,-0.242515 -0.5961822,-0.242515 z m 17.3920126,0 c -0.25006,0 -0.457613,0.07868 -0.621445,0.242515 -0.163831,0.146586 -0.249251,0.352656 -0.249251,0.61134 0,0.232813 0.077,0.422446 0.240831,0.577655 0.163832,0.15521 0.371384,0.22399 0.621444,0.22399 h 1.456773 c 0.232814,0 0.432349,-0.0772 0.596181,-0.23241 0.163833,-0.155209 0.249252,-0.345045 0.249252,-0.569235 0,-0.25006 -0.077,-0.456131 -0.240831,-0.61134 -0.163832,-0.15521 -0.363367,-0.242515 -0.596181,-0.242515 z m -2.276944,5.441425 c -0.241437,0 -0.430868,0.0772 -0.586078,0.232409 -0.155209,0.15521 -0.232409,0.353264 -0.232409,0.586078 0,0.232814 0.0772,0.432148 0.232409,0.604603 l 1.41467,1.396143 c 0.362155,0.362156 0.767559,0.362156 1.215941,0 0.15521,-0.146586 0.22399,-0.336017 0.22399,-0.586076 0,-0.232815 -0.07741,-0.422448 -0.22399,-0.577657 l -1.456772,-1.439932 c -0.15521,-0.146586 -0.354947,-0.215568 -0.587761,-0.215568 z" class="light" style="stroke-width:0.999989" /><path id="path853" d="m 12.008142,11.573242 c -0.79944,0.01243 -1.439552,0.170503 -2.1270558,0.613023 -0.7294244,0.483304 -1.2324277,1.140419 -1.4820345,1.990642 -0.6553288,0.206946 -1.1731651,0.568697 -1.5611887,1.094684 -0.3880236,0.525988 -0.5860773,1.129446 -0.5860773,1.80202 0,0.836406 0.3022677,1.561997 0.9144827,2.174212 0.612215,0.612215 1.3277008,0.912798 2.1641072,0.912798 H 15.24504 c 0.836407,0 1.552297,-0.300785 2.147267,-0.904377 0.594969,-0.603593 0.897641,-1.328981 0.897641,-2.182633 0,-0.315549 -0.04772,-0.583211 -0.117889,-0.828592 -0.218757,-0.7288 -0.589271,-1.203309 -1.202469,-1.667289 -0.478638,-0.355431 -1.018572,-0.538921 -1.620133,-0.538921 -0.25006,-0.758802 -0.699318,-1.353637 -1.328778,-1.80202 -0.595622,-0.424278 -1.269809,-0.640738 -2.012537,-0.663547 z M 11.875096,13.2119 c 0.500119,0 0.939678,0.163899 1.301833,0.500188 0.370778,0.336287 0.586347,0.749707 0.646706,1.241203 l 0.06905,0.560815 c 0.05174,0.129341 0.120919,0.197044 0.207148,0.197044 h 1.136788 c 0.370778,0 0.690763,0.13857 0.966691,0.405875 0.275928,0.267305 0.404191,0.585606 0.404191,0.965007 0,0.388024 -0.136886,0.716024 -0.404191,0.991952 -0.267305,0.275928 -0.595913,0.414296 -0.966691,0.414296 H 9.3303756 c -0.3880236,0 -0.7147448,-0.138368 -0.9734272,-0.414296 -0.2673051,-0.275928 -0.3974548,-0.612349 -0.3974547,-1.000373 0,-0.362155 0.1124325,-0.672641 0.3452467,-0.931324 0.2328141,-0.258682 0.5255833,-0.405067 0.8791159,-0.439558 l 0.5355534,-0.06905 c 0.1120957,0 0.1717813,-0.06771 0.1717813,-0.197043 l 0.07747,-0.483345 c 0.060359,-0.50012 0.267709,-0.913541 0.629865,-1.241204 0.362155,-0.336288 0.785073,-0.500188 1.27657,-0.500188 z" class="cloud" style="stroke-width:0.999989" /> </g>'

partlysunny2 = '<g transform="scale(2) translate(1,0)" id="partlysunny"> <path id="path855" d="M 17.759766 0.91015625 C 17.519766 0.91015625 17.329922 0.99062495 17.169922 1.140625 C 17.009922 1.290625 16.939453 1.4904688 16.939453 1.7304688 L 16.939453 3.7792969 C 16.939453 4.0392969 17.019923 4.2403906 17.169922 4.4003906 C 17.319922 4.5603906 17.519766 4.6308594 17.759766 4.6308594 C 18.019766 4.6308594 18.220859 4.5503904 18.380859 4.4003906 C 18.540859 4.2403906 18.609375 4.0392969 18.609375 3.7792969 L 18.609375 1.7304688 C 18.609375 1.4904688 18.529145 1.300625 18.369141 1.140625 C 18.209141 0.980625 18.009766 0.91015625 17.759766 0.91015625 z M 10.839844 3.7792969 C 10.599844 3.7792969 10.390703 3.8592969 10.220703 4.0292969 C 10.050703 4.1892969 9.9707031 4.3908594 9.9707031 4.6308594 C 9.9707031 4.8708594 10.050938 5.0797656 10.210938 5.2597656 L 10.869141 5.9003906 C 11.119141 6.0903906 11.329766 6.1703906 11.509766 6.1503906 C 11.719766 6.1503906 11.900547 6.0606246 12.060547 5.890625 C 12.220547 5.720625 12.300781 5.5095313 12.300781 5.2695312 C 12.300781 5.0295312 12.209061 4.8296875 12.039062 4.6796875 L 11.449219 4.0195312 C 11.269219 3.8595312 11.069844 3.7792969 10.839844 3.7792969 z M 24.730469 3.7792969 C 24.490469 3.7792969 24.300391 3.859531 24.150391 4.0195312 L 22.679688 5.4492188 C 22.529687 5.6392187 22.460938 5.8403125 22.460938 6.0703125 C 22.460938 6.3303125 22.529687 6.5294531 22.679688 6.6894531 C 22.889688 6.8494531 23.100781 6.9296875 23.300781 6.9296875 C 23.480781 6.9296875 23.680625 6.8494535 23.890625 6.6894531 L 25.320312 5.2597656 C 25.480314 5.0797656 25.560547 4.8691406 25.560547 4.6191406 C 25.560547 4.3791406 25.480317 4.1795313 25.320312 4.0195312 C 25.160312 3.8595312 24.960469 3.7792969 24.730469 3.7792969 z M 17.759766 6.359375 C 16.613843 6.359375 15.582911 6.7108337 14.660156 7.40625 C 15.164893 7.6949553 15.658757 8.0389291 16.115234 8.4804688 C 16.614718 8.2091529 17.159969 8.0605469 17.759766 8.0605469 C 18.749766 8.0605469 19.589297 8.3998436 20.279297 9.0898438 C 20.969297 9.7798437 21.320312 10.609609 21.320312 11.599609 C 21.320312 11.888004 21.280592 12.176509 21.207031 12.462891 C 21.807264 12.986831 22.177459 13.452401 22.460938 13.947266 C 22.810508 13.242491 23 12.460931 23 11.599609 C 23 10.889609 22.859844 10.210547 22.589844 9.5605469 C 22.319844 8.9105469 21.940703 8.360625 21.470703 7.890625 C 21.000703 7.420625 20.450781 7.0395313 19.800781 6.7695312 C 19.150781 6.4895312 18.469766 6.359375 17.759766 6.359375 z M 25.589844 10.75 C 25.349844 10.75 25.150469 10.83 24.980469 11 C 24.800469 11.17 24.720703 11.369609 24.720703 11.599609 C 24.720703 11.829609 24.810473 12.019687 24.980469 12.179688 C 25.140469 12.339688 25.349844 12.419922 25.589844 12.419922 L 27.630859 12.419922 C 27.860859 12.419922 28.050936 12.339452 28.210938 12.189453 C 28.370936 12.039453 28.439453 11.839609 28.439453 11.599609 C 28.439453 11.359609 28.360943 11.16 28.210938 11 C 28.060937 10.84 27.860859 10.75 27.630859 10.75 L 25.589844 10.75 z M 24.109375 17.070312 C 23.869375 17.070312 23.669766 17.150542 23.509766 17.310547 C 23.339766 17.470547 23.25 17.670156 23.25 17.910156 C 23.25 18.150156 23.33 18.359063 23.5 18.539062 L 24.150391 19.169922 C 24.300391 19.329922 24.490469 19.410156 24.730469 19.410156 C 24.970469 19.410156 25.170078 19.330156 25.330078 19.160156 C 25.490078 18.990156 25.570313 18.789062 25.570312 18.539062 C 25.570312 18.319063 25.490082 18.120936 25.330078 17.960938 L 24.679688 17.310547 C 24.519686 17.150547 24.329375 17.070313 24.109375 17.070312 z " class="light" /><path id="path849" d="M 11.179688 7.4394531 C 9.769687 7.4394531 8.5292187 7.88 7.4492188 8.75 C 6.3692187 9.62 5.6691406 10.739609 5.3691406 12.099609 C 4.2491406 12.359609 3.3408594 12.930078 2.6308594 13.830078 C 1.9208594 14.730078 1.5605469 15.750391 1.5605469 16.900391 C 1.5605469 17.800391 1.7807031 18.630625 2.2207031 19.390625 C 2.6607031 20.150625 3.2595313 20.749453 4.0195312 21.189453 C 4.7795312 21.629453 5.6002344 21.849609 6.4902344 21.849609 L 17.320312 21.849609 C 18.210314 21.849609 19.040781 21.629453 19.800781 21.189453 C 20.560781 20.749453 21.169375 20.150625 21.609375 19.390625 C 22.049375 18.630625 22.279297 17.800391 22.279297 16.900391 C 22.279297 16.305266 22.149535 15.701711 21.921875 15.097656 C 21.631933 14.384794 21.363855 13.943115 20.642578 13.300781 C 19.706176 12.443555 18.605455 12 17.320312 12 L 17 12 C 16.819143 11.211463 16.470056 10.481994 15.960938 9.8085938 C 15.937648 9.7778377 15.916218 9.7428036 15.892578 9.7128906 C 15.891078 9.7110206 15.890172 9.7089012 15.888672 9.7070312 C 15.773745 9.5610297 15.638669 9.4237001 15.507812 9.2832031 C 14.83776 8.5999914 14.059093 8.1640025 13.222656 7.7929688 C 12.609999 7.5591717 11.930497 7.4394531 11.179688 7.4394531 z M 11.189453 9.1191406 C 12.289453 9.1191406 13.250547 9.4907032 14.060547 10.220703 C 14.880547 10.950703 15.329688 11.849686 15.429688 12.929688 L 15.5 13.509766 C 15.52 13.619766 15.590939 13.679687 15.710938 13.679688 L 17.320312 13.679688 C 18.200312 13.679688 18.959609 14.000625 19.599609 14.640625 C 20.239609 15.280625 20.560547 16.030156 20.560547 16.910156 C 20.560547 17.820156 20.239375 18.590469 19.609375 19.230469 C 18.979375 19.870469 18.210078 20.189453 17.330078 20.189453 L 6.4902344 20.189453 C 5.6102344 20.189453 4.8607031 19.870703 4.2207031 19.220703 C 3.5907031 18.570703 3.2695312 17.800391 3.2695312 16.900391 C 3.2695312 16.060391 3.549375 15.340469 4.109375 14.730469 C 4.669375 14.120469 5.3709375 13.769922 6.2109375 13.669922 L 6.7109375 13.640625 C 6.8309375 13.640625 6.9003906 13.580934 6.9003906 13.460938 L 6.9707031 12.919922 C 7.1107031 11.839922 7.5808594 10.930937 8.3808594 10.210938 C 9.1808594 9.480937 10.119453 9.1191406 11.189453 9.1191406 z " class="cloud" /></g>'

sprinklerWatering2 = '<g transform="translate(-3,0)"><path class="rainDropWatering" d="m 9.785,16.555 c 0,0.92 0.23,1.78 0.7,2.57 0.47,0.79 1.1,1.43 1.9,1.9 0.8,0.47 1.66,0.71 2.59,0.71 0.93,0 1.8,-0.24 2.61,-0.71 0.81,-0.47 1.45,-1.11 1.92,-1.9 0.47,-0.8 0.71,-1.65 0.71,-2.57 0,-0.6 -0.17,-1.31 -0.52,-2.14 -0.35,-0.83 -0.77,-1.6 -1.26,-2.3 -0.44,-0.57 -0.96,-1.2 -1.56,-1.88 -0.6,-0.68 -1.65,-1.73 -1.89,-1.97 l -1.28,1.29 c -0.62,0.6 -1.22,1.29 -1.79,2.08 -0.57,0.79 -1.07,1.64 -1.49,2.55 -0.44,0.91 -0.64,1.7 -0.64,2.37 z" id="path2" /></g>'

saturationSkip2 = '<g transform="translate(-3,0)"><path class="saturatedSoil" d="M 12.724609 8.1894531 L 12.380859 8.5742188 C 12.135969 8.8577768 11.91712 9.1686167 11.720703 9.5234375 L 13.685547 11.488281 C 13.693764 11.48046 13.702852 11.474882 13.710938 11.466797 C 13.957688 11.206338 14.095703 10.89161 14.095703 10.521484 C 14.095703 9.9320244 13.643071 9.1490405 12.724609 8.1894531 z M 18.400391 10.849609 L 17.892578 11.439453 C 17.508744 11.864413 17.166855 12.344207 16.851562 12.90625 C 16.564473 13.418018 16.40951 13.834931 16.382812 14.185547 L 18.533203 16.335938 C 19.039159 16.30531 19.488286 16.10937 19.853516 15.744141 C 20.25106 15.332889 20.455078 14.85306 20.455078 14.291016 C 20.455078 13.934598 20.278256 13.482002 19.935547 12.90625 C 19.592837 12.330499 19.248886 11.850595 18.933594 11.480469 C 18.851344 11.384509 18.742516 11.246495 18.619141 11.095703 C 18.495765 10.944911 18.414099 10.863318 18.400391 10.849609 z M 12.875 14.714844 L 12.533203 15.044922 C 11.998576 15.552132 11.394367 16.251569 10.722656 17.128906 C 10.366238 17.594991 10.092381 18.088457 9.8730469 18.609375 C 9.6537128 19.130294 9.5449219 19.580973 9.5449219 19.978516 C 9.5449219 20.924395 9.859612 21.707267 10.503906 22.351562 C 11.1482 22.995856 11.94283 23.310547 12.875 23.310547 C 13.80717 23.310547 14.588127 22.982185 15.232422 22.337891 C 15.876716 21.693597 16.179688 20.896978 16.179688 19.978516 C 16.179688 19.580973 16.068943 19.13033 15.849609 18.595703 C 15.630275 18.074784 15.356345 17.581246 15.027344 17.142578 C 14.396758 16.306367 13.808174 15.606966 13.232422 15.044922 C 13.177592 15.003802 13.053209 14.893053 12.875 14.714844 z " style="stroke-width:1.37084" id="path2" /><g transform="translate(-1.004883,-2.1636203)" id="path834"><path class="skipStrikethrough"   id="path869"   d="m 6.5175781,7.8613281 a 0.84712499,0.84712499 0 0 0 -0.5683593,0.2480469 0.84712499,0.84712499 0 0 0 0,1.1972656 L 22.863281,26.21875 a 0.84712499,0.84712499 0 0 0 1.197266,0 0.84712499,0.84712499 0 0 0 0,-1.197266 L 7.1484375,8.109375 A 0.84712499,0.84712499 0 0 0 6.5175781,7.8613281 Z" /></g></g>'

rainSkip2 = '<g transform="translate(-3,0)"><g id="g843"><path id="path845" d="m 17.644531,17.841797 -0.86914,3.078125 c -0.03,0.12 -0.04102,0.190469 -0.04102,0.230469 0,0.16 0.05063,0.31875 0.140625,0.46875 0.11,0.16 0.260938,0.260312 0.460938,0.320312 l 0.238281,0.05078 c 0.19,0 0.361719,-0.05992 0.511719,-0.169922 0.149999,-0.11 0.239296,-0.270937 0.279296,-0.460937 l 0.619141,-2.177734 z"   class="rainDropsPredicted" /><path id="path843" d="m 15.029297,15.226562 -2.423828,8.712891 c -0.07,0.26 -0.05141,0.470391 0.05859,0.650391 0.150001,0.21 0.321485,0.340625 0.521485,0.390625 0.07,0.03 0.16,0.04883 0.25,0.04883 0.19,0 0.349766,-0.05969 0.509765,-0.179688 0.160001,-0.12 0.249063,-0.259687 0.289063,-0.429687 l 2.164063,-7.822266 z" class="rainDropsPredicted" /><path  id="path841"  d="m 12.435547,14.570312 c -0.15,0 -0.310938,0.05039 -0.460938,0.150391 -0.15,0.1 -0.260312,0.249453 -0.320312,0.439453 l -1.628906,5.769532 c -0.030001,0.09 -0.041016,0.161171 -0.041016,0.201171 0,0.17 0.050156,0.33 0.160156,0.5 0.11,0.16 0.270235,0.270078 0.490235,0.330079 0.01,-10e-7 0.03961,0.0093 0.09961,0.0293 0.04,0.01 0.07133,0.01953 0.111328,0.01953 0.42,0 0.69836,-0.210625 0.818359,-0.640625 l 1.63086,-5.728516 c 0.07,-0.25 0.03992,-0.469922 -0.08008,-0.669922 -0.12,-0.2 -0.299063,-0.331094 -0.539063,-0.371094 -0.09,-0.02 -0.170234,-0.0293 -0.240234,-0.0293 z" class="rainDropsPredicted" /><path  id="path839"  d="m 19.164062,14.560547 c -0.16,0 -0.308984,0.05039 -0.458984,0.150391 -0.14,0.1 -0.240781,0.249453 -0.300781,0.439453 l -0.232422,0.824218 1.341797,1.341797 0.480469,-1.685547 c 0,-0.02 0.01148,-0.06109 0.02148,-0.121093 0.01,-0.06 0.01953,-0.110625 0.01953,-0.140625 0,-0.16 -0.05039,-0.31875 -0.15039,-0.46875 -0.1,-0.15 -0.248985,-0.250547 -0.458985,-0.310547 -0.09,-0.02 -0.181719,-0.0293 -0.261719,-0.0293 z" class="rainDropsPredicted" /></g><path id="path837" d="M 14.304688 4.9707031 C 12.894685 4.9707031 11.644686 5.3992969 10.554688 6.2792969 C 10.159819 6.5980893 9.8331362 6.9597893 9.5390625 7.3417969 L 10.751953 8.5546875 C 10.943834 8.2692538 11.162336 7.996227 11.435547 7.75 C 12.235547 7.02 13.195156 6.6601562 14.285156 6.6601562 C 15.375156 6.6601564 16.314766 7.02 17.134766 7.75 C 17.944766 8.47 18.415391 9.3809365 18.525391 10.460938 L 18.605469 11.039062 C 18.605469 11.149064 18.665159 11.210937 18.785156 11.210938 L 20.394531 11.210938 C 21.284531 11.210938 22.055078 11.529922 22.705078 12.169922 C 23.355078 12.809922 23.685547 13.559688 23.685547 14.429688 C 23.685547 15.299686 23.385156 16.049453 22.785156 16.689453 C 22.185156 17.329453 21.455469 17.670938 20.605469 17.710938 C 20.475469 17.710938 20.404297 17.770628 20.404297 17.890625 L 20.404297 18.207031 L 21.478516 19.28125 C 22.016312 19.169157 22.528135 18.974174 23.005859 18.679688 C 23.735859 18.229688 24.314375 17.630859 24.734375 16.880859 C 25.154375 16.130859 25.365234 15.319453 25.365234 14.439453 C 25.365234 13.549453 25.135313 12.720703 24.695312 11.970703 C 24.255312 11.220703 23.644766 10.619453 22.884766 10.189453 C 22.124766 9.7594533 21.294297 9.5390625 20.404297 9.5390625 L 20.085938 9.5390625 C 19.765937 8.1990625 19.064375 7.1 17.984375 6.25 C 16.904375 5.4 15.684686 4.9707031 14.304688 4.9707031 z M 8.6835938 8.8828125 C 8.5932948 9.1291115 8.5055696 9.3762711 8.4453125 9.640625 C 7.3453125 9.900625 6.4348437 10.469141 5.7148438 11.369141 C 4.9948438 12.269141 4.6347656 13.289453 4.6347656 14.439453 C 4.6347656 15.769453 5.0758594 16.909141 6.0058594 17.869141 C 6.9358594 18.829141 8.0642969 19.340391 9.4042969 19.400391 C 9.5142969 19.400391 9.5742188 19.340471 9.5742188 19.230469 L 9.5742188 17.900391 C 9.5742188 17.780391 9.5142968 17.720703 9.4042969 17.720703 C 8.5542969 17.680703 7.8246094 17.339219 7.2246094 16.699219 C 6.6246094 16.059219 6.3242188 15.309453 6.3242188 14.439453 C 6.3242188 13.609453 6.6057812 12.889297 7.1757812 12.279297 C 7.7457813 11.669297 8.4453906 11.310936 9.2753906 11.210938 L 9.8046875 11.179688 C 9.9346875 11.179685 10.005859 11.110238 10.005859 10.990234 L 10.074219 10.460938 C 10.079319 10.405947 10.096596 10.356798 10.103516 10.302734 L 8.6835938 8.8828125 z " class="windSkip" /><g id="path834" transform="translate(-1.004883,-2.1636203)"><path   d="m 6.5175781,7.8613281 a 0.84712499,0.84712499 0 0 0 -0.5683593,0.2480469 0.84712499,0.84712499 0 0 0 0,1.1972656 L 22.863281,26.21875 a 0.84712499,0.84712499 0 0 0 1.197266,0 0.84712499,0.84712499 0 0 0 0,-1.197266 L 7.1484375,8.109375 A 0.84712499,0.84712499 0 0 0 6.5175781,7.8613281 Z" id="path869"  class="skipStrikethrough" /></g></g>'

windSkip2 = '<g transform="translate(-3,0)"><path class="windSkip" d="M 18.689453 7.7851562 C 17.949453 7.7851562 17.290469 8.0632812 16.730469 8.6132812 C 16.540469 8.7832812 16.449219 8.9941414 16.449219 9.2441406 C 16.449219 9.4741382 16.540703 9.6835176 16.720703 9.8535156 C 16.900703 10.023514 17.109375 10.113281 17.359375 10.113281 C 17.599375 10.113281 17.800937 10.033514 17.960938 9.8535156 C 18.150938 9.6635188 18.399453 9.5644531 18.689453 9.5644531 C 18.989453 9.5644531 19.229688 9.6635176 19.429688 9.8535156 C 19.629687 10.043514 19.730469 10.284219 19.730469 10.574219 C 19.730469 10.864219 19.629687 11.114453 19.429688 11.314453 C 19.229688 11.514453 18.989219 11.613281 18.699219 11.613281 L 13.810547 11.613281 L 15.601562 13.404297 L 18.689453 13.404297 C 19.459453 13.404297 20.129453 13.124453 20.689453 12.564453 C 21.249453 12.004453 21.529297 11.344453 21.529297 10.564453 C 21.529297 9.7844555 21.259219 9.13375 20.699219 8.59375 C 20.139219 8.05375 19.469453 7.7851562 18.689453 7.7851562 z M 4.0097656 11.613281 C 3.7497656 11.613281 3.5408594 11.704531 3.3808594 11.894531 C 3.1908594 12.064531 3.0996094 12.273672 3.0996094 12.513672 C 3.0996094 12.763672 3.1891406 12.974531 3.3691406 13.144531 C 3.5491406 13.314531 3.7597656 13.404297 4.0097656 13.404297 L 13.205078 13.404297 L 11.414062 11.613281 L 4.0097656 11.613281 z M 4.0097656 14.923828 C 3.7597656 14.923828 3.5508594 15.003594 3.3808594 15.183594 C 3.1908594 15.363594 3.0996094 15.564922 3.0996094 15.794922 C 3.0996094 16.044922 3.1891406 16.253359 3.3691406 16.443359 C 3.5491406 16.613359 3.7597656 16.705078 4.0097656 16.705078 L 16.507812 16.705078 L 14.724609 14.923828 L 4.0097656 14.923828 z M 17.121094 14.923828 L 18.902344 16.705078 L 24.050781 16.705078 C 24.340781 16.705078 24.579297 16.804141 24.779297 16.994141 C 24.979297 17.184141 25.080078 17.424844 25.080078 17.714844 C 25.080078 18.004844 24.979297 18.243359 24.779297 18.443359 C 24.579297 18.643359 24.340781 18.744141 24.050781 18.744141 C 23.770781 18.744141 23.539609 18.643594 23.349609 18.433594 C 23.169609 18.273594 22.960703 18.193359 22.720703 18.193359 C 22.470703 18.193359 22.259844 18.273594 22.089844 18.433594 C 21.919844 18.593594 21.830078 18.804453 21.830078 19.064453 C 21.830078 19.354453 21.919609 19.574375 22.099609 19.734375 C 22.629609 20.264375 23.280781 20.535156 24.050781 20.535156 C 24.830781 20.535156 25.500547 20.255078 26.060547 19.705078 C 26.620547 19.155078 26.900391 18.484844 26.900391 17.714844 C 26.900391 16.944844 26.620547 16.284141 26.060547 15.744141 C 25.500547 15.194141 24.830781 14.923828 24.050781 14.923828 L 17.121094 14.923828 z " id="path2" /><path class="skipStrikethrough" id="path869" d="m 5.5126951,5.6977078 a 0.84712499,0.84712499 0 0 0 -0.5683593,0.2480469 0.84712499,0.84712499 0 0 0 0,1.1972656 L 21.858398,24.05513 a 0.84712499,0.84712499 0 0 0 1.197266,0 0.84712499,0.84712499 0 0 0 0,-1.197266 L 6.1435545,5.9457547 A 0.84712499,0.84712499 0 0 0 5.5126951,5.6977078 Z" /></g>'

freezeSkip2 = '<g transform="translate(-3,0)"><path class="freezeSkip0" d="M 15.019531 5.5859375 C 14.76998 5.5859375 14.569217 5.6737289 14.394531 5.8359375 C 14.219842 5.9981461 14.132812 6.2101915 14.132812 6.4472656 C 14.132812 6.6718621 14.219844 6.8709945 14.394531 7.0332031 C 14.569217 7.1954116 14.782457 7.2832031 15.019531 7.2832031 C 15.256606 7.2832031 15.45498 7.1954117 15.617188 7.0332031 C 15.779399 6.8709945 15.867188 6.6718621 15.867188 6.4472656 C 15.867187 6.2101915 15.779397 5.9981461 15.617188 5.8359375 C 15.45498 5.6737288 15.256606 5.5859375 15.019531 5.5859375 z M 15.042969 8.03125 C 14.793417 8.03125 14.594609 8.1182826 14.419922 8.2929688 C 14.245233 8.467655 14.158203 8.6808947 14.158203 8.9179688 L 14.158203 11.960938 L 18.039062 15.841797 L 21.144531 15.841797 C 21.369128 15.841797 21.570214 15.754006 21.732422 15.591797 C 21.894634 15.429589 21.980469 15.230456 21.980469 15.005859 C 21.980469 14.756308 21.894632 14.557498 21.732422 14.382812 C 21.570214 14.208123 21.369128 14.121094 21.144531 14.121094 L 17.115234 14.121094 L 19.958984 11.275391 C 20.108711 11.12566 20.183594 10.926527 20.183594 10.689453 C 20.183594 10.452379 20.108715 10.252811 19.958984 10.078125 C 19.784298 9.9034391 19.572252 9.8164062 19.347656 9.8164062 C 19.123059 9.8164062 18.924686 9.9034394 18.75 10.078125 L 15.892578 12.947266 L 15.892578 8.9179688 C 15.892578 8.6684171 15.804786 8.467655 15.642578 8.2929688 C 15.480369 8.1182825 15.280042 8.03125 15.042969 8.03125 z M 21.058594 8.0820312 C 20.821521 8.0820312 20.620434 8.1690637 20.470703 8.34375 C 20.296014 8.5059586 20.208984 8.7168097 20.208984 8.9414062 C 20.208984 9.1660027 20.296017 9.378048 20.470703 9.5527344 C 20.620434 9.7274197 20.821521 9.8164062 21.058594 9.8164062 C 21.295669 9.8164062 21.495236 9.7274206 21.669922 9.5527344 C 21.844611 9.3780481 21.931641 9.1660028 21.931641 8.9414062 C 21.931641 8.7168096 21.844607 8.5184362 21.669922 8.34375 C 21.495236 8.1690637 21.295669 8.0820312 21.058594 8.0820312 z M 8.2597656 8.4589844 C 8.1508703 8.6023326 8.0820312 8.7640778 8.0820312 8.9414062 C 8.0820309 9.1660028 8.1690637 9.378048 8.34375 9.5527344 C 8.4934809 9.7274202 8.6926134 9.8164062 8.9296875 9.8164062 C 9.1209844 9.8164062 9.2825329 9.7426445 9.4316406 9.6289062 L 8.2597656 8.4589844 z M 10.015625 10.214844 C 9.909718 10.359938 9.8398438 10.516578 9.8398438 10.701172 C 9.8398438 10.938246 9.9288285 11.137377 10.103516 11.287109 L 12.947266 14.132812 L 8.9179688 14.132812 C 8.6808947 14.132813 8.480568 14.219844 8.3183594 14.394531 C 8.1561517 14.569217 8.0683594 14.782457 8.0683594 15.019531 C 8.0683594 15.244128 8.1441086 15.442825 8.34375 15.580078 C 8.5059585 15.74229 8.7043323 15.830078 8.9414062 15.830078 L 12.984375 15.830078 L 10.115234 18.6875 C 9.9405437 18.849708 9.8535156 19.036362 9.8535156 19.273438 C 9.8535156 19.510511 9.9405471 19.71008 10.115234 19.884766 C 10.28992 20.059456 10.489489 20.146484 10.726562 20.146484 C 10.963637 20.146484 11.163204 20.059453 11.337891 19.884766 L 14.169922 17.052734 L 14.169922 21.070312 C 14.169922 21.307387 14.256955 21.519432 14.431641 21.681641 C 14.606328 21.843853 14.819566 21.931641 15.056641 21.931641 C 15.293714 21.931641 15.492089 21.843849 15.654297 21.681641 C 15.816509 21.519432 15.904297 21.307388 15.904297 21.070312 L 15.904297 17.027344 L 18.761719 19.896484 C 18.923928 20.071173 19.136731 20.160156 19.361328 20.160156 C 19.522527 20.160156 19.671429 20.0978 19.810547 20.007812 L 10.015625 10.214844 z M 6.4472656 14.132812 C 6.2101915 14.132813 6.0098648 14.219844 5.8476562 14.394531 C 5.6854475 14.569217 5.5976562 14.782457 5.5976562 15.019531 C 5.5976563 15.244128 5.6722112 15.442502 5.859375 15.617188 C 6.0215836 15.779399 6.2343878 15.867188 6.4589844 15.867188 C 6.6835809 15.867187 6.8963852 15.779397 7.0585938 15.617188 C 7.2208016 15.45498 7.3066406 15.256606 7.3066406 15.019531 C 7.3066406 14.76998 7.2208023 14.569217 7.0585938 14.394531 C 6.8963852 14.219842 6.6843397 14.132812 6.4472656 14.132812 z M 23.566406 14.132812 C 23.329332 14.132812 23.117287 14.219844 22.955078 14.394531 C 22.792866 14.569217 22.705078 14.782457 22.705078 15.019531 C 22.705078 15.244128 22.79287 15.443261 22.955078 15.605469 C 23.117287 15.76768 23.329332 15.855469 23.566406 15.855469 C 23.791002 15.855469 23.990135 15.767678 24.152344 15.605469 C 24.314556 15.443261 24.402344 15.244128 24.402344 15.019531 C 24.402344 14.76998 24.314552 14.569217 24.152344 14.394531 C 23.990135 14.219842 23.791002 14.132812 23.566406 14.132812 z M 8.9296875 20.197266 C 8.6926134 20.197266 8.4934811 20.284297 8.34375 20.458984 C 8.1690637 20.621192 8.0820312 20.833998 8.0820312 21.058594 C 8.082031 21.295669 8.1690635 21.494042 8.34375 21.65625 C 8.4934811 21.830939 8.6926134 21.917969 8.9296875 21.917969 C 9.1667616 21.917969 9.3663293 21.830937 9.5410156 21.65625 C 9.7157018 21.494042 9.8027344 21.283191 9.8027344 21.058594 C 9.8027344 20.833998 9.7157018 20.63367 9.5410156 20.458984 C 9.3663293 20.284295 9.1667616 20.197266 8.9296875 20.197266 z M 20.384766 20.582031 C 20.279102 20.724003 20.208984 20.883918 20.208984 21.058594 C 20.208984 21.295669 20.296017 21.494042 20.470703 21.65625 C 20.620434 21.830939 20.821521 21.917969 21.058594 21.917969 C 21.243571 21.917969 21.399595 21.848534 21.544922 21.742188 L 20.384766 20.582031 z M 15.019531 22.716797 C 14.76998 22.716797 14.569217 22.804589 14.394531 22.966797 C 14.219842 23.129007 14.132812 23.328138 14.132812 23.552734 C 14.132813 23.802286 14.219844 24.001853 14.394531 24.164062 C 14.569217 24.326274 14.782457 24.414062 15.019531 24.414062 C 15.256606 24.414063 15.45498 24.32627 15.617188 24.164062 C 15.779399 24.001854 15.867188 23.789808 15.867188 23.552734 C 15.867187 23.328138 15.779397 23.129007 15.617188 22.966797 C 15.45498 22.804586 15.256606 22.716797 15.019531 22.716797 z " style="stroke-width:1.24776" id="path2" /><g transform="translate(-1.004883,-2.1636203)" id="path834"><path class="skipStrikethrough" id="path869" d="m 6.5175781,7.8613281 a 0.84712499,0.84712499 0 0 0 -0.5683593,0.2480469 0.84712499,0.84712499 0 0 0 0,1.1972656 L 22.863281,26.21875 a 0.84712499,0.84712499 0 0 0 1.197266,0 0.84712499,0.84712499 0 0 0 0,-1.197266 L 7.1484375,8.109375 A 0.84712499,0.84712499 0 0 0 6.5175781,7.8613281 Z" /></g></g>'

rainSensorSkip2 = '<g transform="translate(-3,0)"><g id="g864" transform="translate(0.222904,-0.05451224)"><path d="m 12.265691,21.888705 c 0,0.443048 0.110762,0.857201 0.337101,1.237644 0.22634,0.380443 0.529731,0.688649 0.914989,0.914989 0.38526,0.226339 0.799413,0.341917 1.247275,0.341917 0.447864,0 0.866833,-0.115578 1.256907,-0.341917 0.390074,-0.22634 0.698282,-0.534546 0.92462,-0.914989 0.226341,-0.38526 0.341918,-0.794596 0.341918,-1.237644 0,-0.288944 -0.08187,-0.630861 -0.250418,-1.030567 C 16.869533,20.458433 16.667271,20.08762 16.4313,19.75052 16.219408,19.476023 15.96899,19.172631 15.680046,18.845162 15.391102,18.517691 14.88545,18.01204 14.769872,17.896462 l -0.616414,0.621229 c -0.298575,0.288945 -0.587519,0.62123 -0.862016,1.001673 -0.274496,0.380443 -0.515283,0.78978 -0.717544,1.228013 -0.211892,0.438231 -0.308207,0.818674 -0.308207,1.141328 z" id="path2" style="stroke-width:0.481571" /><g id="g857" transform="matrix(1.0818786,0,0,1.0818786,-1.2099277,-0.49800135)" class="rainSensorSkip"><path id="path852" style="stroke:none;stroke-width:0.568932" d="M 15 6.0273438 C 14.104677 6.0273437 13.912952 6.0389335 13.214844 6.1386719 C 11.921247 6.3234897 10.676777 6.7169738 9.5136719 7.2910156 L 11.208984 8.9863281 C 12.011504 8.6703435 12.843462 8.454538 13.703125 8.3476562 C 14.323876 8.2705075 15.290006 8.247206 15.828125 8.296875 C 17.269474 8.4299937 18.474364 8.7701788 19.691406 9.3867188 C 20.675141 9.8850742 21.471363 10.458079 22.279297 11.248047 C 22.469315 11.433842 22.605164 11.551067 22.65625 11.574219 C 22.761803 11.622178 22.936155 11.622877 23.042969 11.576172 C 23.154446 11.527432 24.055611 10.619568 24.085938 10.525391 C 24.098141 10.48614 24.105026 10.372095 24.101562 10.240234 C 24.096662 10.061357 24.08782 10.005216 24.056641 9.9453125 C 24.000021 9.8364982 23.418072 9.2770014 22.984375 8.9140625 C 21.200547 7.4212485 19.06448 6.4643227 16.785156 6.1386719 C 16.087048 6.0389649 15.895328 6.0273437 15 6.0273438 z M 8.0019531 8.1757812 C 7.6640814 8.4065726 7.3324464 8.6489285 7.015625 8.9140625 C 6.5819282 9.2770014 5.9999687 9.8364982 5.9433594 9.9453125 C 5.9121818 10.005215 5.9029922 10.061357 5.8984375 10.240234 C 5.8947959 10.372095 5.9014326 10.48614 5.9140625 10.525391 C 5.9425035 10.613707 6.8443948 11.527585 6.9511719 11.576172 C 7.0534715 11.622487 7.24004 11.62127 7.34375 11.574219 C 7.3947832 11.551063 7.5306853 11.433838 7.7207031 11.248047 C 8.3266585 10.655567 8.9266947 10.185773 9.6035156 9.7773438 L 8.0019531 8.1757812 z M 15.279297 9.796875 C 14.3151 9.7663544 13.344691 9.8994849 12.412109 10.189453 L 14.337891 12.115234 C 14.554399 12.095203 14.762727 12.064453 15 12.064453 C 15.779636 12.064453 16.411825 12.166624 17.128906 12.410156 C 18.114934 12.745024 19.071508 13.351257 19.730469 14.058594 C 19.855736 14.193057 19.939921 14.267765 19.988281 14.287109 C 20.078428 14.323179 20.256193 14.323997 20.339844 14.289062 C 20.429621 14.251541 21.394033 13.283633 21.419922 13.205078 C 21.430708 13.171516 21.437056 13.049802 21.433594 12.925781 C 21.428704 12.74675 21.419906 12.692988 21.388672 12.632812 C 21.314455 12.490039 20.637726 11.86184 20.195312 11.525391 C 19.635649 11.099767 18.8804 10.675333 18.191406 10.400391 C 17.263131 10.029965 16.2755 9.8284087 15.279297 9.796875 z M 10.746094 10.919922 C 10.409367 11.109324 10.084942 11.312259 9.8046875 11.525391 C 9.3622803 11.86184 8.685545 12.490039 8.6113281 12.632812 C 8.5800943 12.692984 8.5709502 12.74675 8.5664062 12.925781 C 8.5629983 13.049507 8.569043 13.171681 8.5800781 13.205078 C 8.604059 13.277748 9.5501106 14.232382 9.6464844 14.28125 C 9.7282852 14.322459 9.9145658 14.32597 10.011719 14.287109 C 10.060083 14.267765 10.144264 14.19306 10.269531 14.058594 C 10.827195 13.45999 11.600445 12.944341 12.421875 12.59375 L 10.746094 10.919922 z M 15.892578 13.669922 L 18.431641 16.208984 C 18.555215 16.076947 18.723648 15.906146 18.732422 15.878906 C 18.762693 15.785004 18.746065 15.410053 18.707031 15.3125 C 18.67191 15.224719 18.337212 14.892737 18.052734 14.662109 C 17.498253 14.212584 16.771248 13.858965 16.076172 13.701172 C 16.006863 13.685436 15.954025 13.681677 15.892578 13.669922 z M 13.619141 13.791016 C 13.020831 13.972797 12.420519 14.278226 11.947266 14.662109 C 11.695388 14.86643 11.341935 15.212137 11.296875 15.298828 C 11.264851 15.360461 11.257038 15.41344 11.251953 15.601562 C 11.246609 15.799901 11.251234 15.840461 11.283203 15.90625 C 11.331483 16.005517 12.221088 16.895081 12.322266 16.945312 C 12.419758 16.993836 12.608212 16.995869 12.710938 16.949219 C 12.754921 16.929239 12.834299 16.860151 12.904297 16.78125 C 12.969547 16.707688 13.097082 16.584908 13.189453 16.507812 C 13.929776 15.889978 14.911105 15.707622 15.800781 15.972656 L 13.619141 13.791016 z "   transform="matrix(0.92431813,0,0,0.92431813,0.9123239,0.51069833)" /></g></g><g id="path836" style="fill:#77767b" transform="translate(-1.004883,-2.1894909)" /><g id="path834" transform="translate(-1.004883,-2.1894909)"><path d="m 6.5175781,7.8613281 a 0.84712499,0.84712499 0 0 0 -0.5683593,0.2480469 0.84712499,0.84712499 0 0 0 0,1.1972656 L 22.863281,26.21875 a 0.84712499,0.84712499 0 0 0 1.197266,0 0.84712499,0.84712499 0 0 0 0,-1.197266 L 7.1484375,8.109375 A 0.84712499,0.84712499 0 0 0 6.5175781,7.8613281 Z" id="path869" class="skipStrikethrough" /></g></g>'
    
genericSkip2 = '<g transform="translate(-3,0)"><path class="rainDropSkip" d="m 14.984375,8.265625 -1.279297,1.289062 c -0.320954,0.310601 -0.636465,0.647589 -0.945312,1.007813 l 7.285156,7.285156 c 0.112115,-0.416156 0.169922,-0.84607 0.169922,-1.292968 0,-0.6 -0.169532,-1.310625 -0.519532,-2.140626 -0.35,-0.83 -0.769765,-1.598828 -1.259765,-2.298828 -0.44,-0.57 -0.960547,-1.200859 -1.560547,-1.880859 -0.6,-0.68 -1.650625,-1.72875 -1.890625,-1.96875 z m -3.257813,3.658203 c -0.488491,0.709727 -0.930066,1.458503 -1.300781,2.261719 -0.4399997,0.91 -0.6406247,1.69914 -0.6406248,2.369141 0,0.92 0.2292188,1.780312 0.6992188,2.570312 0.47,0.79 1.100391,1.430391 1.900391,1.900391 0.8,0.47 1.659843,0.708984 2.589843,0.708984 0.93,0 1.801328,-0.238984 2.611329,-0.708984 0.686669,-0.398438 1.243222,-0.926043 1.685546,-1.556641 z" id="path2" /><path class="skipStrikethrough" id="path869" d="m 5.5126951,5.697708 a 0.84712499,0.84712499 0 0 0 -0.5683593,0.248047 0.84712499,0.84712499 0 0 0 0,1.197265 L 21.858398,24.05513 a 0.84712499,0.84712499 0 0 0 1.197266,0 0.84712499,0.84712499 0 0 0 0,-1.197266 L 6.1435545,5.945755 A 0.84712499,0.84712499 0 0 0 5.5126951,5.697708 Z" /></g>'

    
    
